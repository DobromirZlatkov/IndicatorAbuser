<?xml version="1.0"?>
<doc>
  <assembly>
    <name>nquotes</name>
  </assembly>
  <members>
    <member name="T:NQuotes.IMqlApi">
      <summary>
            MQL API.
            Declares MQL functions and global predefined variables.
            </summary>
    </member>
    <member name="M:NQuotes.IMqlApi.AccountBalance">
      <summary>
            Returns balance value of the current account (the amount of money on the account).
            </summary>
      <returns>Returns balance value of the current account (the amount of money on the account).</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.AccountCredit">
      <summary>
            Returns credit value of the current account.
            </summary>
      <returns> Returns credit value of the current account.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.AccountCompany">
      <summary>
            Returns the brokerage company name where the current account was registered.
            </summary>
      <returns>Returns the brokerage company name where the current account was registered.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.AccountCurrency">
      <summary>
            Returns currency name of the current account.
            </summary>
      <returns>Returns currency name of the current account.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.AccountEquity">
      <summary>
            Returns equity value of the current account. Equity calculation depends on trading server settings.
            </summary>
      <returns>Returns equity value of the current account. Equity calculation depends on trading server settings.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.AccountFreeMargin">
      <summary>
            Returns free margin value of the current account.
            </summary>
      <returns>Returns free margin value of the current account.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.AccountFreeMarginCheck(System.String,System.Int32,System.Double)">
      <summary>
            Returns free margin that remains after the specified position has been opened at the current price on the current account. If the free margin is insufficient, an error 134 (ERR_NOT_ENOUGH_MONEY) will be generated.
            </summary>
      <param name="symbol">Symbol for trading operation.</param>
      <param name="cmd">Operation type. It can be either OP_BUY or OP_SELL.</param>
      <param name="volume">Number of lots.</param>
      <returns>free margin that remains after the specified position has been opened</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.AccountFreeMarginMode">
      <summary>
            Calculation mode of free margin allowed to open positions on the current account. The calculation mode can take the following values:
            0 - floating profit/loss is not used for calculation;
            1 - both floating profit and loss on open positions on the current account are used for free margin calculation;
            2 - only profit value is used for calculation, the current loss on open positions is not considered;
            3 - only loss value is used for calculation, the current loss on open positions is not considered.
            </summary>
      <returns>Calculation mode of free margin</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.AccountLeverage">
      <summary>
            Returns leverage of the current account.
            </summary>
      <returns>Returns leverage of the current account.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.AccountMargin">
      <summary>
            Returns margin value of the current account.
            </summary>
      <returns>Returns margin value of the current account.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.AccountName">
      <summary>
            Returns the current account name.
            </summary>
      <returns>Returns the current account name.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.AccountNumber">
      <summary>
            Returns the number of the current account.
            </summary>
      <returns>Returns the number of the current account.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.AccountProfit">
      <summary>
            Returns profit value of the current account.
            </summary>
      <returns>Returns profit value of the current account.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.AccountServer">
      <summary>
            Returns the connected server name.
            </summary>
      <returns>Returns the connected server name.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.AccountStopoutLevel">
      <summary>
            Returns the value of the Stop Out level.
            </summary>
      <returns>Returns the value of the Stop Out level.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.AccountStopoutMode">
      <summary>
            Returns the calculation mode for the Stop Out level. Calculation mode can take the following values:
            0 - calculation of percentage ratio between margin and equity;
            1 - comparison of the free margin level to the absolute value.
            </summary>
      <returns>Returns the calculation mode for the Stop Out level</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.AccountInfoDouble(System.Int32)">
      <summary>
            Returns the value of the corresponding account property.
            </summary>
      <param name="property_id">Identifier of the property. The value can be one of the values of ENUM_ACCOUNT_INFO_DOUBLE.</param>
      <returns>Property value.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.AccountInfoInteger(System.Int32)">
      <summary>
            Returns the value of the corresponding account property.
            </summary>
      <param name="property_id">Identifier of the property. The value can be one of the values of ENUM_ACCOUNT_INFO_INTEGER.</param>
      <returns>Property value.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.AccountInfoString(System.Int32)">
      <summary>
            Returns the value of the corresponding account property.
            </summary>
      <param name="property_id">Identifier of the property. The value can be one of the values of ENUM_ACCOUNT_INFO_STRING.</param>
      <returns>Property value.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ArrayBsearch(System.Double[],System.Double,System.Int32,System.Int32,System.Int32)">
      <summary>
            If the element with the specified value doesn't exist in the array, the function returns the index of the nearest smallest value of the elements between which the searched value is located.
            The function cannot be used with string arrays and series arrays (with the exception of the series array of the bar open time).
            Note: Binary search processes only sorted arrays. To sort numeric arrays use the ArraySort() function.
            </summary>
      <param name="array">The numeric array to search for.</param>
      <param name="value">The value to search for.</param>
      <param name="count">Count of elements to search for. By default, it searches in the whole array.</param>
      <param name="start">Starting index to search for. By default, the search starts at the first element.</param>
      <param name="direction">Search direction. It can be any of the following values:
            MODE_ASCEND searching in forward direction,
            MODE_DESCEND searching in backward direction.
            </param>
      <returns>
            Index of the found element,
            or index of the nearest smallest value of the elements between which the searched value is located.
            </returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ArrayCopy(System.Array,System.Array,System.Int32,System.Int32,System.Int32)">
      <summary>
            Copies an array to another one. Arrays must be of the same type, but arrays with type double[], int[], datetime[], color[], and bool[] can be copied as arrays of the same type.
            </summary>
      <param name="dest">Destination array.</param>
      <param name="source">Source array.</param>
      <param name="start_dest">Starting index for the destination array. By default, start index is 0.</param>
      <param name="start_source">Starting index for the source array. By default, start index is 0.</param>
      <param name="count">The count of elements that should be copied. By default, it is WHOLE_ARRAY constant.</param>
      <returns>Returns the amount of copied elements.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ArrayCopy``1(System.Array,NQuotes.IMqlArray{``0},System.Int32,System.Int32,System.Int32)">
      <summary>
            Copies an array to another one. Arrays must be of the same type, but arrays with type double[], int[], datetime[], color[], and bool[] can be copied as arrays of the same type.
            </summary>
      <param name="dest">Destination array.</param>
      <param name="source">Source array.</param>
      <param name="start_dest">Starting index for the destination array. By default, start index is 0.</param>
      <param name="start_source">Starting index for the source array. By default, start index is 0.</param>
      <param name="count">The count of elements that should be copied. By default, it is WHOLE_ARRAY constant.</param>
      <returns>Returns the amount of copied elements.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ArrayCopy``1(NQuotes.IMqlArray{``0},NQuotes.IMqlArray{``0},System.Int32,System.Int32,System.Int32)">
      <summary>
            Copies an array to another one. Arrays must be of the same type, but arrays with type double[], int[], datetime[], color[], and bool[] can be copied as arrays of the same type.
            </summary>
      <param name="dest">Destination array.</param>
      <param name="source">Source array.</param>
      <param name="start_dest">Starting index for the destination array. By default, start index is 0.</param>
      <param name="start_source">Starting index for the source array. By default, start index is 0.</param>
      <param name="count">The count of elements that should be copied. By default, it is WHOLE_ARRAY constant.</param>
      <returns>Returns the amount of copied elements.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ArrayCopySeries(System.Double[]@,System.Int32,System.String,System.Int32)">
      <summary>
            Copies a series array to another one and returns the count of the copied elements.
            There is no real memory allocation for data array and nothing is copied. When such an array is accessed, the access is redirected. Excluded are arrays that are assigned as indexed ones in custom indicators. In this case, data are really copied.
            If data are copied from another chart with different symbol and/or timeframe, it is possible that the necessary data will lack. In this case, error ERR_HISTORY_WILL_UPDATED (4066 - requested history data under updating) will be placed into the last_error variable, and there will be necessary to retry copying after a certain period of time.
            Note: If series_index is MODE_TIME, the array to be passed to the function must be of the datetime type.
            </summary>
      <param name="array">Reference to the destination one-dimensional numeric array.</param>
      <param name="series_index">Series array identifier. It must be one of series array listed identifiers values.</param>
      <param name="symbol">Symbol name (the name of the currency pair)</param>
      <param name="timeframe">Timeframe of the chart. It can be any of Timeframe list values.</param>
      <returns>Returns the count of the copied elements.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ArrayCopySeries(System.DateTime[]@,System.Int32,System.String,System.Int32)">
      <summary>
            Copies a series array to another one and returns the count of the copied elements.
            There is no real memory allocation for data array and nothing is copied. When such an array is accessed, the access is redirected. Excluded are arrays that are assigned as indexed ones in custom indicators. In this case, data are really copied.
            If data are copied from another chart with different symbol and/or timeframe, it is possible that the necessary data will lack. In this case, error ERR_HISTORY_WILL_UPDATED (4066 - requested history data under updating) will be placed into the last_error variable, and there will be necessary to retry copying after a certain period of time.
            Note: If series_index is MODE_TIME, the array to be passed to the function must be of the datetime type.
            </summary>
      <param name="array">Reference to the destination one-dimensional numeric array.</param>
      <param name="series_index">Series array identifier. It must be one of series array listed identifiers values.</param>
      <param name="symbol">Symbol name (the name of the currency pair)</param>
      <param name="timeframe">Timeframe of the chart. It can be any of Timeframe list values.</param>
      <returns>Returns the count of the copied elements.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ArrayDimension(System.Array)">
      <summary>
            Returns the multidimensional array rank.
            </summary>
      <param name="array">Array for which the rank will be returned.</param>
      <returns>Returns the multidimensional array rank.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ArrayDimension``1(NQuotes.IMqlArray{``0})">
      <summary>
            Returns the multidimensional array rank.
            </summary>
      <param name="array">Array for which the rank will be returned.</param>
      <returns>Returns the multidimensional array rank.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ArrayGetAsSeries``1(NQuotes.IMqlArray{``0})">
      <summary>
            Returns TRUE if array is organized as a series array (array elements are indexed from the last to the first one), otherwise returns FALSE. 
            </summary>
      <param name="array">Array to be checked.</param>
      <returns>Returns TRUE if array is organized as a series array</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ArrayInitialize(System.Array,System.Double)">
      <summary>
            Sets all elements of a numeric array to the same value. Returns the count of initialized elements.
            Note: It is not recommended to initialize index buffers in the custom indicator init() function as such functions are initialized automatically with an "empty value" at allocation and re-allocation of buffers.
            </summary>
      <param name="array">Numeric array to be initialized.</param>
      <param name="value">New value to be set.</param>
      <returns>Returns the count of initialized elements.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ArrayIsSeries(System.Array)">
      <summary>
            Returns TRUE if the array under check is a series array (Time[],Open[],Close[],High[],Low[], or Volume[]), otherwise returns FALSE.
            </summary>
      <param name="array">Array under check.</param>
      <returns>Returns TRUE if the array under check is a series array</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ArrayIsSeries``1(NQuotes.IMqlArray{``0})">
      <summary>
            Returns TRUE if the array under check is a series array (Time[],Open[],Close[],High[],Low[], or Volume[]), otherwise returns FALSE.
            </summary>
      <param name="array">Array under check.</param>
      <returns>Returns TRUE if the array under check is a series array</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ArrayMaximum(System.Double[],System.Int32,System.Int32)">
      <summary>
            Searches for the element with maximum value. The function returns position of this maximum element in the array.
            </summary>
      <param name="array">The numeric array to search in.</param>
      <param name="count">The amount of elements to search in.</param>
      <param name="start">Initial search index.</param>
      <returns>Returns position of this maximum element in the array.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ArrayMaximum(NQuotes.IMqlArray{System.Double},System.Int32,System.Int32)">
      <summary>
            Searches for the element with maximum value. The function returns position of this maximum element in the array.
            </summary>
      <param name="array">The numeric array to search in.</param>
      <param name="count">The amount of elements to search in.</param>
      <param name="start">Initial search index.</param>
      <returns>Returns position of this maximum element in the array.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ArrayMinimum(System.Double[],System.Int32,System.Int32)">
      <summary>
            Searches for the element with minimum value. The function Searches for the element with minimum value. The function returns position of this minimum element in the array..
            </summary>
      <param name="array">The numeric array to search in.</param>
      <param name="count">The amount of elements to search in.</param>
      <param name="start">Initial search index.</param>
      <returns>returns position of this minimum element in the array</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ArrayMinimum(NQuotes.IMqlArray{System.Double},System.Int32,System.Int32)">
      <summary>
            Searches for the element with minimum value. The function Searches for the element with minimum value. The function returns position of this minimum element in the array..
            </summary>
      <param name="array">The numeric array to search in.</param>
      <param name="count">The amount of elements to search in.</param>
      <param name="start">Initial search index.</param>
      <returns>returns position of this minimum element in the array</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ArrayRange(System.Array,System.Int32)">
      <summary>
            Returns the count of elements in the given dimension of the array. Since indexes are zero-based, the size of dimension is 1 greater than the largest index.
            </summary>
      <param name="array">Array to check</param>
      <param name="range_index">Dimension index.</param>
      <returns>Returns the count of elements in the given dimension of the array.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ArrayRange``1(NQuotes.IMqlArray{``0},System.Int32)">
      <summary>
            Returns the count of elements in the given dimension of the array. Since indexes are zero-based, the size of dimension is 1 greater than the largest index.
            </summary>
      <param name="array">Array to check</param>
      <param name="range_index">Dimension index.</param>
      <returns>Returns the count of elements in the given dimension of the array.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ArrayResize``1(NQuotes.IMqlArray{``0},System.Int32)">
      <summary>
            Sets a new size for the first dimension. If executed successfully, it returns count of all elements contained in the array after resizing, otherwise, returns -1, and array is not resized.
            Note: Array declared at a local level in a function and resized will remain unchanged after the function has completed its operation. After the function has been recalled, such array will have a size differing from the declared one.
            </summary>
      <param name="array">Array to resize.</param>
      <param name="new_size">New size for the first dimension.</param>
      <returns>Returns count of all elements contained in the array after resizing.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ArraySetAsSeries``1(NQuotes.IMqlArray{``0},System.Boolean)">
      <summary>
            Sets indexing direction of the array. If the set parameter has the TRUE value, the array will be indexed in a reversed order, i.e., the last element has a zero index. The FALSE value sets a standard indexing order. The function returns the previous status.
            </summary>
      <param name="array">The numeric array to set.</param>
      <param name="set">Array indexing order</param>
      <returns>returns the previous status.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ArraySize(System.Array)">
      <summary>
            Returns the count of elements contained in the array. For a one-dimensional array, the value to be returned by the ArraySize function is equal to that of ArrayRange(array,0).
            </summary>
      <param name="array">Array of any type.</param>
      <returns>Returns the count of elements contained in the array.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ArraySize``1(NQuotes.IMqlArray{``0})">
      <summary>
            Returns the count of elements contained in the array. For a one-dimensional array, the value to be returned by the ArraySize function is equal to that of ArrayRange(array,0).
            </summary>
      <param name="array">Array of any type.</param>
      <returns>Returns the count of elements contained in the array.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ArraySort(System.Array,System.Int32,System.Int32,System.Int32)">
      <summary>
            Sorts numeric arrays by first dimension. Series arrays cannot be sorted by ArraySort().
            </summary>
      <param name="array">The numeric array to be sorted.</param>
      <param name="count">Count of elements to be sorted.</param>
      <param name="start">Starting index.</param>
      <param name="sort_dir">
            Array sorting direction. It can be any of the following values:
            MODE_ASCEND - sort ascending,
            MODE_DESCEND - sort descending.
            </param>
      <returns>the number of sorted elements</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.GetLastError">
      <summary>
            The function returns the last occurred error, then the value of special last_error variable where the last error code is stored will be zeroized. So, the next call for GetLastError() will return 0.
            </summary>
      <returns>The function returns the last occurred error</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.IsConnected">
      <summary>
            The function returns the status of the main connection between client terminal and server that performs data pumping. It returns TRUE if connection to the server was successfully established, otherwise, it returns FALSE.
            </summary>
      <returns>The function returns the status of the main connection between client terminal and server</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.IsDemo">
      <summary>
            Returns TRUE if the expert runs on a demo account, otherwise returns FALSE.
            </summary>
      <returns>Returns TRUE if the expert runs on a demo account, otherwise returns FALSE.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.IsDllsAllowed">
      <summary>
            Returns TRUE if the function DLL call is allowed for the expert, otherwise returns FALSE.
            </summary>
      <seealso cref="M:NQuotes.IMqlApi.IsLibrariesAllowed" />
      <seealso cref="M:NQuotes.IMqlApi.IsTradeAllowed" />
      <returns>Returns TRUE if the function DLL call is allowed for the expert, otherwise returns FALSE.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.IsExpertEnabled">
      <summary>
            Returns TRUE if expert advisors are enabled for running, otherwise returns FALSE.
            </summary>
      <returns>Returns TRUE if expert advisors are enabled for running, otherwise returns FALSE.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.IsLibrariesAllowed">
      <summary>
            Returns TRUE if the expert can call library function, otherwise returns FALSE. See also IsDllsAllowed(), IsTradeAllowed().
            </summary>
      <returns>Returns TRUE if the expert can call library function, otherwise returns FALSE.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.IsOptimization">
      <summary>
            Returns TRUE if expert runs in the strategy tester optimization mode, otherwise returns FALSE.
            </summary>
      <returns>Returns TRUE if expert runs in the strategy tester optimization mode, otherwise returns FALSE.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.IsStopped">
      <summary>
            Returns TRUE if the program (an expert or a script) has been commanded to stop its operation, otherwise returns FALSE. The program can continue operation for 2.5 seconds more before the client terminal stops its performing forcedly.
            </summary>
      <returns>Returns TRUE if the program has been commanded to stop its operation</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.IsTesting">
      <summary>
            Returns TRUE if expert runs in the testing mode, otherwise returns FALSE.
            </summary>
      <returns>Returns TRUE if expert runs in the testing mode, otherwise returns FALSE.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.IsTradeAllowed">
      <summary>
            Returns TRUE if the expert is allowed to trade and a thread for trading is not occupied, otherwise returns FALSE.
            </summary>
      <seealso cref="M:NQuotes.IMqlApi.IsDllsAllowed" />
      <seealso cref="M:NQuotes.IMqlApi.IsLibrariesAllowed" />
      <seealso cref="M:NQuotes.IMqlApi.IsTradeContextBusy" />
      <returns>Returns TRUE if the expert is allowed to trade and a thread for trading is not occupied, otherwise returns FALSE.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.IsTradeContextBusy">
      <summary>
            Returns TRUE if a thread for trading is occupied by another expert advisor, otherwise returns FALSE.
            </summary>
      <seealso cref="M:NQuotes.IMqlApi.IsTradeAllowed" />
      <returns>Returns TRUE if a thread for trading is occupied by another expert advisor, otherwise returns FALSE.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.IsVisualMode">
      <summary>
            Returns TRUE if the expert is tested with checked "Visual Mode" button, otherwise returns FALSE.
            </summary>
      <returns>Returns TRUE if the expert is tested with checked "Visual Mode" button, otherwise returns FALSE.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.UninitializeReason">
      <summary>
            Returns the code of the uninitialization reason for the experts, custom indicators, and scripts. The returned values can be ones of Uninitialize reason codes. This function can also be called in function init() to analyze the reasons for deinitialization of the previour launch.
            </summary>
      <returns>Returns the code of the uninitialization reason</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.MQLInfoInteger(System.Int32)">
      <summary>
            Returns the value of a corresponding property of a running mql4 program.
            </summary>
      <param name="property_id">Identifier of a property. Can be one of values of the ENUM_MQL_INFO_INTEGER enumeration.</param>
      <returns>Value of int type.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.MQLInfoString(System.Int32)">
      <summary>
            Returns the value of a corresponding property of a running MQL4 program.
            </summary>
      <param name="property_id">Identifier of a property. Can be one of the ENUM_MQL_INFO_STRING enumeration.</param>
      <returns>Value of string type.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.TerminalInfoInteger(System.Int32)">
      <summary>
            Returns the value of a corresponding property of the mql4 program environment.
            </summary>
      <param name="property_id">Identifier of a property. Can be one of the values of the enumeration ENUM_TERMINAL_INFO_INTEGER.</param>
      <returns>Value of int type.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.TerminalInfoDouble(System.Int32)">
      <summary>
            Returns the value of a corresponding property of the mql4 program environment.
            </summary>
      <param name="property_id">Identifier of a property. Can be one of the values of the enumeration ENUM_TERMINAL_INFO_DOUBLE.</param>
      <returns>Value of double type.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.TerminalInfoString(System.Int32)">
      <summary>
            The function returns the value of a corresponding property of the mql4 program environment. The property must be of string type.
            </summary>
      <param name="property_id">Identifier of a property. Perhaps one of the values of the enumeration ENUM_TERMINAL_INFO_STRING.</param>
      <returns>Value of string type.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.TerminalCompany">
      <summary>
            Returns the name of company owning the client terminal.
            </summary>
      <returns>Returns the name of company owning the client terminal.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.TerminalName">
      <summary>
            Returns client terminal name.
            </summary>
      <returns>Returns client terminal name.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.TerminalPath">
      <summary>
            Returns the directory, from which the client terminal was launched.
            </summary>
      <returns>Returns the directory, from which the client terminal was launched.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.Alert(System.Object[])">
      <summary>
            Displays a dialog box containing the user-defined data. Parameters can be of any type. Amount of passed parameters cannot exceed 64.
            Arrays cannot be passed to the Alert function. Arrays should be output elementwise.
            Data of double type output with 4 decimal digits after point. To output with more precision use DoubleToStr() function.
            Data of bool, datetime and color types will be output as its numeric presentation.
            To output values of datetime type as string convert it by TimeToStr() function.
            </summary>
      <param name="args">Any values, separated by commas. It can be up to 64 parameters.</param>
      <seealso cref="M:NQuotes.IMqlApi.Comment(System.Object[])" />
      <seealso cref="M:NQuotes.IMqlApi.Print(System.Object[])" />
    </member>
    <member name="M:NQuotes.IMqlApi.Alert(System.String)">
      <summary>
            Displays a dialog box containing the user-defined message.
            </summary>
      <param name="message">message to show</param>
    </member>
    <member name="M:NQuotes.IMqlApi.Comment(System.Object[])">
      <summary>
            The function outputs the comment defined by the user in the left top corner of the chart. Parameters can be of any type. Amount of passed parameters cannot exceed 64.
            Arrays cannot be passed to the Comment() function. Arrays should be output elementwise.
            Data of double type output with 4 digits after the decimal point. To output with more precision, use the DoubleToStr() function.
            Data of bool, datetime and color types will be output as their numeric presentation.
            To output values of datetime type as strings, convert them with the TimeToStr() function.
            </summary>
      <param name="args">Any values, separated by commas. It can be up to 64 parameters.</param>
      <seealso cref="M:NQuotes.IMqlApi.Alert(System.Object[])" />
      <seealso cref="M:NQuotes.IMqlApi.Print(System.Object[])" />
    </member>
    <member name="M:NQuotes.IMqlApi.Comment(System.String)">
      <summary>
            The function outputs the comment defined by the user in the left top corner of the chart.
            </summary>
      <param name="message">message to show</param>
    </member>
    <member name="M:NQuotes.IMqlApi.GetTickCount">
      <summary>
            The GetTickCount() function retrieves the number of milliseconds that have elapsed since the system was started. It is limited to the resolution of the system timer.
            </summary>
      <returns>number of milliseconds that have elapsed since the system was started</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.MessageBox(System.String,System.String,System.Int32)">
      <summary>
            The MessageBox function creates, displays, and operates message box. The message box contains an application-defined message and header, as well as a random combination of predefined icons and push buttons. If the function succeeds, the returned value is one of the MessageBox return code values.
            The function cannot be called from custom indicators since they are executed within interface thread and may not decelerate it.
            </summary>
      <param name="text">Optional text that contains the message to be displayed.</param>
      <param name="caption">Optional text to be displayed in the header of the dialog box. If this parameter is NULL, the expert name will be displayed in the header.</param>
      <param name="flags">	Optional flags that determine the type and behavior of the dialog box. They can represent a conbination of  flags from the following groups.</param>
      <returns>one of the MessageBox return code values</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.MessageBox(System.String,System.String)">
      <summary>
            The MessageBox function creates, displays, and operates message box. The message box contains an application-defined message and header, as well as a random combination of predefined icons and push buttons. If the function succeeds, the returned value is one of the MessageBox return code values.
            The function cannot be called from custom indicators since they are executed within interface thread and may not decelerate it.
            </summary>
      <param name="text">Optional text that contains the message to be displayed.</param>
      <param name="caption">Optional text to be displayed in the header of the dialog box. If this parameter is NULL, the expert name will be displayed in the header.</param>
      <returns>one of the MessageBox return code values</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.MessageBox(System.String)">
      <summary>
            The MessageBox function creates, displays, and operates message box. The message box contains an application-defined message and header, as well as a random combination of predefined icons and push buttons. If the function succeeds, the returned value is one of the MessageBox return code values.
            The function cannot be called from custom indicators since they are executed within interface thread and may not decelerate it.
            </summary>
      <param name="text">Optional text that contains the message to be displayed.</param>
      <returns>one of the MessageBox return code values</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.PlaySound(System.String)">
      <summary>
            Function plays a sound file. The file must be located in the terminal_dir\sounds directory or in its subdirectory.
            </summary>
      <param name="filename">Path to the sound file.</param>
    </member>
    <member name="M:NQuotes.IMqlApi.Print(System.Object[])">
      <summary>
            Prints a message to the experts log. Parameters can be of any type. Amount of passed parameters cannot exceed 64.
            Arrays cannot be passed to the Print() function. Arrays should be printed elementwise.
            Data of double type are printed with 4 decimal digits after point. To output more precisely, use the DoubleToStr() function.
            Data of bool, datetime and color types will be printed as their numeric presentation.
            To print values of datetime type as string, convert them with the TimeToStr() function.        /// </summary>
      <param name="args">Any values separated by commas. It can be up to 64 parameters.</param>
      <seealso cref="M:NQuotes.IMqlApi.Alert(System.Object[])" />
      <seealso cref="M:NQuotes.IMqlApi.Comment(System.Object[])" />
    </member>
    <member name="M:NQuotes.IMqlApi.Print(System.String)">
      <summary>
            Prints a message to the experts log.
            </summary>
      <param name="message">message to show</param>
    </member>
    <member name="M:NQuotes.IMqlApi.SendFTP(System.String,System.String)">
      <summary>
            Sends the file to the FTP server set in the Tools-&gt;Options-&gt;Publisher tab. If the attempt fails, it retuns FALSE.
            The function does not operate in the testing mode. This function cannot be called from custom indicators, either.
            The file to be sent must be stored in the terminal_directory\experts\files folder or in its sub-folders.
            It will not be sent if there is no FTP address and/or access password specified in settings.        
            </summary>
      <param name="filename">File to be sent.</param>
      <param name="ftp_path">FTP path. If the path has not been specified, the path described in settings will be used.</param>
      <returns>If the attempt fails, it retuns FALSE.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.SendFTP(System.String)">
      <summary>
            Sends the file to the FTP server set in the Tools-&gt;Options-&gt;Publisher tab. If the attempt fails, it retuns FALSE.
            The function does not operate in the testing mode. This function cannot be called from custom indicators, either.
            The file to be sent must be stored in the terminal_directory\experts\files folder or in its sub-folders.
            It will not be sent if there is no FTP address and/or access password specified in settings.        
            </summary>
      <param name="filename">File to be sent.</param>
      <returns>If the attempt fails, it retuns FALSE.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.SendMail(System.String,System.String)">
      <summary>
            Sends a message to the e-mail set in the Tools-&gt;Options-&gt;EMail tab.
            The sending can be disabled in settings, or it can be omitted to specify the e-mail address. To get the detailed error information, one has to call the GetLastError() function.
            </summary>
      <param name="subject">Subject text.</param>
      <param name="some_text">Mail body.</param>
    </member>
    <member name="M:NQuotes.IMqlApi.SendNotification(System.String)">
      <summary>
            Sends Push notification to mobile terminals whose MetaQuotes IDs are specified on the "Notifications" tab in options window. Sending notifications can be disabled in the settings. The ID can also be omitted. In case of error, the function returns false. To get information about the error, call the GetLastError() function. Note: The SendNotification() function has strict limitations on its usage: no more than 2 calls per second and no more than 10 calls per minute. Frequency of calls is controlled dynamically, and the function can be blocked in case of violation.
            </summary>
      <param name="message">Message text up to 255 symbols.</param>
      <returns>In case of error, the function returns false.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.Sleep(System.Int32)">
      <summary>
            The Sleep() function suspends execution of the current expert within the specified interval.
            The Sleep() function cannot be called from custom indicators since they calculate in the interface thread and may not decelerate it.
            The checking of the expert stop flag status every 0.1 second has been built into the function.        /// </summary>
      <param name="milliseconds">Sleeping interval in milliseconds.</param>
    </member>
    <member name="M:NQuotes.IMqlApi.DebugBreak">
      <summary>
            It is a program breakpoint in debugging.
            </summary>
    </member>
    <member name="M:NQuotes.IMqlApi.ExpertRemove">
      <summary>
            The function stops an Expert Advisor and unloads it from a chart.
            </summary>
    </member>
    <member name="M:NQuotes.IMqlApi.PeriodSeconds(System.Int32)">
      <summary>
            This function returns number of seconds in a period.
            </summary>
      <param name="period">Value of a chart period from the enumeration ENUM_TIMEFRAMES. If the parameter isn't specified, it returns the number of seconds of the current chart period, at which the program runs.</param>
      <returns>Number of seconds in a selected period.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ResetLastError">
      <summary>
            Sets the value of the predefined variable _LastError into zero.
            </summary>
    </member>
    <member name="M:NQuotes.IMqlApi.SetUserError(System.Int32)">
      <summary>
            Sets the predefined variable _LastError into the value equal to ERR_USER_ERROR_FIRST + user_error.
            </summary>
      <param name="user_error">Error number set by a user.</param>
    </member>
    <member name="M:NQuotes.IMqlApi.TerminalClose(System.Int32)">
      <summary>
            The function commands the terminal to complete operation.
            </summary>
      <param name="ret_code">Return code, returned by the process of the client terminal at the operation completion.</param>
      <returns>The function returns true on success, otherwise  - false.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.TesterStatistics(System.Int32)">
      <summary>
            The function returns the value of the specified statistical parameter calculated based on testing results.
            </summary>
      <param name="statistic_id">The ID of the statistical parameter from the ENUM_STATISTICS enumeration.</param>
      <returns>The value of the statistical parameter from testing results.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.CharToStr(System.Int32)">
      <summary>
            Conversion of the symbol code into a one-character string.
            </summary>
      <param name="char_code">ASCII char code.</param>
      <returns>one-character string</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.CharToString(System.Int32)">
      <summary>
            Conversion of the symbol code into a one-character string.
            </summary>
      <param name="char_code">ASCII char code.</param>
      <returns>one-character string</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.DoubleToStr(System.Double,System.Int32)">
      <summary>
            Returns text string with the specified numerical value converted into a specified precision format. 
            </summary>
      <param name="value">Floating point value.</param>
      <param name="digits">Precision format, number of digits after decimal point (0-8).</param>
      <returns>Returns text string with the specified numerical value converted into a specified precision format. </returns>
    </member>
    <member name="M:NQuotes.IMqlApi.DoubleToString(System.Double,System.Int32)">
      <summary>
            Returns text string with the specified numerical value converted into a specified precision format. 
            </summary>
      <param name="value">Floating point value.</param>
      <param name="digits">Precision format, number of digits after decimal point (0-8).</param>
      <returns>Returns text string with the specified numerical value converted into a specified precision format. </returns>
    </member>
    <member name="M:NQuotes.IMqlApi.NormalizeDouble(System.Double,System.Int32)">
      <summary>
            Rounds the floating point value to the given precision. Returns normalized value of the double type.
            The calculated StopLoss and TakeProfit values, as well as open price of pending orders must be normalized with a precision the value of which is stored in the pre-defined variable of Digits. 
            </summary>
      <param name="value">Floating point value.</param>
      <param name="digits">Precision format, number of digits after decimal point (0-8).</param>
      <returns>Returns normalized value of the double type.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.StrToDouble(System.String)">
      <summary>
            Converts string representation of number to double type (double-precision format with floating point).
            </summary>
      <param name="value">String containing the number character representation format.</param>
      <returns>the double number</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.StringToDouble(System.String)">
      <summary>
            Converts string representation of number to double type (double-precision format with floating point).
            </summary>
      <param name="value">String containing the number character representation format.</param>
      <returns>the double number</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.StrToInteger(System.String)">
      <summary>
            Converts string containing the value character representation into a value of the int (integer) type. 
            </summary>
      <param name="value">String containing the integer character representation format.</param>
      <returns>the integer number</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.StringToInteger(System.String)">
      <summary>
            Converts string containing the value character representation into a value of the int (integer) type. 
            </summary>
      <param name="value">String containing the integer character representation format.</param>
      <returns>the integer number</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.StrToTime(System.String)">
      <summary>
            Converts string in the format "yyyy.mm.dd hh:mi" to datetime type (the amount of seconds that have passed since 1 Jan., 1970).
            </summary>
      <param name="value">String value of date/time format as "yyyy.mm.dd hh:mi".</param>
      <returns>the datetime</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.StringToTime(System.String)">
      <summary>
            Converts string in the format "yyyy.mm.dd hh:mi" to datetime type (the amount of seconds that have passed since 1 Jan., 1970).
            </summary>
      <param name="value">String value of date/time format as "yyyy.mm.dd hh:mi".</param>
      <returns>the datetime</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.TimeToStr(System.DateTime,System.Int32)">
      <summary>
            Converts value containing time in seconds that has passed since January 1, 1970, into a string of "yyyy.mm.dd hh:mi" format. 
            </summary>
      <param name="value">Positive amount of seconds that have passed since 00:00, January 1, 1970.</param>
      <param name="mode">
            Optional data output mode can be one or combination of:
            TIME_DATE gets result as "yyyy.mm.dd",
            TIME_MINUTES gets result as "hh:mi",
            TIME_SECONDS gets result as "hh:mi:ss".
            </param>
      <returns>formatted string</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.TimeToString(System.DateTime,System.Int32)">
      <summary>
            Converts value containing time in seconds that has passed since January 1, 1970, into a string of "yyyy.mm.dd hh:mi" format. 
            </summary>
      <param name="value">Positive amount of seconds that have passed since 00:00, January 1, 1970.</param>
      <param name="mode">
            Optional data output mode can be one or combination of:
            TIME_DATE gets result as "yyyy.mm.dd",
            TIME_MINUTES gets result as "hh:mi",
            TIME_SECONDS gets result as "hh:mi:ss".
            </param>
      <returns>formatted string</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.EnumToString(System.Enum)">
      <summary>
            Converting an enumeration value of any type to a text form.
            </summary>
      <param name="value">Any type enumeration value.</param>
      <returns>A string with a text representation of the enumeration. To get the error message call the GetLastError() function.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.IntegerToString(System.Int64,System.Int32,System.Char)">
      <summary>
            This function converting value of integer type into a string of a specified length and returns the obtained string.
            </summary>
      <param name="number">Number for conversion.</param>
      <param name="str_len">String length. If the resulting string length is larger than the specified one, the string is not cut off. If it is smaller, filler symbols will be added to the left.</param>
      <param name="fill_symbol">Filler symbol. By default it is a space.</param>
      <returns>String representation of the number.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ShortToString(System.Char)">
      <summary>
            It converts the symbol code (unicode) into one-symbol string and returns resulting string.
            </summary>
      <param name="symbol_code">Symbol code.</param>
      <returns>String.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ShortArrayToString(System.Char[],System.Int32,System.Int32)">
      <summary>
            It copies part of array into a returned string.
            </summary>
      <param name="array">Array of ushort type (analog of wchar_t type).</param>
      <param name="start">Position, from which copying starts.</param>
      <param name="count">Number of array elements to copy. Defines the length of a resulting string. Default value is -1, which means copying up to the array end.</param>
      <returns>String.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.StringToShortArray(System.String,System.Char[]@,System.Int32,System.Int32)">
      <summary>
            The function symbol-wise copies a string into a specified place of an array of ushort type. It returns the number of copied elements.
            </summary>
      <param name="text_string">String to copy</param>
      <param name="array">Array of ushort type (analog of wchar_t type).</param>
      <param name="start">Position, from which copying starts.</param>
      <param name="count">Number of array elements to copy. Defines length of a resulting string. Default value is -1, which means copying up to the array end. Terminal 0 will also be copied to the recipient array, in this case the size of a dynamic array can be increased if necessary to the size of the string. If the size of the dynamic array exceeds the length of the string, the size of the array will not be reduced.</param>
      <returns>Number of copied elements.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.CharArrayToString(System.Byte[],System.Int32,System.Int32,System.UInt32)">
      <summary>
            It copies and converts part of array of bytes into a returned string.
            </summary>
      <param name="array">Array of bytes.</param>
      <param name="start">Position from which copying starts.</param>
      <param name="count">Number of array elements for copying. Defines the length of a resulting string. Default value is -1, which means copying up to the array end.</param>
      <param name="codepage">The value of the code page. For the most-used code pages provide appropriate constants.</param>
      <returns>String.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.StringToCharArray(System.String,System.Byte[]@,System.Int32,System.Int32,System.UInt32)">
      <summary>
            Symbol-wise copies a string converted from Unicode to ANSI, to a selected place of array of bytes. It returns the number of copied elements.
            </summary>
      <param name="text_string">String to copy.</param>
      <param name="array">Array of bytes.</param>
      <param name="start">Position from which copying starts.</param>
      <param name="count">Number of array elements to copy. Defines length of a resulting string. Default value is -1, which means copying up to the array end. Terminal 0 will also be copied to the recipient array, in this case the size of a dynamic array can be increased if necessary to the size of the string. If the size of the dynamic array exceeds the length of the string, the size of the array will not be reduced.</param>
      <param name="codepage">The value of the code page. For the most-used code pages provide appropriate constants.</param>
      <returns>Number of copied elements.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ColorToARGB(System.Drawing.Color,System.Byte)">
      <summary>
            The function converts color type into uint type to get ARGB representation of the color. ARGB color format is used to generate a graphical resource, text display, as well as for CCanvas standard library class.
            </summary>
      <param name="clr">Color value in color type variable.</param>
      <param name="alpha">The value of the alpha channel used to receive the color in ARGB format. The value may be set from 0 (a color of a foreground pixel does not change the display of an underlying one) up to 255 (a color of an underlying pixel is completely replaced by the foreground pixel's one). Color transparency in percentage terms is calculated as (1-alpha/255)*100%. In other words, the lesser value of the alpha channel leads to more transparent color.</param>
      <returns>Presenting the color in ARGB format where Alfa, Red, Green, Blue (alpha channel, red, green, blue) values are set in series in four uint type bytes.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ColorToString(System.Drawing.Color,System.Boolean)">
      <summary>
            It converts color value into string of "R,G,B" form.
            </summary>
      <param name="color_value">Color value in color type variable.</param>
      <param name="color_name">Sign of the necessity to return color name, if color name is identical to one of predefined color constants.</param>
      <returns>String presentation of color as "R,G,B", where R, G and B are decimal constants from 0 to 255 converted into a string. If the color_name=true parameter is set and color_value.IsNamedColor=true, it will try to convert color value into color name. See Color.IsNamedColor for details.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.StringToColor(System.String)">
      <summary>
            Converting "R,G,B" string or string with color name into color type value.
            </summary>
      <param name="color_string"> String representation of a color of "R,G,B" type or name of one of predefined Web-colors.</param>
      <returns>Color value.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.IndicatorBuffers(System.Int32)">
      <summary>
            Allocates memory for buffers used for custom indicator calculations.
            The amount of buffers cannot exceed 8 or be less than the value given in the indicator_buffers property.
            If custom indicator requires additional buffers for counting, this function must be used for specifying of the total amount of buffers.
            </summary>
      <param name="count">Amount of buffers to be allocated. Should be within the range between indicator_buffers and 8 buffers.</param>
    </member>
    <member name="M:NQuotes.IMqlApi.IndicatorCounted">
      <summary>
            The function returns the amount of bars not changed after the indicator had been launched last. The most calculated bars do not need any recalculation.
            In most cases, same count of index values do not need for recalculation. The function is used to optimize calculating.
            Note: The latest bar is not considered to be calculated and, in the most cases, it is necessary to recalculate only this bar. However, there occur
            some boundary cases where custom indicator is called from the expert at the first tick of the new bar. It is possible that the last tick of the previous bar
            had not been processed (because the last-but-one tick was being processed when this last tick came), the custom
            indicator was not called and it was not calculated because of this. To avoid indicator calculation errors in such situations, the IndicatorCounted()
            function returns the count of bars minus one.
            </summary>
      <returns>returns the amount of bars not changed</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.IndicatorDigits(System.Int32)">
      <summary>
            Sets precision format (the count of digits after decimal point) to visualize indicator values.
            The symbol price preicision is used by default, the indicator being attached to this symbol chart.
            </summary>
      <param name="digits">Precision format, the count of digits after decimal point.</param>
    </member>
    <member name="M:NQuotes.IMqlApi.IndicatorShortName(System.String)">
      <summary>
            Sets the "short" name of a custom indicator to be shown in the DataWindow and in the chart subwindow.
            </summary>
      <param name="name">New short name.</param>
    </member>
    <member name="M:NQuotes.IMqlApi.SetIndexArrow(System.Int32,System.Int32)">
      <summary>
            Sets an arrow symbol for indicators line of the DRAW_ARROW type.
            Arrow codes out of range 33 to 255 cannot be used.
            </summary>
      <param name="index">Line index. Must lie between 0 and 7.</param>
      <param name="code">Symbol code from Wingdings font or Array constants.</param>
    </member>
    <member name="M:NQuotes.IMqlApi.SetIndexDrawBegin(System.Int32,System.Int32)">
      <summary>
            Sets the bar number (from the data beginning) from which the drawing of the given indicator line must start.
            The indicators are drawn from left to right. The indicator array values that are to the left of the given bar will not be shown in the chart
            or in the DataWindow. 0 will be set as default, and all data will be drawn.
            </summary>
      <param name="index">Line index. Must lie between 0 and 7.</param>
      <param name="begin">First drawing bar position number.</param>
    </member>
    <member name="M:NQuotes.IMqlApi.SetIndexEmptyValue(System.Int32,System.Double)">
      <summary>
            Sets drawing line empty value.
            Empty values are not drawn or shown in the DataWindow.
            By default, empty value is EMPTY_VALUE.
            </summary>
      <param name="index">Line index. Must lie between 0 and 7.</param>
      <param name="value">New "empty" value.</param>
    </member>
    <member name="M:NQuotes.IMqlApi.SetIndexLabel(System.Int32,System.String)">
      <summary>
            Sets drawing line description for showing in the DataWindow and in the tooltip.
            </summary>
      <param name="index">Line index. Must lie between 0 and 7.</param>
      <param name="text">Label text. NULL means that index value is not shown in the DataWindow.</param>
    </member>
    <member name="M:NQuotes.IMqlApi.SetIndexShift(System.Int32,System.Int32)">
      <summary>
            Sets offset for the drawing line. For positive values, the line drawing will be shifted to the right, otherwise it will be shifted to the left.
            I.e., the value calculated on the current bar will be drawn shifted relatively to the current bar.
            </summary>
      <param name="index">Line index. Must lie between 0 and 7.</param>
      <param name="shift">Shitf value in bars.</param>
    </member>
    <member name="M:NQuotes.IMqlApi.SetIndexStyle(System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Color)">
      <summary>
            Sets the new type, style, width and color for a given indicator line.
            </summary>
      <param name="index">Line index. Must lie between 0 and 7.</param>
      <param name="type">Shape style. Can be one of Drawing shape styles listed.</param>
      <param name="style">Drawing style. It is used for one-pixel thick lines.        It can be one of the Drawing shape styles listed.        EMPTY value means that the style will not be changed.</param>
      <param name="width">Line width. Valid values are: 1,2,3,4,5. EMPTY value means that width will not be changed.</param>
      <param name="clr">Line color. Absence of this parameter means that the color will not be changed.</param>
    </member>
    <member name="M:NQuotes.IMqlApi.SetIndexStyle(System.Int32,System.Int32)">
      <summary>
            Sets the new type, style, width and color for a given indicator line.
            </summary>
      <param name="index">Line index. Must lie between 0 and 7.</param>
      <param name="type">Shape style. Can be one of Drawing shape styles listed.</param>
    </member>
    <member name="M:NQuotes.IMqlApi.SetIndexStyle(System.Int32,System.Int32,System.Int32)">
      <summary>
            Sets the new type, style, width and color for a given indicator line.
            </summary>
      <param name="index">Line index. Must lie between 0 and 7.</param>
      <param name="type">Shape style. Can be one of Drawing shape styles listed.</param>
      <param name="style">Drawing style. It is used for one-pixel thick lines.        It can be one of the Drawing shape styles listed.        EMPTY value means that the style will not be changed.</param>
    </member>
    <member name="M:NQuotes.IMqlApi.SetIndexStyle(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Sets the new type, style, width and color for a given indicator line.
            </summary>
      <param name="index">Line index. Must lie between 0 and 7.</param>
      <param name="type">Shape style. Can be one of Drawing shape styles listed.</param>
      <param name="style">Drawing style. It is used for one-pixel thick lines.        It can be one of the Drawing shape styles listed.        EMPTY value means that the style will not be changed.</param>
      <param name="width">Line width. Valid values are: 1,2,3,4,5. EMPTY value means that width will not be changed.</param>
    </member>
    <member name="M:NQuotes.IMqlApi.SetLevelStyle(System.Int32,System.Int32,System.Drawing.Color)">
      <summary>
            The function sets a new style, width and color of horizontal levels of indicator to be output in a separate window.
            </summary>
      <param name="draw_style">Drawing style. Can be one of the Drawing shape styles listed. EMPTY value means that the style will not be changed.</param>
      <param name="line_width">Line width. Valid values are 1,2,3,4,5. EMPTY value indicates that the width will not be changed.</param>
      <param name="clr">Line color. Empty value CLR_NONE means that the color will not be changed.</param>
    </member>
    <member name="M:NQuotes.IMqlApi.SetLevelStyle(System.Int32,System.Int32)">
      <summary>
            The function sets a new style, width and color of horizontal levels of indicator to be output in a separate window.
            </summary>
      <param name="draw_style">Drawing style. Can be one of the Drawing shape styles listed. EMPTY value means that the style will not be changed.</param>
      <param name="line_width">Line width. Valid values are 1,2,3,4,5. EMPTY value indicates that the width will not be changed.</param>
    </member>
    <member name="M:NQuotes.IMqlApi.SetLevelValue(System.Int32,System.Double)">
      <summary>
            The function sets a value for a given horizontal level of the indicator to be output in a separate window.
            </summary>
      <param name="level">Level index (0-31).</param>
      <param name="value">Value for the given indicator level.</param>
    </member>
    <member name="M:NQuotes.IMqlApi.IndicatorSetDouble(System.Int32,System.Int32,System.Double)">
      <summary>
            The function sets the value of the corresponding indicator property. Indicator property must be of the double type.
            </summary>
      <param name="prop_id">Identifier of the indicator property. The value can be one of the values of the ENUM_CUSTOMIND_PROPERTY_DOUBLE enumeration.</param>
      <param name="prop_modifier">Modifier of the specified property. Only level properties require a modifier. Numbering of levels starts from 0. It means that in order to set property for the second level you need to specify 1 (1 less than when using compiler directive).</param>
      <param name="prop_value">Value of property.</param>
      <returns>In case of successful execution, returns true, otherwise - false.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.IndicatorSetInteger(System.Int32,System.Int32,System.Int32)">
      <summary>
            The function sets the value of the corresponding indicator property. Indicator property must be of the int or color type.
            </summary>
      <param name="prop_id">Identifier of the indicator property. The value can be one of the values of the ENUM_CUSTOMIND_PROPERTY_INTEGER enumeration.</param>
      <param name="prop_modifier">Modifier of the specified property. Only level properties require a modifier.</param>
      <param name="prop_value">Value of property.</param>
      <returns>In case of successful execution, returns true, otherwise - false.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.IndicatorSetString(System.Int32,System.Int32,System.String)">
      <summary>
            The function sets the value of the corresponding indicator property. Indicator property must be of the string type.
            </summary>
      <param name="prop_id">Identifier of the indicator property. The value can be one of the values of the ENUM_CUSTOMIND_PROPERTY_STRING enumeration.</param>
      <param name="prop_modifier">Modifier of the specified property. Only level properties require a modifier.</param>
      <param name="prop_value">Value of property.</param>
      <returns>In case of successful execution, returns true, otherwise - false.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.Day">
      <summary>
            Returns the current day of the month, i.e., the day of month of the last known server time.
            Note: At the testing, the last known server time is modelled.
            </summary>
      <returns>Returns the current day of the month</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.DayOfWeek">
      <summary>
            Returns the current zero-based day of the week (0-Sunday,1,2,3,4,5,6) of the last known server time.
            Note: At the testing, the last known server time is modelled.
            </summary>
      <returns>Returns the current zero-based day of the week</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.DayOfYear">
      <summary>
            Returns the current day of the year (1 means 1 January,..,365(6) does 31 December), i.e., the day of year of the last known server time.
            Note: At the testing, the last known server time is modelled.
            </summary>
      <returns>Returns the current day of the year</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.Hour">
      <summary>
            Returns the hour (0,1,2,..23) of the last known server time by the moment of the program start (this value will not change within the time of the program execution).
            Note: At the testing, the last known server time is modelled.
            </summary>
      <returns>Returns the hour</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.Minute">
      <summary>
            Returns the current minute (0,1,2,..59) of the last known server time by the moment of the program start (this value will not change within the time of the program execution).
            </summary>
      <returns>Returns the current minute</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.Month">
      <summary>
            Returns the current month as number (1-January,2,3,4,5,6,7,8,9,10,11,12), i.e., the number of month of the last known server time.
            Note: At the testing, the last known server time is modelled.
            </summary>
      <returns>Returns the current month as number</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.Seconds">
      <summary>
            Returns the amount of seconds elapsed from the beginning of the current minute of the last known server time by the moment of the program start (this value will not change within the time of the program execution).
            </summary>
      <returns>Returns the amount of seconds elapsed from the beginning of the current minute</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.TimeCurrent">
      <summary>
            Returns the last known server time (time of incoming of the latest quote) as number of seconds elapsed from 00:00 January 1, 1970.
            Note: At the testing, the last known server time is modelled.
            </summary>
      <returns>Returns the last known server time.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.TimeDay(System.DateTime)">
      <summary>
            Returns day of month (1 - 31) for the specified date.
            </summary>
      <param name="date">Datetime as number of seconds elapsed since midnight (00:00:00), January 1, 1970.</param>
      <returns>Returns day of month</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.TimeDayOfWeek(System.DateTime)">
      <summary>
            Returns the zero-based day of week (0 means Sunday,1,2,3,4,5,6) for the specified date.
            </summary>
      <param name="date">Datetime as number of seconds elapsed since midnight (00:00:00), January 1, 1970.</param>
      <returns>Returns the zero-based day of week</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.TimeDayOfYear(System.DateTime)">
      <summary>
            Returns day (1 means 1 January,..,365(6) does 31 December) of year for the specified date.
            </summary>
      <param name="date">Datetime as number of seconds elapsed since midnight (00:00:00), January 1, 1970.</param>
      <returns>Returns day</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.TimeHour(System.DateTime)">
      <summary>
            Returns the hour for the specified time.
            </summary>
      <param name="time">Datetime is the number of seconds elapsed since midnight (00:00:00), January 1, 1970.</param>
      <returns>Returns the hour for the specified time.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.TimeLocal">
      <summary>
            Returns local computer time as number of seconds elapsed from 00:00 January 1, 1970.
            Note: At the testing, local time is modelled and is the same as the modelled last known server time.
            </summary>
      <returns>Returns local computer time</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.TimeMinute(System.DateTime)">
      <summary>
            Returns the minute for the specified time. 
            </summary>
      <param name="time">Datetime as number of seconds elapsed since midnight (00:00:00), January 1, 1970.</param>
      <returns>Returns the minute for the specified time.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.TimeMonth(System.DateTime)">
      <summary>
            Returns the month number for the specified time. 
            </summary>
      <param name="time">Datetime as number of seconds elapsed since midnight (00:00:00), January 1, 1970.</param>
      <returns>Returns the month number for the specified time.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.TimeSeconds(System.DateTime)">
      <summary>
            Returns the amount of seconds elapsed from the beginning of the minute for the specified time. 
            </summary>
      <param name="time">Datetime as number of seconds elapsed since midnight (00:00:00), January 1, 1970.</param>
      <returns>Returns the amount of seconds elapsed from the beginning of the minute for the specified time.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.TimeYear(System.DateTime)">
      <summary>
            Returns year for the specified date. The returned value can be within the range of 1970 to 2037. 
            </summary>
      <param name="time">Datetime as number of seconds elapsed since midnight (00:00:00), January 1, 1970.</param>
      <returns>Returns year for the specified date.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.Year">
      <summary>
            Returns the current year, i.e., the year of the last known server time.
            Note: At the testing, the last known server time is modelled.
            </summary>
      <returns>Returns the current year</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.TimeGMT">
      <summary>
            Returns the GMT, which is calculated taking into account the DST switch by the local time on the computer where the client terminal is running.
            </summary>
      <returns>Value of DateTime type.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.TimeDaylightSavings">
      <summary>
            Returns correction for daylight saving time in seconds, switch to summer time has been made. It depends on the time settings of your computer.
            </summary>
      <returns>If switch to winter (standard) time has been made, it returns 0.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.TimeGMTOffset">
      <summary>
            Returns the current difference between GMT time and the local computer time in seconds, taking into account switch to winter or summer time. Depends on the time settings of your computer.
            </summary>
      <returns>The value of int type, representing the current difference between the local time of the computer and GMT time in seconds.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.FileClose(System.Int32)">
      <summary>
            Closes file previously opened by the FileOpen() function. 
            </summary>
      <param name="handle">File handle returned by the FileOpen() function</param>
    </member>
    <member name="M:NQuotes.IMqlApi.FileDelete(System.String)">
      <summary>
            Removes specified file name. To get the detailed error information, call GetLastError().
            Files can only be deleted if they are in the terminal_dir\experts\files directory (terminal_directory\tester\files, in case of testing) or its subdirectories. 
            </summary>
      <param name="filename">Path to the file.</param>
    </member>
    <member name="M:NQuotes.IMqlApi.FileFlush(System.Int32)">
      <summary>
            Flushes all data stored in the file buffer to the disk.
            Notes: The FileFlush() function must be called between operations of file reading and writing in the file.
            At file closing, the data are flushed to the disk automatically, so there is no need to call the FileFlush() function before calling of the FileClose() function. 
            </summary>
      <param name="handle">File handle, returned by FileOpen() functions.</param>
    </member>
    <member name="M:NQuotes.IMqlApi.FileIsEnding(System.Int32)">
      <summary>
            Returns logical true if file pointer is at the end of the file, otherwise returns false. To get the detailed error information, call GetLastError() function. If the file end is reached during reading, the GetLastError() function will return error ERR_END_OF_FILE (4099). 
            </summary>
      <param name="handle">File handle, returned by FileOpen() functions.</param>
      <returns>Returns logical true if file pointer is at the end of the file, otherwise returns false.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.FileIsLineEnding(System.Int32)">
      <summary>
            For CSV file returns logical true if file pointer is at the end of the line, otherwise returns false. To get the detailed error information, call GetLastError() function. 
            </summary>
      <param name="handle">File handle, returned by FileOpen() function.</param>
      <returns>For CSV file returns logical true if file pointer is at the end of the line, otherwise returns false.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.FileOpen(System.String,System.Int32,System.Int32)">
      <summary>
            Opens file for input and/or output. Returns a file handle for the opened file or -1 (if the function fails). To get the detailed error information, call GetLastError() function.
            Notes: Files can only be opened in the terminal_directory\experts\files folder (terminal_directory\tester\files if for expert testing) or in its subfolders.
            FILE_BIN and FILE_CSV modes cannot be used simultaneously.
            If FILE_WRITE does not combine with FILE_READ, a zero-length file will be opened. If even the file containd some data, they will be deleted. If there is a need to add data to an existing file, it must be opened using combination of FILE_READ | FILE_WRITE.
            If FILE_READ does not combine with FILE_WRITE, the file will be opened only if it already exists. If the file does not exist, it can be created using the FILE_WRITE mode.
            No more than 32 files can be opened within an executable module simultaneously. Handles of files opened in the same module cannot be passed to other modules (libraries). 
            </summary>
      <param name="filename">Filename.</param>
      <param name="mode">Opening mode. It can be one or combination of values: FILE_BIN, FILE_CSV, FILE_READ, FILE_WRITE.</param>
      <param name="delimiter">Delimiter character for csv files. By default, the ';' symbol applies.</param>
      <returns>Returns a file handle for the opened file or -1 (if the function fails).</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.FileOpen(System.String,System.Int32)">
      <summary>
            Opens file for input and/or output. Returns a file handle for the opened file or -1 (if the function fails). To get the detailed error information, call GetLastError() function.
            Notes: Files can only be opened in the terminal_directory\experts\files folder (terminal_directory\tester\files if for expert testing) or in its subfolders.
            FILE_BIN and FILE_CSV modes cannot be used simultaneously.
            If FILE_WRITE does not combine with FILE_READ, a zero-length file will be opened. If even the file containd some data, they will be deleted. If there is a need to add data to an existing file, it must be opened using combination of FILE_READ | FILE_WRITE.
            If FILE_READ does not combine with FILE_WRITE, the file will be opened only if it already exists. If the file does not exist, it can be created using the FILE_WRITE mode.
            No more than 32 files can be opened within an executable module simultaneously. Handles of files opened in the same module cannot be passed to other modules (libraries). 
            </summary>
      <param name="filename">Filename.</param>
      <param name="mode">Opening mode. It can be one or combination of values: FILE_BIN, FILE_CSV, FILE_READ, FILE_WRITE.</param>
      <returns>Returns a file handle for the opened file or -1 (if the function fails).</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.FileOpenHistory(System.String,System.Int32,System.Int32)">
      <summary>
            Opens file in the current history directory (terminal_directory\history\server_name) or in its subfolders. Returns the file handle for the opened file. If the function fails, the returned value is -1. To get the detailed error information, call the GetLastError() function.
            Notes: Client terminal can connect to servers of different brokerage companies. History data (HST files) for each brokerage company are stored in the corresponding subfolder of the terminal_directory\history folder.
            The function can be useful to form own history data for a non-standard symbol and/or period. The file formed in the history folder can be opened offline, not data pumping is needed to chart it. 
            </summary>
      <param name="filename">Filename.</param>
      <param name="mode">Opening mode. Can be one or combination of values: FILE_BIN, FILE_CSV, FILE_READ, FILE_WRITE.</param>
      <param name="delimiter">Delimiter for csv files. By default, the ';' symbol will be passed.</param>
      <returns>Returns the file handle for the opened file. If the function fails, the returned value is -1.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.FileOpenHistory(System.String,System.Int32)">
      <summary>
            Opens file in the current history directory (terminal_directory\history\server_name) or in its subfolders. Returns the file handle for the opened file. If the function fails, the returned value is -1. To get the detailed error information, call the GetLastError() function.
            Notes: Client terminal can connect to servers of different brokerage companies. History data (HST files) for each brokerage company are stored in the corresponding subfolder of the terminal_directory\history folder.
            The function can be useful to form own history data for a non-standard symbol and/or period. The file formed in the history folder can be opened offline, not data pumping is needed to chart it. 
            </summary>
      <param name="filename">Filename.</param>
      <param name="mode">Opening mode. Can be one or combination of values: FILE_BIN, FILE_CSV, FILE_READ, FILE_WRITE.</param>
      <returns>Returns the file handle for the opened file. If the function fails, the returned value is -1.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.FileReadDouble(System.Int32,System.Int32)">
      <summary>
            Reads the double-precision number with floating point from the current binary file position. The number format size can be 8 bytes (double) or 4 bytes (float).
            To get the error information, one has to call the GetLastError() function. 
            </summary>
      <param name="handle">File handle returned by the FileOpen() function.</param>
      <param name="size">Number format size. Can be DOUBLE_VALUE(8 bytes) or FLOAT_VALUE(4 bytes).</param>
      <returns>Reads the double-precision number with floating point.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.FileReadDouble(System.Int32)">
      <summary>
            Reads the double-precision number with floating point from the current binary file position. The number format size can be 8 bytes (double) or 4 bytes (float).
            To get the error information, one has to call the GetLastError() function. 
            </summary>
      <param name="handle">File handle returned by the FileOpen() function.</param>
      <returns>Reads the double-precision number with floating point.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.FileReadInteger(System.Int32,System.Int32)">
      <summary>
            The function reads the integer from the current binary file position. The integer format size can be 1, 2 or 4 bytes. If the format size is not specified, the system tries to read the 4-bytes value. To get the detailed error information, one has to call the GetLastError() function. 
            </summary>
      <param name="handle">File handle returned by the FileOpen() function.</param>
      <param name="size">Format size. Can be CHAR_VALUE(1 byte), SHORT_VALUE(2 bytes) or LONG_VALUE(4 bytes).</param>
      <returns>Reads the integer.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.FileReadInteger(System.Int32)">
      <summary>
            The function reads the integer from the current binary file position. The integer format size can be 1, 2 or 4 bytes. If the format size is not specified, the system tries to read the 4-bytes value. To get the detailed error information, one has to call the GetLastError() function. 
            </summary>
      <param name="handle">File handle returned by the FileOpen() function.</param>
      <returns>Reads the integer.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.FileReadNumber(System.Int32)">
      <summary>
            Read the number from the current file position before the delimiter. Only for CSV files.
            To get the detailed error information, one has to call the GetLastError() function. 
            </summary>
      <param name="handle">File handle returned by the FileOpen() function.</param>
      <returns>Read the number from the current file position before the delimiter.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.FileReadString(System.Int32,System.Int32)">
      <summary>
            The function reads the string from the current file position. Applies to both CSV and binary files. For text files, the string will be read before the delimiter. For binary file, the given count of characters will be read to the string. To get the detailed error information, one has to call the GetLastError() function. 
            </summary>
      <param name="handle">File handle returned by the FileOpen() function.</param>
      <param name="length">Amount of characters for reading.</param>
      <returns>Reads the string.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.FileReadString(System.Int32)">
      <summary>
            The function reads the string from the current file position. Applies to both CSV and binary files. For text files, the string will be read before the delimiter. For binary file, the given count of characters will be read to the string. To get the detailed error information, one has to call the GetLastError() function. 
            </summary>
      <param name="handle">File handle returned by the FileOpen() function.</param>
      <returns>Reads the string.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.FileReadBool(System.Int32)">
      <summary>
            Reads from the file of CSV type string from the current position to a delimiter (or till the end of the text line) and converts the read string to a bool type value.
            </summary>
      <param name="file_handle">File descriptor returned by FileOpen().</param>
      <returns>Line read may be set to "true", "false" or the symbolic representation of integers "0" or "1". A nonzero value is converted to a logical true. The function returns the converted value.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.FileReadDatetime(System.Int32)">
      <summary>
            Reads from the file of CSV type a string of one of the formats: "YYYY.MM.DD HH:MI:SS", "YYYY.MM.DD" or "HH:MI:SS" - and converts it into a value of datetime type.
            </summary>
      <param name="file_handle">File descriptor returned by FileOpen().</param>
      <returns>The value of datetime type.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.FileReadFloat(System.Int32)">
      <summary>
            Reads the single-precision floating point number (float) from the current position of the binary file.
            </summary>
      <param name="file_handle">File descriptor returned by FileOpen().</param>
      <returns>The value of float type.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.FileReadLong(System.Int32)">
      <summary>
            The function reads an integer of long type (8 bytes) from the current position of the binary file.
            </summary>
      <param name="file_handle">File descriptor returned by FileOpen().</param>
      <returns>The value of long type.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.FileSeek(System.Int32,System.Int32,System.Int32)">
      <summary>
            The function moves the file pointer to a new position that is an offset, in bytes, from the beginning, the end or the current file position. The next reading or writing are made at a new position.
            If file pointer has been moved successfully, the function returns TRUE, otherwise, it returns FALSE. To get the detailed error information, one has to call the GetLastError() function. 
            </summary>
      <param name="handle">File handle returned by the FileOpen() functions.</param>
      <param name="offset">Offset, in bytes, from origin.</param>
      <param name="origin">
            Initial position. Value can be one of the following constants:
            SEEK_CUR - from current position,
            SEEK_SET - from begin,
            SEEK_END - from end of file.
            </param>
      <returns>If file pointer has been moved successfully, the function returns TRUE, otherwise, it returns FALSE.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.FileSize(System.Int32)">
      <summary>
            The function returns file size in bytes. To get the detailed error information, one has to call the GetLastError() function. 
            </summary>
      <param name="handle">File handle returned by the FileOpen() function.</param>
      <returns>The function returns file size in bytes.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.FileTell(System.Int32)">
      <summary>
            Returns the current position of the file pointer. To get the detailed error information, one has to call GetLastError() function. 
            </summary>
      <param name="handle">File handle returned by the FileOpen() function.</param>
      <returns>Returns the current position of the file pointer.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.FileWriteArrayOfDouble(System.Int32,System.Double[],System.Int32,System.Int32)">
      <summary>
            The function writes the array to a binary file.
            Arrays of double type will be written elementwise, as 8-bytes floating point numbers.
            </summary>
      <param name="handle">File handle returned by the FileOpen() function.</param>
      <param name="array">Array to write.</param>
      <param name="start">Starting index in the array (the first written element number).</param>
      <param name="count">Count of elements to be written.</param>
      <returns>The number of written elements or a negative value if an error occurs. To get the detailed error information, one has to call the GetLastError() function.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.FileWriteArray(System.Int32,System.Double[],System.Int32,System.Int32)">
      <summary>
            The function writes the array to a binary file.
            Arrays of double type will be written elementwise, as 8-bytes floating point numbers.
            </summary>
      <param name="handle">File handle returned by the FileOpen() function.</param>
      <param name="array">Array to write.</param>
      <param name="start">Starting index in the array (the first written element number).</param>
      <param name="count">Count of elements to be written.</param>
      <returns>The number of written elements or a negative value if an error occurs. To get the detailed error information, one has to call the GetLastError() function.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.FileWriteArrayOfInteger(System.Int32,System.Int32[],System.Int32,System.Int32)">
      <summary>
            The function writes the array to a binary file.
            Arrays of int type will be written elementwise, as 4-bytes integers.
            </summary>
      <param name="handle">File handle returned by the FileOpen() function.</param>
      <param name="array">Array to write.</param>
      <param name="start">Starting index in the array (the first written element number).</param>
      <param name="count">Count of elements to be written.</param>
      <returns>The number of written elements or a negative value if an error occurs. To get the detailed error information, one has to call the GetLastError() function.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.FileWriteArray(System.Int32,System.Int32[],System.Int32,System.Int32)">
      <summary>
            The function writes the array to a binary file.
            Arrays of int type will be written elementwise, as 4-bytes integers.
            </summary>
      <param name="handle">File handle returned by the FileOpen() function.</param>
      <param name="array">Array to write.</param>
      <param name="start">Starting index in the array (the first written element number).</param>
      <param name="count">Count of elements to be written.</param>
      <returns>The number of written elements or a negative value if an error occurs. To get the detailed error information, one has to call the GetLastError() function.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.FileWriteArray(System.Int32,System.Boolean[],System.Int32,System.Int32)">
      <summary>
            The function writes the array to a binary file.
            Arrays of bool type will be written elementwise, as 4-bytes integers.
            </summary>
      <param name="handle">File handle returned by the FileOpen() function.</param>
      <param name="array">Array to write.</param>
      <param name="start">Starting index in the array (the first written element number).</param>
      <param name="count">Count of elements to be written.</param>
      <returns>The number of written elements or a negative value if an error occurs. To get the detailed error information, one has to call the GetLastError() function.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.FileWriteArray(System.Int32,System.Drawing.Color[],System.Int32,System.Int32)">
      <summary>
            The function writes the array to a binary file.
            Arrays of color type will be written elementwise, as 4-bytes integers.
            </summary>
      <param name="handle">File handle returned by the FileOpen() function.</param>
      <param name="array">Array to write.</param>
      <param name="start">Starting index in the array (the first written element number).</param>
      <param name="count">Count of elements to be written.</param>
      <returns>The number of written elements or a negative value if an error occurs. To get the detailed error information, one has to call the GetLastError() function.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.FileWriteDouble(System.Int32,System.Double,System.Int32)">
      <summary>
            The function writes a double value with floating point to a binary file. If the format is specified as FLOAT_VALUE, the value will be written as a 4-bytes floating point number (of the float type), otherwise, it will be written in the 8-bytes floating point format (of the double type).
            Returns the actually written bytes count or a negative value if an error occurs.
            To get the detailed error information, one has to call the GetLastError() function. 
            </summary>
      <param name="handle">File handle returned by the FileOpen() function.</param>
      <param name="value">Double precision value.</param>
      <param name="size">
            Optional format flag. It can be any of the following values:
            DOUBLE_VALUE (8 bytes, default)
            FLOAT_VALUE (4 bytes).     
            </param>
      <returns>Returns the actually written bytes count or a negative value if an error occurs.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.FileWriteDouble(System.Int32,System.Double)">
      <summary>
            The function writes a double value with floating point to a binary file. If the format is specified as FLOAT_VALUE, the value will be written as a 4-bytes floating point number (of the float type), otherwise, it will be written in the 8-bytes floating point format (of the double type).
            Returns the actually written bytes count or a negative value if an error occurs.
            To get the detailed error information, one has to call the GetLastError() function. 
            </summary>
      <param name="handle">File handle returned by the FileOpen() function.</param>
      <param name="value">Double precision value.</param>
      <returns>Returns the actually written bytes count or a negative value if an error occurs.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.FileWriteInteger(System.Int32,System.Int32,System.Int32)">
      <summary>
            The function writes the integer value to a binary file. If the size is SHORT_VALUE, the value will be written as a 2-byte integer (the short type), if the size is CHAR_VALUE, the value will be written as a 1-byte integer (the char type), and if the size is LONG_VALUE, the value will be written as a 4-byte integer (the long int type).
            Returns the actually written bytes count or a negative value if an error occurs.
            To get the detailed error information, one has to call the GetLastError() function. 
            </summary>
      <param name="handle">File handle returned by the FileOpen() function.</param>
      <param name="value">Value to be written.</param>
      <param name="size">
            Optional format flag. It can be any of the following values:
            CHAR_VALUE (1 byte),
            SHORT_VALUE (2 bytes),
            LONG_VALUE (4 bytes, default).
            </param>
      <returns>Returns the actually written bytes count or a negative value if an error occurs.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.FileWriteInteger(System.Int32,System.Int32)">
      <summary>
            The function writes the integer value to a binary file. If the size is SHORT_VALUE, the value will be written as a 2-byte integer (the short type), if the size is CHAR_VALUE, the value will be written as a 1-byte integer (the char type), and if the size is LONG_VALUE, the value will be written as a 4-byte integer (the long int type).
            Returns the actually written bytes count or a negative value if an error occurs.
            To get the detailed error information, one has to call the GetLastError() function. 
            </summary>
      <param name="handle">File handle returned by the FileOpen() function.</param>
      <param name="value">Value to be written.</param>
      <returns>Returns the actually written bytes count or a negative value if an error occurs.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.FileWriteString(System.Int32,System.String,System.Int32)">
      <summary>
            The function writes the string to a binary file from the current file position.
            Returns the actually written bytes count or a negative value if an error occurs.
            To get the detailed error information, one has to call the GetLastError() function. 
            </summary>
      <param name="handle">File handle returned by the FileOpen() function.</param>
      <param name="value">String to be written.</param>
      <param name="length">The length of the string to be written. If the string length exceeds the given value, it will be truncated. If it is shorter, it will be extended by binary 0s up to the given length.</param>
      <returns>Returns the actually written bytes count or a negative value if an error occurs.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.FileWriteFloat(System.Int32,System.Single)">
      <summary>
            The function writes the value of the float parameter to a bin-file, starting from the current position of the file pointer.
            </summary>
      <param name="file_handle">File descriptor returned by FileOpen().</param>
      <param name="value">The value of float type.</param>
      <returns>If successful the function returns the number of bytes written or 0 in case of error. If successful, the number of bytes written corresponds to the data type size (sizeof(float)=4). To obtain information about the error call the GetLastError() function. The file pointer is shifted by the same number of bytes.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.FileWriteLong(System.Int32,System.Int64)">
      <summary>
            The function writes the value of the long-type parameter to a bin-file, starting from the current position of the file pointer.
            </summary>
      <param name="file_handle">File descriptor returned by FileOpen().</param>
      <param name="value">Value of type long.</param>
      <returns>If successful the function returns the number of bytes written or 0 in case of error. If successful, the number of bytes written corresponds to the data type size (sizeof(long)=8). To obtain information about the error call the GetLastError() function. The file pointer is shifted by the same number of bytes.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.FileGetInteger(System.String,System.Int32,System.Boolean)">
      <summary>
            Gets an integer property of a file.
            </summary>
      <param name="file_name">File name.</param>
      <param name="property_id">File property ID. The value can be one of the following values of the ENUM_FILE_PROPERTY_INTEGER enumeration: FILE_EXISTS, FILE_CREATE_DATE, FILE_MODIFY_DATE, FILE_ACCESS_DATE and FILE_SIZE.</param>
      <param name="common_folder">Points to the file location. If the parameter is false, terminal data folder is viewed. Otherwise it is assumed that the file is in the shared folder of all terminals Terminal\Common\Files (FILE_COMMON).</param>
      <returns>
            The value of the property. In case of an error, -1 is returned. To get an error code use the GetLastError() function.
            If a folder is specified when getting properties by the name, the function will have error 5018 (ERR_MQL_FILE_IS_DIRECTORY) in any case, though the return value will be correct.
            </returns>
    </member>
    <member name="M:NQuotes.IMqlApi.FileIsExist(System.String,System.Int32)">
      <summary>
            Checks the existence of a file.
            </summary>
      <param name="file_name">The name of the file being checked.</param>
      <param name="common_flag">Flag determining the location of the file. If common_flag = FILE_COMMON, then the file is located in a shared folder for all client terminals Terminal\Common\Files. Otherwise, the file is located in a local folder.</param>
      <returns>Returns true, if the specified file exists.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.FileCopy(System.String,System.Int32,System.String,System.Int32)">
      <summary>
            The function copies the original file from a local or shared folder to another file.
            </summary>
      <param name="src_file_name">File name to copy.</param>
      <param name="common_flag">Flag determining the location of the file. If common_flag = FILE_COMMON, then the file is located in a shared folder for all client terminals Terminal\Common\Files. Otherwise, the file is located in a local folder (for example, common_flag=0).</param>
      <param name="dst_file_name">Result file name.</param>
      <param name="mode_flags">Access flags. The parameter can contain only 2 flags: FILE_REWRITE and/or FILE_COMMON - other flags are ignored. If the file already exists, and the FILE_REWRITE flag hasn't been specified, then the file will not be rewritten, and the function will return false.</param>
      <returns>In case of failure the function returns false.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.FileMove(System.String,System.Int32,System.String,System.Int32)">
      <summary>
            Moves a file from a local or shared folder to another folder.
            </summary>
      <param name="src_file_name">File name to move/rename.</param>
      <param name="common_flag">Flag determining the location of the file. If common_flag = FILE_COMMON, then the file is located in a shared folder for all client terminals Terminal\Common\Files. Otherwise, the file is located in a local folder (common_flag=0).</param>
      <param name="dst_file_name">File name after operation.</param>
      <param name="mode_flags">Access flags. The parameter can contain only 2 flags: FILE_REWRITE and/or FILE_COMMON - other flags are ignored. If the file already exists and the FILE_REWRITE flag isn't specified, the file will not be rewritten, and the function will return false.</param>
      <returns>In case of failure the function returns false.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.FolderCreate(System.String,System.Int32)">
      <summary>
            The function creates a folder in the Files directory (depending on the value of common_flag).
            </summary>
      <param name="folder_name">The name of the directory you want to create. Contains the full path to the folder.</param>
      <param name="common_flag">Flag determining the location of the directory. If common_flag=FILE_COMMON, then the directory is in the shared folder for all client terminals Terminal\Common\Files. Otherwise, the directory is in a local folder (MQL4\Files or MQL4\Tester\Files in case of testing).</param>
      <returns>Returns true if successful, otherwise - false.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.FolderDelete(System.String,System.Int32)">
      <summary>
            The function removes the specified directory. If the folder is not empty, then it can't be removed.
            </summary>
      <param name="folder_name">The name of the directory you want to delete. Contains the full path to the folder.</param>
      <param name="common_flag">Flag determining the location of the directory. If common_flag=FILE_COMMON, then the directory is in the shared folder for all client terminals Terminal\Common\Files. Otherwise, the directory is in a local folder (MQL4\Files or MQL4\Tester\Files in the case of testing).</param>
      <returns>Returns true if successful, otherwise false.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.FolderClean(System.String,System.Int32)">
      <summary>
            The function deletes all files in a specified folder.
            </summary>
      <param name="folder_name">The name of the directory where you want to delete all files. Contains the full path to the folder.</param>
      <param name="common_flag">Flag determining the location of the directory. If common_flag = FILE_COMMON, then the directory is in the shared folder for all client terminals Terminal\Common\Files. Otherwise, the directory is in a local folder(MQL4\files or MQL4\tester\files in case of testing).</param>
      <returns>Returns true if successful, otherwise false.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.GlobalVariableCheck(System.String)">
      <summary>
            Returns TRUE if the global variable exists, otherwise, returns FALSE. To get the detailed error information, one has to call the GetLastError() function. 
            </summary>
      <param name="name">Global variable name.</param>
      <returns>Returns TRUE if the global variable exists</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.GlobalVariableDel(System.String)">
      <summary>
            Deletes the global variable. If the function succeeds, the returned value will be TRUE, otherwise, it will be FALSE. To get the detailed error information, one has to call the GetLastError() function. 
            </summary>
      <param name="name">Global variable name.</param>
      <returns>If the function succeeds, the returned value will be TRUE</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.GlobalVariableGet(System.String)">
      <summary>
            Returns the value of an existing global variable or 0 if an error occurs. To get the detailed error information, one has to call the GetLastError() function. 
            </summary>
      <param name="name">Global variable name.</param>
      <returns>Returns the value of an existing global variable or 0 if an error occurs.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.GlobalVariableName(System.Int32)">
      <summary>
            The function returns the name of a global variable by its index in the list of global variables. To get the detailed error information, one has to call the GetLastError(). 
            </summary>
      <param name="index">Index in the list of global variables. It must exceed or be equal to 0 and be less than GlobalVariablesTotal().</param>
      <returns>returns the name of a global variable</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.GlobalVariableSet(System.String,System.Double)">
      <summary>
            Sets a new value of the global variable. If it does not exist, the system creates a new gloabl variable. If the function succeeds, the returned value will be the last access time. Otherwise, the returned value will be 0. To get the detailed error information, one has to call the GetLastError() function. 
            </summary>
      <param name="name">Global variable name.</param>
      <param name="value">The new numeric value.</param>
      <returns>If the function succeeds, the returned value will be the last access time.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.GlobalVariableSetOnCondition(System.String,System.Double,System.Double)">
      <summary>
            Sets the new value of the existing global variable if the current value equals to the third parameter check_value. If there is no global variable, the function will generate error ERR_GLOBAL_VARIABLE_NOT_FOUND (4058) and return FALSE. When successfully executed, the function returns TRUE, otherwise, it returns FALSE. To get the detailed error information, one has to call the GetLastError() function.
            If the current value of the global variable differs from the check_value, the function will return FALSE.
            The function provides atomic access to the global variable, this is why it can be used for providing of a semaphore at interaction of several experts working simultaneously within one client terminal. 
            </summary>
      <param name="name">Global variable name.</param>
      <param name="value">New value.</param>
      <param name="check_value">Value to be compared to the current global variable value.</param>
      <returns>When successfully executed, the function returns TRUE, otherwise, it returns FALSE.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.GlobalVariablesDeleteAll(System.String)">
      <summary>
            Deletes global variables. If the name prefix is not specified, all global variables will be deleted. Otherwise, only those variables will be deleted, the names of which begin with the specified prefix. The function returns the count of deleted variables. 
            </summary>
      <param name="prefix_name">Name prefix of the global variables to be deleted.</param>
      <returns>The function returns the count of deleted variables. </returns>
    </member>
    <member name="M:NQuotes.IMqlApi.GlobalVariablesDeleteAll">
      <summary>
            Deletes global variables. If the name prefix is not specified, all global variables will be deleted. Otherwise, only those variables will be deleted, the names of which begin with the specified prefix. The function returns the count of deleted variables. 
            </summary>
      <returns>The function returns the count of deleted variables. </returns>
    </member>
    <member name="M:NQuotes.IMqlApi.GlobalVariablesTotal">
      <summary>
            The function returns the total count of global variables.
            </summary>
      <returns>total count of global variables</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.GlobalVariableTime(System.String)">
      <summary>
            Returns the time when the global variable was last accessed.
            </summary>
      <param name="name">Name of the global variable.</param>
      <returns>The function returns time of last accessing the specified global variable. Calling a variable to obtain value is also considered as an access to it. In order to obtain error details, call the GetLastError() function.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.GlobalVariablesFlush">
      <summary>
            Forcibly saves contents of all global variables to a disk.
            </summary>
    </member>
    <member name="M:NQuotes.IMqlApi.GlobalVariableTemp(System.String)">
      <summary>
            The function attempts to create a temporary global variable. If the variable doesn't exist, the system creates a new temporary global variable.
            </summary>
      <param name="name">The name of a temporary global variable.</param>
      <returns>If successful, the function returns true, otherwise - false. To get details about the error, you should call the GetLastError() function.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.MathAbs(System.Double)">
      <summary>
            Returns the absolute value (modulus) of the specified numeric value.
            </summary>
      <param name="value">Numeric value.</param>
      <returns>Returns the absolute value</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.MathArccos(System.Double)">
      <summary>
            The MathArccos function returns the arccosine of x within the range 0 to π (in radians). If x is less than -1 or exceeds 1, the MathArccos returns NaN (indeterminate value).
            </summary>
      <param name="x">Value between -1 and 1 the arccosine of which to be calculated.</param>
      <returns>returns the arccosine of x</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.MathArcsin(System.Double)">
      <summary>
            The MathArcsin function returns the arcsine of x in the range -π/2 to π/2 radians. If x is less than -1 or exceeds 1, the arcsine returns NaN (indeterminate value).
            </summary>
      <param name="x">Value the arcsine of which to be calculated</param>
      <returns>returns the arcsine of x</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.MathArctan(System.Double)">
      <summary>
            The MathArctan returns the arctangent of x. If x is 0, MathArctan returns 0. MathArctan returns a value within the range of -π/2 to π/2 radians.
            </summary>
      <param name="x">A number representing a tangent.</param>
      <returns>returns the arctangent of x</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.MathCeil(System.Double)">
      <summary>
            The MathCeil function returns a numeric value representing the smallest integer that exceeds or equals to x.
            </summary>
      <param name="x">Numeric value.</param>
      <returns>returns a numeric value representing the smallest integer that exceeds or equals to x</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.MathCos(System.Double)">
      <summary>
            Returns the cosine of the specified angle.
            </summary>
      <param name="value">An angle measured in radians.</param>
      <returns>Returns the cosine of the specified angle.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.MathExp(System.Double)">
      <summary>
            Returns the value of e raised to the power of d. At overflow, the function returns INF (infinity), and it returns 0 at underflow.
            </summary>
      <param name="d">A number specifying the power.</param>
      <returns>value of e raised to the power of d</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.MathFloor(System.Double)">
      <summary>
            The MathFloor function returns a numeric value representing the largest integer that is less than or equal to x.
            </summary>
      <param name="x">Numeric value.</param>
      <returns>returns a numeric value representing the largest integer that is less than or equal to x</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.MathLog(System.Double)">
      <summary>
            The MathLog function returns the natural logarithm of x if successful. If x is negative, these functions return NaN (indeterminate value). If x is 0, they return INF (infinity).
            </summary>
      <param name="x">Value logarithm of which to be found.</param>
      <returns>returns the natural logarithm of x</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.MathMax(System.Double,System.Double)">
      <summary>
            Returns the maximum value of two numeric values.
            </summary>
      <param name="value1">The first numeric value.</param>
      <param name="value2">The second numeric value.</param>
      <returns>Returns the maximum value of two numeric values.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.MathMin(System.Double,System.Double)">
      <summary>
            Returns the minimum value of two numeric values.
            </summary>
      <param name="value1">The first numeric value.</param>
      <param name="value2">The second numeric value.</param>
      <returns>Returns the minimum value of two numeric values.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.MathMod(System.Double,System.Double)">
      <summary>
            The function returns the floating-point remainder of division of two numbers.
            The MathMod function calculates the floating-point remainder f  of x / y  such that x = i * y + f , where i  is an integer, f  has the same sign as x, and the absolute value of f  is less than the absolute value of y.
            </summary>
      <param name="value">Dividend value.</param>
      <param name="value2">Divisor value.</param>
      <returns>The function returns the floating-point remainder of division of two numbers.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.MathPow(System.Double,System.Double)">
      <summary>
            Returns the value of the base expression raised to the specified power (exponent value).
            </summary>
      <param name="baseValue">Base value.</param>
      <param name="exponent">Exponent value.</param>
      <returns>Returns the value of the base expression raised to the specified power (exponent value).</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.MathRand">
      <summary>
            The MathRand function returns a pseudorandom integer within the range of 0 to 32767. The MathSrand function must be used to seed the pseudorandom-number generator before calling MathRand.
            </summary>
      <returns>returns a pseudorandom integer</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.MathRound(System.Double)">
      <summary>
            Returns value rounded to the nearest integer of the specified numeric value.
            </summary>
      <param name="value">Numeric value to be rounded.</param>
      <returns>Returns value rounded to the nearest integer of the specified numeric value.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.MathSin(System.Double)">
      <summary>
            Returns the sine of the specified angle.
            </summary>
      <param name="value">An angle measured in radians.</param>
      <returns>Returns the sine of the specified angle.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.MathSqrt(System.Double)">
      <summary>
            The MathSqrt function returns the square root of x. If x is negative, MathSqrt returns an indefinite (same as a quiet NaN).
            </summary>
      <param name="x">Positive numeric value.</param>
      <returns>returns the square root of x</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.MathSrand(System.Int32)">
      <summary>
            The MathSrand() function sets the starting point for generating a series of pseudorandom integers. To reinitialize the generator, use 1 as the seed argument. Any other value for seed sets the generator to a random starting point. MathRand retrieves the pseudorandom numbers that are generated. Calling MathRand before any call to MathSrand generates the same sequence as calling MathSrand with seed passed as 1.
            </summary>
      <param name="seed">Seed for random-number generation.</param>
    </member>
    <member name="M:NQuotes.IMqlApi.MathTan(System.Double)">
      <summary>
            MathTan returns the tangent of x. If x is greater than or equal to 263, or less than or equal to -263, a loss of significance in the result occurs, in which case the function returns an indefinite (same as a quiet NaN).
            </summary>
      <param name="x">Angle in radians.</param>
      <returns>returns the tangent of x</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.MathIsValidNumber(System.Double)">
      <summary>
            It checks the correctness of a real number.
            </summary>
      <param name="number">Checked numeric value.</param>
      <returns>It returns true, if the checked value is an acceptable real number. If the checked value is a plus or minus infinity, or "not a number" (NaN), the function returns false.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ObjectCreate(System.String,System.Int32,System.Int32,System.DateTime,System.Double,System.DateTime,System.Double,System.DateTime,System.Double)">
      <summary>
            Creation of an object with the specified name, type and initial coordinates in the specified window.
            Count of coordinates related to the object can be from 1 to 3 depending on the object type.
            If the function succeeds, the returned value will be TRUE. Otherwise, it will be FALSE.
            To get the detailed error information, one has to call the GetLastError() function.
            Objects of the OBJ_LABEL type ignore the coordinates. Use the function of
            ObjectSet() to set up the OBJPROP_XDISTANCE and
            OBJPROP_YDISTANCE properties.
            Notes: The chart sub-windows (if there are sub-windows with indicators in the chart) are numbered starting from 1. The chart main window always exists and has the 0 index.
            Coordinates must be passed in pairs: time and price.
            For example, the OBJ_VLINE object needs only time, but price (any value) must be passed, as well.
            </summary>
      <param name="name">Object unique name.</param>
      <param name="type">Object type. It can be any of the Object type enumeration values.</param>
      <param name="window">Index of the window where the object will be added. Window index must exceed or equal to 0 and be less than WindowsTotal().</param>
      <param name="time1">Time part of the first point.</param>
      <param name="price1">Price part of the first point.</param>
      <param name="time2">Time part of the second point.</param>
      <param name="price2">Price part of the second point.</param>
      <param name="time3">Time part of the third point.</param>
      <param name="price3">Price part of the third point.</param>
      <returns>If the function succeeds, the returned value will be TRUE. Otherwise, it will be FALSE.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ObjectCreate(System.String,System.Int32,System.Int32,System.DateTime,System.Double)">
      <summary>
            Creation of an object with the specified name, type and initial coordinates in the specified window.
            Count of coordinates related to the object can be from 1 to 3 depending on the object type.
            If the function succeeds, the returned value will be TRUE. Otherwise, it will be FALSE.
            To get the detailed error information, one has to call the GetLastError() function.
            Objects of the OBJ_LABEL type ignore the coordinates. Use the function of
            ObjectSet() to set up the OBJPROP_XDISTANCE and
            OBJPROP_YDISTANCE properties.
            Notes: The chart sub-windows (if there are sub-windows with indicators in the chart) are numbered starting from 1. The chart main window always exists and has the 0 index.
            Coordinates must be passed in pairs: time and price.
            For example, the OBJ_VLINE object needs only time, but price (any value) must be passed, as well.
            </summary>
      <param name="name">Object unique name.</param>
      <param name="type">Object type. It can be any of the Object type enumeration values.</param>
      <param name="window">Index of the window where the object will be added. Window index must exceed or equal to 0 and be less than WindowsTotal().</param>
      <param name="time1">Time part of the first point.</param>
      <param name="price1">Price part of the first point.</param>
      <returns>If the function succeeds, the returned value will be TRUE. Otherwise, it will be FALSE.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ObjectCreate(System.String,System.Int32,System.Int32,System.DateTime,System.Double,System.DateTime)">
      <summary>
            Creation of an object with the specified name, type and initial coordinates in the specified window.
            Count of coordinates related to the object can be from 1 to 3 depending on the object type.
            If the function succeeds, the returned value will be TRUE. Otherwise, it will be FALSE.
            To get the detailed error information, one has to call the GetLastError() function.
            Objects of the OBJ_LABEL type ignore the coordinates. Use the function of
            ObjectSet() to set up the OBJPROP_XDISTANCE and
            OBJPROP_YDISTANCE properties.
            Notes: The chart sub-windows (if there are sub-windows with indicators in the chart) are numbered starting from 1. The chart main window always exists and has the 0 index.
            Coordinates must be passed in pairs: time and price.
            For example, the OBJ_VLINE object needs only time, but price (any value) must be passed, as well.
            </summary>
      <param name="name">Object unique name.</param>
      <param name="type">Object type. It can be any of the Object type enumeration values.</param>
      <param name="window">Index of the window where the object will be added. Window index must exceed or equal to 0 and be less than WindowsTotal().</param>
      <param name="time1">Time part of the first point.</param>
      <param name="price1">Price part of the first point.</param>
      <param name="time2">Time part of the second point.</param>
      <returns>If the function succeeds, the returned value will be TRUE. Otherwise, it will be FALSE.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ObjectCreate(System.String,System.Int32,System.Int32,System.DateTime,System.Double,System.DateTime,System.Double)">
      <summary>
            Creation of an object with the specified name, type and initial coordinates in the specified window.
            Count of coordinates related to the object can be from 1 to 3 depending on the object type.
            If the function succeeds, the returned value will be TRUE. Otherwise, it will be FALSE.
            To get the detailed error information, one has to call the GetLastError() function.
            Objects of the OBJ_LABEL type ignore the coordinates. Use the function of
            ObjectSet() to set up the OBJPROP_XDISTANCE and
            OBJPROP_YDISTANCE properties.
            Notes: The chart sub-windows (if there are sub-windows with indicators in the chart) are numbered starting from 1. The chart main window always exists and has the 0 index.
            Coordinates must be passed in pairs: time and price.
            For example, the OBJ_VLINE object needs only time, but price (any value) must be passed, as well.
            </summary>
      <param name="name">Object unique name.</param>
      <param name="type">Object type. It can be any of the Object type enumeration values.</param>
      <param name="window">Index of the window where the object will be added. Window index must exceed or equal to 0 and be less than WindowsTotal().</param>
      <param name="time1">Time part of the first point.</param>
      <param name="price1">Price part of the first point.</param>
      <param name="time2">Time part of the second point.</param>
      <param name="price2">Price part of the second point.</param>
      <returns>If the function succeeds, the returned value will be TRUE. Otherwise, it will be FALSE.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ObjectCreate(System.String,System.Int32,System.Int32,System.DateTime,System.Double,System.DateTime,System.Double,System.DateTime)">
      <summary>
            Creation of an object with the specified name, type and initial coordinates in the specified window.
            Count of coordinates related to the object can be from 1 to 3 depending on the object type.
            If the function succeeds, the returned value will be TRUE. Otherwise, it will be FALSE.
            To get the detailed error information, one has to call the GetLastError() function.
            Objects of the OBJ_LABEL type ignore the coordinates. Use the function of
            ObjectSet() to set up the OBJPROP_XDISTANCE and
            OBJPROP_YDISTANCE properties.
            Notes: The chart sub-windows (if there are sub-windows with indicators in the chart) are numbered starting from 1. The chart main window always exists and has the 0 index.
            Coordinates must be passed in pairs: time and price.
            For example, the OBJ_VLINE object needs only time, but price (any value) must be passed, as well.
            </summary>
      <param name="name">Object unique name.</param>
      <param name="type">Object type. It can be any of the Object type enumeration values.</param>
      <param name="window">Index of the window where the object will be added. Window index must exceed or equal to 0 and be less than WindowsTotal().</param>
      <param name="time1">Time part of the first point.</param>
      <param name="price1">Price part of the first point.</param>
      <param name="time2">Time part of the second point.</param>
      <param name="price2">Price part of the second point.</param>
      <param name="time3">Time part of the third point.</param>
      <returns>If the function succeeds, the returned value will be TRUE. Otherwise, it will be FALSE.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ObjectDelete(System.String)">
      <summary>
            Deletes object having the specified name.
            If the function succeeds, the returned value will be TRUE. Otherwise, it will be FALSE.
            To get the detailed error information, one has to call the GetLastError() function.
            </summary>
      <param name="name">Name of the object to be deleted.</param>
      <returns>If the function succeeds, the returned value will be TRUE. Otherwise, it will be FALSE.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ObjectDescription(System.String)">
      <summary>
            Return object description. For objects of OBJ_TEXT and OBJ_LABEL types, the text drawn by these objects will be returned.
            To get the detailed error information, one has to call the GetLastError() function.
            See also ObjectSetText() function.
            </summary>
      <param name="name">Object name.</param>
      <returns>Return object description.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ObjectFind(System.String)">
      <summary>
            Search for an object having the specified name. The function returns index of the windows that contains the object to be found. If it fails, the returned value will be -1.
            To get the detailed error information, one has to call the GetLastError() function.
            The chart sub-windows (if there are sub-windows with indicators in the chart) are numbered starting from 1. The chart main window always exists and has the 0 index.
            </summary>
      <param name="name">Object name to search for.</param>
      <returns>The function returns index of the windows that contains the object to be found.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ObjectGet(System.String,System.Int32)">
      <summary>
            The function returns the value of the specified object property.
            To check errors, one has to call the GetLastError() function.
            See also ObjectSet() function.
            </summary>
      <param name="name">Object name.</param>
      <param name="index">Object property index. It can be any of the Object properties enumeration values.</param>
      <returns>returns the value of the specified object property</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ObjectGetFiboDescription(System.String,System.Int32)">
      <summary>
            The function returns the level description of a Fibonacci object.
            The amount of Fibonacci levels depends on the object type. The maximum amount of Fibonacci levels is 32.
            To get the detailed error information, one has to call the GetLastError() function.
            See also ObjectSetFiboDescription() function.
            </summary>
      <param name="name">Fibonacci object name.</param>
      <param name="index">Index of the Fibonacci level (0-31).</param>
      <returns>The function returns the level description of a Fibonacci object.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ObjectGetShiftByValue(System.String,System.Double)">
      <summary>
            The function calculates and returns bar index (shift related to the current bar) for the given price.
            The bar index is calculated by the first and second coordinates using a linear equation. Applied to trendlines and similar objects.
            To get the detailed error information, one has to call the GetLastError() function.
            See also ObjectGetValueByShift() function.
            </summary>
      <param name="name">Object name.</param>
      <param name="value">Price value.</param>
      <returns>returns bar index for the given price</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ObjectGetValueByShift(System.String,System.Int32)">
      <summary>
            The function calculates and returns the price value for the specified bar (shift related to the current bar).
            The price value is calculated by the first and second coordinates using a linear equation.  Applied to trendlines and similar objects.
            To get the detailed error information, one has to call the GetLastError() function.
            See also ObjectGetShiftByValue() function.
            </summary>
      <param name="name">Object name</param>
      <param name="shift">Bar index.</param>
      <returns>returns the price value for the specified bar</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ObjectMove(System.String,System.Int32,System.DateTime,System.Double)">
      <summary>
            The function moves an object coordinate in the chart. Objects can have from one to three coordinates depending on their
            types.
            If the function succeeds, the returned value will be TRUE. Otherwise, it will be FALSE.
            To get the detailed error information, one has to call the GetLastError() function.
            The object coordinates are numbered starting from 0.
            </summary>
      <param name="name">Object name.</param>
      <param name="point">Coordinate index (0-2).</param>
      <param name="time1">New time value.</param>
      <param name="price1">New price value.</param>
      <returns>If the function succeeds, the returned value will be TRUE. Otherwise, it will be FALSE.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ObjectName(System.Int32)">
      <summary>
            The function returns the object name by its index in the objects list.
            To get the detailed error information, one has to call the GetLastError() function.
            </summary>
      <param name="index">Object index in the objects list. Object index must exceed or equal to 0 and be less than ObjectsTotal().</param>
      <returns>returns the object name</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ObjectSet(System.String,System.Int32,System.Double)">
      <summary>
            Changes the value of the specified object property. If the function succeeds, the returned value will be TRUE. Otherwise, it will be FALSE.
            To get the detailed error information, one has to call the GetLastError() function.
            See also ObjectGet() function.
            </summary>
      <param name="name">Object name.</param>
      <param name="index">Object value index. It can be any of Object properties enumeration values.</param>
      <param name="value">New value of the given property.</param>
      <returns>If the function succeeds, the returned value will be TRUE.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ObjectSet(System.String,System.Int32,System.DateTime)">
      <summary>
            Changes the value of the specified object property. If the function succeeds, the returned value will be TRUE. Otherwise, it will be FALSE.
            To get the detailed error information, one has to call the GetLastError() function.
            See also ObjectGet() function.
            </summary>
      <param name="name">Object name.</param>
      <param name="index">Object value index. It can be any of Object properties enumeration values.</param>
      <param name="value">New value of the given property.</param>
      <returns>If the function succeeds, the returned value will be TRUE.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ObjectSet(System.String,System.Int32,System.Drawing.Color)">
      <summary>
            Changes the value of the specified object property. If the function succeeds, the returned value will be TRUE. Otherwise, it will be FALSE.
            To get the detailed error information, one has to call the GetLastError() function.
            See also ObjectGet() function.
            </summary>
      <param name="name">Object name.</param>
      <param name="index">Object value index. It can be any of Object properties enumeration values.</param>
      <param name="value">New value of the given property.</param>
      <returns>If the function succeeds, the returned value will be TRUE.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ObjectSet(System.String,System.Int32,System.Boolean)">
      <summary>
            Changes the value of the specified object property. If the function succeeds, the returned value will be TRUE. Otherwise, it will be FALSE.
            To get the detailed error information, one has to call the GetLastError() function.
            See also ObjectGet() function.
            </summary>
      <param name="name">Object name.</param>
      <param name="index">Object value index. It can be any of Object properties enumeration values.</param>
      <param name="value">New value of the given property.</param>
      <returns>If the function succeeds, the returned value will be TRUE.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ObjectSetFiboDescription(System.String,System.Int32,System.String)">
      <summary>
            The function assigns a new description to a level of a Fibonacci object. The amount of Fibonacci levels depends on the object type.
            The maximum amount of Fibonacci levels is 32.
            To get the detailed error information, one has to call the GetLastError() function.
            </summary>
      <param name="name">Object name.</param>
      <param name="index">Index of the Fibonacci level (0-31).</param>
      <param name="text">New description of the level.</param>
      <returns>If the function succeeds, the returned value will be TRUE.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ObjectSetText(System.String,System.String,System.Int32,System.String,System.Drawing.Color)">
      <summary>
            Changes the object description. For objects of OBJ_TEXT and OBJ_LABEL, this description is shown as a text line in the chart.
            If the function succeeds, the returned value will be TRUE. Otherwise, it is FALSE.
            To get the detailed error information, one has to call the GetLastError() function.
            Parameters of font_size, font_name and text_color are used for objects of OBJ_TEXT and OBJ_LABEL only.
            For objects of other types, these parameters are ignored.
            See also ObjectDescription() function.
            </summary>
      <param name="name">Object name.</param>
      <param name="text">A text describing the object.</param>
      <param name="font_size">Font size in points.</param>
      <param name="font">Font name.</param>
      <param name="text_color">Text color.</param>
      <returns>If the function succeeds, the returned value will be TRUE. Otherwise, it is FALSE.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ObjectSetText(System.String,System.String,System.Int32)">
      <summary>
            Changes the object description. For objects of OBJ_TEXT and OBJ_LABEL, this description is shown as a text line in the chart.
            If the function succeeds, the returned value will be TRUE. Otherwise, it is FALSE.
            To get the detailed error information, one has to call the GetLastError() function.
            Parameters of font_size, font_name and text_color are used for objects of OBJ_TEXT and OBJ_LABEL only.
            For objects of other types, these parameters are ignored.
            See also ObjectDescription() function.
            </summary>
      <param name="name">Object name.</param>
      <param name="text">A text describing the object.</param>
      <param name="font_size">Font size in points.</param>
      <returns>If the function succeeds, the returned value will be TRUE. Otherwise, it is FALSE.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ObjectSetText(System.String,System.String,System.Int32,System.String)">
      <summary>
            Changes the object description. For objects of OBJ_TEXT and OBJ_LABEL, this description is shown as a text line in the chart.
            If the function succeeds, the returned value will be TRUE. Otherwise, it is FALSE.
            To get the detailed error information, one has to call the GetLastError() function.
            Parameters of font_size, font_name and text_color are used for objects of OBJ_TEXT and OBJ_LABEL only.
            For objects of other types, these parameters are ignored.
            See also ObjectDescription() function.
            </summary>
      <param name="name">Object name.</param>
      <param name="text">A text describing the object.</param>
      <param name="font_size">Font size in points.</param>
      <param name="font">Font name.</param>
      <returns>If the function succeeds, the returned value will be TRUE. Otherwise, it is FALSE.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ObjectType(System.String)">
      <summary>
            The function returns the object type value.
            To get the detailed error information, one has to call the GetLastError() function.
            </summary>
      <param name="name">Object name.</param>
      <returns>The function returns the object type value.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ObjectsDeleteAll(System.Int32,System.Int32)">
      <summary>
            Removes all objects of the specified type and in the specified sub-window of the chart. The function returns the count of removed objects.
            To get the detailed error information, one has to call the GetLastError() function.
            Notes: The chart sub-windows (if there are sub-windows with indicators in the chart) are numbered starting from 1. The chart main window always exists and has the 0 index.
            If the window index is missing or it has the value of -1, the objects will be removed from the entire chart.
            If the type value equals to -1 or this parameter is missing, all objects will be removed from the specified sub-window.
            </summary>
      <param name="window">Optional parameter. Index of the window in which the objects will be deleted. Must exceed or equal to -1 (EMPTY, the default value) and be less than WindowsTotal().</param>
      <param name="type">Optional parameter. An object type to be deleted. It can be any of the Object type enumeration values or EMPTY constant to delete all objects with any types.</param>
      <returns>The function returns the count of removed objects.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ObjectsDeleteAll">
      <summary>
            Removes all objects of the specified type and in the specified sub-window of the chart. The function returns the count of removed objects.
            To get the detailed error information, one has to call the GetLastError() function.
            Notes: The chart sub-windows (if there are sub-windows with indicators in the chart) are numbered starting from 1. The chart main window always exists and has the 0 index.
            If the window index is missing or it has the value of -1, the objects will be removed from the entire chart.
            If the type value equals to -1 or this parameter is missing, all objects will be removed from the specified sub-window.
            </summary>
      <returns>The function returns the count of removed objects.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ObjectsDeleteAll(System.Int32)">
      <summary>
            Removes all objects of the specified type and in the specified sub-window of the chart. The function returns the count of removed objects.
            To get the detailed error information, one has to call the GetLastError() function.
            Notes: The chart sub-windows (if there are sub-windows with indicators in the chart) are numbered starting from 1. The chart main window always exists and has the 0 index.
            If the window index is missing or it has the value of -1, the objects will be removed from the entire chart.
            If the type value equals to -1 or this parameter is missing, all objects will be removed from the specified sub-window.
            </summary>
      <param name="window">Optional parameter. Index of the window in which the objects will be deleted. Must exceed or equal to -1 (EMPTY, the default value) and be less than WindowsTotal().</param>
      <returns>The function returns the count of removed objects.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ObjectsTotal(System.Int32)">
      <summary>
            Returns total amount of objects of the specified type in the chart.
            </summary>
      <param name="type">Optional parameter. An object type to be counted. It can be any of the Object type enumeration values or EMPTY constant to count all objects with any types.</param>
      <returns>Returns total amount of objects of the specified type in the chart.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ObjectsTotal">
      <summary>
            Returns total amount of objects of the specified type in the chart.
            </summary>
      <returns>Returns total amount of objects of the specified type in the chart.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ObjectGetTimeByValue(System.String,System.Double,System.Int32)">
      <summary>
            The function returns the time value for the specified price value of the specified object.
            </summary>
      <param name="object_name">Name of the object.</param>
      <param name="value">Price value.</param>
      <param name="line_id">Line identifier.</param>
      <returns>The time value for the specified price value of the specified object.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ObjectGetValueByTime(System.Int64,System.String,System.DateTime,System.Int32)">
      <summary>
            The function returns the price value for the specified time value of the specified object.
            </summary>
      <param name="chart_id">Chart identifier.</param>
      <param name="object_name">Name of the object.</param>
      <param name="time">Time value.</param>
      <param name="line_id">Line identifier.</param>
      <returns>The price value for the specified time value of the specified object.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ObjectGetDouble(System.Int64,System.String,System.Int32,System.Int32)">
      <summary>
            The function returns the value of the corresponding object property. The object property must be of the double type.
            </summary>
      <param name="chart_id">Chart identifier. 0 means the current chart.</param>
      <param name="object_name">Name of the object.</param>
      <param name="prop_id">ID of the object property. The value can be one of the values of the ENUM_OBJECT_PROPERTY_DOUBLE enumeration.</param>
      <param name="prop_modifier">Modifier of the specified property. For the first variant, the default modifier value is equal to 0. Most properties do not require a modifier. It denotes the number of the level in Fibonacci tools and in the graphical object Andrew's pitchfork. The numeration of levels starts from zero.</param>
      <returns>Value of the double type.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ObjectGetInteger(System.Int64,System.String,System.Int32,System.Int32)">
      <summary>
            The function returns the value of the corresponding object property. The object property must be of the datetime, int, color, bool or char type.
            </summary>
      <param name="chart_id">Chart identifier. 0 means the current chart.</param>
      <param name="object_name">Name of the object.</param>
      <param name="prop_id">ID of the object property. The value can be one of the values of the ENUM_OBJECT_PROPERTY_INTEGER enumeration.</param>
      <param name="prop_modifier">Modifier of the specified property. For the first variant, the default modifier value is equal to 0. Most properties do not require a modifier. It denotes the number of the level in Fibonacci tools and in the graphical object Andrew's pitchfork. The numeration of levels starts from zero.</param>
      <returns>The long value.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ObjectGetString(System.Int64,System.String,System.Int32,System.Int32)">
      <summary>
            The function returns the value of the corresponding object property. The object property must be of the string type.
            </summary>
      <param name="chart_id">Chart identifier. 0 means the current chart.</param>
      <param name="object_name">Name of the object.</param>
      <param name="prop_id">ID of the object property. The value can be one of the values of the ENUM_OBJECT_PROPERTY_STRING enumeration.</param>
      <param name="prop_modifier">Modifier of the specified property. For the first variant, the default modifier value is equal to 0. Most properties do not require a modifier. It denotes the number of the level in Fibonacci tools and in the graphical object Andrew's pitchfork. The numeration of levels starts from zero.</param>
      <returns>String value.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ObjectSetDouble(System.Int64,System.String,System.Int32,System.Int32,System.Double)">
      <summary>
            The function sets the value of the corresponding object property. The object property must be of the double type.
            </summary>
      <param name="chart_id">Chart identifier. 0 means the current chart.</param>
      <param name="object_name">Name of the object.</param>
      <param name="prop_id">ID of the object property. The value can be one of the values of the ENUM_OBJECT_PROPERTY_DOUBLE enumeration.</param>
      <param name="prop_modifier">Modifier of the specified property. For the first variant, the default modifier value is equal to 0. Most properties do not require a modifier. It denotes the number of the level in Fibonacci tools and in the graphical object Andrew's pitchfork. The numeration of levels starts from zero.</param>
      <param name="prop_value">The value of the property.</param>
      <returns>The function returns true only if the command to change properties of a graphical object has been sent to a chart successfully. Otherwise it returns false. To read more about the error call GetLastError().</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ObjectSetInteger(System.Int64,System.String,System.Int32,System.Int32,System.Int64)">
      <summary>
            The function sets the value of the corresponding object property. The object property must be of the datetime, int, color, bool or char type.
            </summary>
      <param name="chart_id">Chart identifier. 0 means the current chart.</param>
      <param name="object_name">Name of the object.</param>
      <param name="prop_id">ID of the object property. The value can be one of the values of the ENUM_OBJECT_PROPERTY_INTEGER enumeration.</param>
      <param name="prop_modifier">Modifier of the specified property. For the first variant, the default modifier value is equal to 0. Most properties do not require a modifier. It denotes the number of the level in Fibonacci tools and in the graphical object Andrew's pitchfork. The numeration of levels starts from zero.</param>
      <param name="prop_value">The value of the property.</param>
      <returns>The function returns true only if the command to change properties of a graphical object has been sent to a chart successfully. Otherwise it returns false. To read more about the error call GetLastError().</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ObjectSetString(System.Int64,System.String,System.Int32,System.Int32,System.String)">
      <summary>
            The function sets the value of the corresponding object property. The object property must be of the string type.
            </summary>
      <param name="chart_id">Chart identifier. 0 means the current chart.</param>
      <param name="object_name">Name of the object.</param>
      <param name="prop_id">ID of the object property. The value can be one of the values of the ENUM_OBJECT_PROPERTY_STRING enumeration.</param>
      <param name="prop_modifier">Modifier of the specified property. For the first variant, the default modifier value is equal to 0. Most properties do not require a modifier. It denotes the number of the level in Fibonacci tools and in the graphical object Andrew's pitchfork. The numeration of levels starts from zero.</param>
      <param name="prop_value">The value of the property.</param>
      <returns>The function returns true only if the command to change properties of a graphical object has been sent to a chart successfully. Otherwise it returns false. To read more about the error call GetLastError().</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.TextSetFont(System.String,System.Int32,System.Int32,System.Int32)">
      <summary>
            The function sets the font for displaying the text using drawing methods and returns the result of that operation. Arial font with the size -120 (12 pt) is used by default.
            </summary>
      <param name="name">Font name in the system or the name of the resource containing the font or the path to font file on the disk.</param>
      <param name="size">The font size that can be set using positive and negative values. In case of positive values, the size of a displayed text does not depend on the operating system's font size settings. In case of negative values, the value is set in tenths of a point and the text size depends on the operating system settings ("standard scale" or "large scale"). See the Note below for more information about the differences between the modes.</param>
      <param name="flags">Combination of flags describing font style.</param>
      <param name="orientation">Text's horizontal inclination to X axis, the unit of measurement is 0.1 degrees. It means that orientation=450 stands for inclination equal to 45 degrees.</param>
      <returns>Returns true if the current font is successfully installed, otherwise false.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.StringConcatenate(System.Object[])">
      <summary>
            Forms a string of the data passed and returns it. Parameters can be of any type. Amount of passed parameters cannot exceed 64.
            Parameters are transformed into strings according the same rules as those used in functions of Print(), Alert() and Comment(). The returned string is obtained as a result of concatenate of strings converted from the function parameters.
            The StringConcatenate() works faster and more memory-saving than when strings are concatenated using addition operations (+). 
            </summary>
      <param name="args">Any values separated by commas. It can be up to 64 parameters.</param>
      <returns>Forms a string of the data passed and returns it.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.StringFind(System.String,System.String,System.Int32)">
      <summary>
            Search for a substring. Returns the position in the string from which the searched substring begins, or -1 if the substring has not been found.
            </summary>
      <param name="text">String to search in.</param>
      <param name="matched_text">Substring to search for.</param>
      <param name="start">Position in the string to start search from.</param>
      <returns>Returns the position in the string from which the searched substring begins, or -1 if the substring has not been found.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.StringGetChar(System.String,System.Int32)">
      <summary>
            Returns character (code) from the specified position in the string.
            </summary>
      <param name="text">String</param>
      <param name="pos">Char position in the string. Can be from 0 to StringLen(text)-1.</param>
      <returns>returns character (code)</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.StringGetCharacter(System.String,System.Int32)">
      <summary>
            Returns character (code) from the specified position in the string.
            </summary>
      <param name="text">String</param>
      <param name="pos">Char position in the string. Can be from 0 to StringLen(text)-1.</param>
      <returns>returns character (code)</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.StringLen(System.String)">
      <summary>
            Returns character count in a string.
            </summary>
      <param name="text">String where the length must be calculated.</param>
      <returns>Returns character count in a string.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.StringSetChar(System.String,System.Int32,System.Char)">
      <summary>
            Returns the string copy with changed character in the specified position.
            </summary>
      <param name="text">String where character will be changed.</param>
      <param name="pos">The character position in the string. Can be from 0 to StringLen(text).</param>
      <param name="value">New char ASCII code.</param>
      <returns>Returns the string copy with changed character in the specified position.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.StringSetCharacter(System.String@,System.Int32,System.Char)">
      <summary>
            Returns copy of a string with a changed character in a specified position.
            </summary>
      <param name="string_var">String.</param>
      <param name="pos">Position of a character in a string. Can be from 0 to StringLen(text).</param>
      <param name="character">Unicode symbol code.</param>
      <returns>In case of success returns true, otherwise - false.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.StringSubstr(System.String,System.Int32,System.Int32)">
      <summary>
            Extracts a substring from text string starting from the given position.
            The function returns a copy of the extracted substring if possible, otherwise, it returns an empty string.
            </summary>
      <param name="text">String from which the substring will be extracted.</param>
      <param name="start">Substring starting index. Can be from 0 to StringLen(text)-1.</param>
      <param name="length">Length of the substring extracted. If the parameter value exceeds or equals to 0 or the parameter is not specified, the substring will be extracted starting from the given position and up to the end of the string.</param>
      <returns>returns a copy of the extracted substring</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.StringTrimLeft(System.String)">
      <summary>
            The function cuts line feed characters, spaces and tabs in the left part of the string. The function returns a copy of the trimmed string, if possible. Otherwise, it returns an empty string.
            </summary>
      <param name="text">String to be trimmed at the left.</param>
      <returns>returns a copy of the trimmed string</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.StringTrimRight(System.String)">
      <summary>
            The function cuts line feed characters, spaces and tabs in the right part of the string. The function returns a copy of the trimmed string, if possible. Otherwise, it returns an empty string.
            </summary>
      <param name="text">returns a copy of the trimmed string</param>
      <returns>String to be trimmed at the right.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.StringAdd(System.String@,System.String)">
      <summary>
            The function adds a substring to the end of a string.
            </summary>
      <param name="string_var">String, to which another one is added.</param>
      <param name="add_substring">String that is added to the end of a  source string.</param>
      <returns>In case of success returns true, otherwise false.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.StringBufferLen(System.String)">
      <summary>
            The function returns the size of buffer allocated for the string.
            This function is implemented for compatibility with MQL.
            It always returns 0, because strings in .NET are immutable.
            </summary>
      <param name="string_var">String.</param>
      <returns>Always returns 0. The value 0 means that the string is constant and buffer size can't be changed.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.StringCompare(System.String,System.String,System.Boolean)">
      <summary>
            The function compares two strings and returns the comparison result in form of an integer.
            </summary>
      <param name="string1">The first string.</param>
      <param name="string2">The second string.</param>
      <param name="case_sensitive">Case sensitivity mode selection. If it is true, then "A"&gt;"a". If it is false, then "A"="a".</param>
      <returns>
            -1 (minus one), if string1 &lt; string2;
            0 (zero), if string1 = string2;
            1 (one), if string1 &gt; string2.
            </returns>
    </member>
    <member name="M:NQuotes.IMqlApi.StringFill(System.String@,System.Char)">
      <summary>
            It fills out a selected string by specified symbols.
            </summary>
      <param name="string_var">String, that will be filled out by the selected symbol.</param>
      <param name="character">Symbol, by which the string will be filled out.</param>
      <returns>In case of success returns true, otherwise - false.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.StringInit(System.String@,System.Int32,System.Char)">
      <summary>
            Initializes a string by specified symbols and provides the specified string size.
            </summary>
      <param name="string_var">String that should be initialized and deinitialized.</param>
      <param name="new_len">String length after initialization. If length=0, it deinitializes the string, i.e. the string buffer is cleared and the buffer address is zeroed.</param>
      <param name="character">Symbol to fill the string.</param>
      <returns>In case of success returns true, otherwise - false.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.StringReplace(System.String@,System.String,System.String)">
      <summary>
            It replaces all the found substrings of a string by a set sequence of symbols.
            </summary>
      <param name="str">The string in which you are going to replace substrings.</param>
      <param name="find">The desired substring to replace.</param>
      <param name="replacement">The string that will be inserted instead of the found one.</param>
      <returns>The function returns the number of replacements in case of success, otherwise -1.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.StringSplit(System.String,System.Char,System.String[]@)">
      <summary>
            Gets substrings by a specified separator from the specified string, returns the number of substrings obtained.
            </summary>
      <param name="string_value">The string from which you need to get substrings. The string will not change.</param>
      <param name="separator">The code of the separator character. To get the code, you can use the StringGetCharacter() function.</param>
      <param name="result">An array of strings where the obtained substrings are located.</param>
      <returns>
            The number of substrings in the result[] array. If the separator is not found in the passed string, only one source string will be placed in the array.
            If string_value is empty or NULL, the function will return zero. In case of an error the function returns -1.
            </returns>
    </member>
    <member name="M:NQuotes.IMqlApi.StringToLower(System.String@)">
      <summary>
            Transforms all symbols of a selected string into lowercase by location.
            </summary>
      <param name="string_var">String.</param>
      <returns>In case of success returns true, otherwise - false.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.StringToUpper(System.String@)">
      <summary>
            Transforms all symbols of a selected string into capitals by location.
            </summary>
      <param name="string_var">String.</param>
      <returns>In case of success returns true, otherwise - false.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.iAC(System.String,System.Int32,System.Int32)">
      <summary>
            Calculates the Bill Williams' Accelerator/Decelerator oscillator.
            </summary>
      <param name="symbol">Symbol name of the security on the data of which the indicator will be calculated. NULL means the current symbol.</param>
      <param name="timeframe">Timeframe. It can be any of Timeframe enumeration values. 0 means the current chart timeframe.</param>
      <param name="shift">Index of the value taken from the indicator buffer (shift relative to the current bar the given amount of periods ago).</param>
      <returns>indicator value</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.iAD(System.String,System.Int32,System.Int32)">
      <summary>
            Calculates the Accumulation/Distribution indicator and returns its value.
            </summary>
      <param name="symbol">Symbol the data of which should be used to calculate indicator. NULL means the current symbol.</param>
      <param name="timeframe">Timeframe. It can be any of Timeframe enumeration values. 0 means the current chart timeframe.</param>
      <param name="shift">Index of the value taken from the indicator buffer (shift relative to the current bar the given amount of periods ago).</param>
      <returns>indicator value</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.iADX(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Calculates the Movement directional index and returns its value.
            </summary>
      <param name="symbol">Symbol the data of which should be used to calculate indicator. NULL means the current symbol.</param>
      <param name="timeframe">Timeframe. It can be any of Timeframe enumeration values. 0 means the current chart timeframe.</param>
      <param name="period">Averaging period for calculation.</param>
      <param name="applied_price">Applied price. It can be any of Applied price enumeration values.</param>
      <param name="mode">Indicator line index. It can be any of the Indicators line identifiers enumeration value.</param>
      <param name="shift">Index of the value taken from the indicator buffer (shift relative to the current bar the given amount of periods ago).</param>
      <returns>indicator value</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.iAO(System.String,System.Int32,System.Int32)">
      <summary>
            Calculates the Bill Williams' Awesome oscillator and returns its value.
            </summary>
      <param name="symbol">Symbol the data of which should be used to calculate indicator. NULL means the current symbol.</param>
      <param name="timeframe">Timeframe. It can be any of Timeframe enumeration values. 0 means the current chart timeframe.</param>
      <param name="shift">Index of the value taken from the indicator buffer (shift relative to the current bar the given amount of periods ago).</param>
      <returns>indicator value</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.iATR(System.String,System.Int32,System.Int32,System.Int32)">
      <summary>
            Calculates the Indicator of the average true range and returns its value.
            </summary>
      <param name="symbol">Symbol the data of which should be used to calculate indicator. NULL means the current symbol.</param>
      <param name="timeframe">Timeframe. It can be any of Timeframe enumeration values. 0 means the current chart timeframe.</param>
      <param name="period">Averaging period for calculation.</param>
      <param name="shift">Index of the value taken from the indicator buffer (shift relative to the current bar the given amount of periods ago).</param>
      <returns>indicator value</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.iAlligator(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Calculates the Bill Williams' Alligator and returns its value.
            </summary>
      <param name="symbol">Symbol the data of which should be used to calculate indicator. NULL means the current symbol.</param>
      <param name="timeframe">Timeframe. It can be one of Timeframe enumeration values. 0 means the current chart timeframe.</param>
      <param name="jaw_period">Blue line averaging period (Alligator's Jaw).</param>
      <param name="jaw_shift">Blue line shift relative to the chart.</param>
      <param name="teeth_period">Red line averaging period (Alligator's Teeth).</param>
      <param name="teeth_shift">Red line shift relative to the chart.</param>
      <param name="lips_period">Green line averaging period (Alligator's Lips).</param>
      <param name="lips_shift">Green line shift relative to the chart.</param>
      <param name="ma_method">MA method. It can be any of Moving Average methods.</param>
      <param name="applied_price">Applied price. It can be any of Applied price enumeration values.</param>
      <param name="mode">Data source, identifier of a line of the indicator. It can be any of the following values:MODE_GATORJAW - Gator Jaw (blue) balance line,MODE_GATORTEETH - Gator Teeth (red) balance line,MODE_GATORLIPS - Gator Lips (green) balance line.</param>
      <param name="shift">Shift relative to the current bar (number of periods back) where the data should be taken from.</param>
      <returns>indicator value</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.iBWMFI(System.String,System.Int32,System.Int32)">
      <summary>
            Calculates the Bill Williams Market Facilitation index and returns its value.
            </summary>
      <param name="symbol">Symbol the data of which should be used to calculate indicator. NULL means the current symbol.</param>
      <param name="timeframe">Timeframe. It can be any of Timeframe enumeration values. 0 means the current chart timeframe.</param>
      <param name="shift">Index of the value taken from the indicator buffer (shift relative to the current bar the given amount of periods ago).</param>
      <returns>indicator value</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.iBands(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Calculates the Bollinger bands® indicator and returns its value.
            </summary>
      <param name="symbol">Symbol the data of which should be used to calculate the indicator. NULL means the current symbol.</param>
      <param name="timeframe">Timeframe. It can be any of Timeframe enumeration values. 0 means the current chart timeframe.</param>
      <param name="period">Averaging period to calculate the main line.</param>
      <param name="deviation">Deviation from the main line.</param>
      <param name="bands_shift">The indicator shift relative to the chart.</param>
      <param name="applied_price">Applied price. It can be any of Applied price enumeration values.</param>
      <param name="mode">Indicator line index. It can be any of the Indicators line identifiers enumeration value.</param>
      <param name="shift">Index of the value taken from the indicator buffer (shift relative to the current bar the given amount of periods ago).</param>
      <returns>indicator value</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.iBandsOnArray(System.Double[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Calculation of the Bollinger Bands indicator on data stored in a numeric array.
            Unlike iBands(...), the iBandsOnArray function does not take data by symbol name,
            timeframe, the applied price. The price data must be previously prepared.
            The indicator is calculated from left to right. To access to the array elements as to a series array
            (i.e., from right to left), one has to use the ArraySetAsSeries function.
            </summary>
      <param name="array">Array with data.</param>
      <param name="total">The number of items to be counted. 0 means the whole array.</param>
      <param name="period">Averaging period for calculation of main line.</param>
      <param name="deviation">Deviation from main line.</param>
      <param name="bands_shift">The indicator shift relative to the chart.</param>
      <param name="mode">Indicator line index. It can be any of the Indicators line identifiers enumeration value.</param>
      <param name="shift">Index of the value taken from the indicator buffer (shift relative to the current bar the given amount of periods ago).</param>
      <returns>indicator value</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.iBearsPower(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Calculates the Bears Power indicator and returns its value.
            </summary>
      <param name="symbol">Symbol the data of which should be used to calculate indicator. NULL means the current symbol.</param>
      <param name="timeframe">Timeframe. It can be any of Timeframe enumeration values. 0 means the current chart timeframe.</param>
      <param name="period">Averaging period for calculation.</param>
      <param name="applied_price">Applied price. It can be any of Applied price enumeration values.</param>
      <param name="shift">Index of the value taken from the indicator buffer (shift relative to the current bar the given amount of periods ago).</param>
      <returns>indicator value</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.iBullsPower(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Calculates the Bulls Power indicator and returns its value.
            </summary>
      <param name="symbol">Symbol the data of which should be used to calculate indicator. NULL means the current symbol.</param>
      <param name="timeframe">Timeframe. It can be any of Timeframe enumeration values. 0 means the current chart timeframe.</param>
      <param name="period">Averaging period for calculation.</param>
      <param name="applied_price">Applied price. It can be any of Applied price enumeration values.</param>
      <param name="shift">Index of the value taken from the indicator buffer (shift relative to the current bar the given amount of periods ago).</param>
      <returns>indicator value</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.iCCI(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Calculates the Commodity channel index and returns its value.
            </summary>
      <param name="symbol">Symbol the data of which should be used to calculate indicator. NULL means the current symbol.</param>
      <param name="timeframe">Timeframe. It can be any of Timeframe enumeration values. 0 means the current chart timeframe.</param>
      <param name="period">Averaging period for calculation.</param>
      <param name="applied_price">Applied price. It can be any of Applied price enumeration values.</param>
      <param name="shift">Index of the value taken from the indicator buffer (shift relative to the current bar the given amount of periods ago).</param>
      <returns>index value</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.iCCIOnArray(System.Double[],System.Int32,System.Int32,System.Int32)">
      <summary>
            Calculation of the Commodity Channel Index on data stored in a numeric array.
            Unlike iCCI(...), the iCCIOnArray function does not take data by symbol name,
            timeframe, the applied price. The price data must be previously prepared.
            The indicator is calculated from left to right. To access to the array elements as to a series array
            (i.e., from right to left), one has to use the ArraySetAsSeries function.
            </summary>
      <param name="array">Array with data.</param>
      <param name="total">The number of items to be counted.</param>
      <param name="period">Averaging period for calculation.</param>
      <param name="shift">Index of the value taken from the indicator buffer (shift relative to the current bar the given amount of periods ago).</param>
      <returns>index value</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.iCustom(System.String,System.Int32,System.String,System.Int32,System.Int32)">
      <summary>
            Calculates the specified custom indicator and returns its value. The custom indicator must be compiled (*.EX4 file)
            and be in the terminal_directory\experts\indicators directory.
            </summary>
      <param name="symbol">Symbol the data of which should be used to calculate indicator. NULL means current symbol.</param>
      <param name="timeframe">Timeframe. It can be any of Timeframe enumeration values. 0 means the current chart timeframe.</param>
      <param name="name">Custom indicator compiled program name.</param>
      <param name="mode">Line index. Can be from 0 to 7 and must correspond with the index used by one of SetIndexBuffer functions.</param>
      <param name="shift">Index of the value taken from the indicator buffer (shift relative to the current bar the given amount of periods ago).</param>
      <returns>indicator value</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.iCustomWithIntegerParameter(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Int32)">
      <summary>
            Calculates the specified custom indicator and returns its value. The custom indicator must be compiled (*.EX4 file)
            and be in the terminal_directory\experts\indicators directory.
            </summary>
      <param name="symbol">Symbol the data of which should be used to calculate indicator. NULL means current symbol.</param>
      <param name="timeframe">Timeframe. It can be any of Timeframe enumeration values. 0 means the current chart timeframe.</param>
      <param name="name">Custom indicator compiled program name.</param>
      <param name="param">Parameters set (if necessary). The passed parameters and their order must correspond with the desclaration order and the type of extern variables of the custom indicator.</param>
      <param name="mode">Line index. Can be from 0 to 7 and must correspond with the index used by one of SetIndexBuffer functions.</param>
      <param name="shift">Index of the value taken from the indicator buffer (shift relative to the current bar the given amount of periods ago).</param>
      <returns>indicator value</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.iCustomWithStringParameter(System.String,System.Int32,System.String,System.String,System.Int32,System.Int32)">
      <summary>
            Calculates the specified custom indicator and returns its value. The custom indicator must be compiled (*.EX4 file)
            and be in the terminal_directory\experts\indicators directory.
            </summary>
      <param name="symbol">Symbol the data of which should be used to calculate indicator. NULL means current symbol.</param>
      <param name="timeframe">Timeframe. It can be any of Timeframe enumeration values. 0 means the current chart timeframe.</param>
      <param name="name">Custom indicator compiled program name.</param>
      <param name="param">Parameters set (if necessary). The passed parameters and their order must correspond with the desclaration order and the type of extern variables of the custom indicator.</param>
      <param name="mode">Line index. Can be from 0 to 7 and must correspond with the index used by one of SetIndexBuffer functions.</param>
      <param name="shift">Index of the value taken from the indicator buffer (shift relative to the current bar the given amount of periods ago).</param>
      <returns>indicator value</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.iCustomWithDoubleParameter(System.String,System.Int32,System.String,System.Double,System.Int32,System.Int32)">
      <summary>
            Calculates the specified custom indicator and returns its value. The custom indicator must be compiled (*.EX4 file)
            and be in the terminal_directory\experts\indicators directory.
            </summary>
      <param name="symbol">Symbol the data of which should be used to calculate indicator. NULL means current symbol.</param>
      <param name="timeframe">Timeframe. It can be any of Timeframe enumeration values. 0 means the current chart timeframe.</param>
      <param name="name">Custom indicator compiled program name.</param>
      <param name="param">Parameters set (if necessary). The passed parameters and their order must correspond with the desclaration order and the type of extern variables of the custom indicator.</param>
      <param name="mode">Line index. Can be from 0 to 7 and must correspond with the index used by one of SetIndexBuffer functions.</param>
      <param name="shift">Index of the value taken from the indicator buffer (shift relative to the current bar the given amount of periods ago).</param>
      <returns>indicator value</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.iCustomWithDateTimeParameter(System.String,System.Int32,System.String,System.DateTime,System.Int32,System.Int32)">
      <summary>
            Calculates the specified custom indicator and returns its value. The custom indicator must be compiled (*.EX4 file)
            and be in the terminal_directory\experts\indicators directory.
            </summary>
      <param name="symbol">Symbol the data of which should be used to calculate indicator. NULL means current symbol.</param>
      <param name="timeframe">Timeframe. It can be any of Timeframe enumeration values. 0 means the current chart timeframe.</param>
      <param name="name">Custom indicator compiled program name.</param>
      <param name="param">Parameters set (if necessary). The passed parameters and their order must correspond with the desclaration order and the type of extern variables of the custom indicator.</param>
      <param name="mode">Line index. Can be from 0 to 7 and must correspond with the index used by one of SetIndexBuffer functions.</param>
      <param name="shift">Index of the value taken from the indicator buffer (shift relative to the current bar the given amount of periods ago).</param>
      <returns>indicator value</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.iCustom(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Int32)">
      <summary>
            Calculates the specified custom indicator and returns its value. The custom indicator must be compiled (*.EX4 file)
            and be in the terminal_directory\experts\indicators directory.
            </summary>
      <param name="symbol">Symbol the data of which should be used to calculate indicator. NULL means current symbol.</param>
      <param name="timeframe">Timeframe. It can be any of Timeframe enumeration values. 0 means the current chart timeframe.</param>
      <param name="name">Custom indicator compiled program name.</param>
      <param name="param">Parameters set (if necessary). The passed parameters and their order must correspond with the desclaration order and the type of extern variables of the custom indicator.</param>
      <param name="mode">Line index. Can be from 0 to 7 and must correspond with the index used by one of SetIndexBuffer functions.</param>
      <param name="shift">Index of the value taken from the indicator buffer (shift relative to the current bar the given amount of periods ago).</param>
      <returns>indicator value</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.iCustom(System.String,System.Int32,System.String,System.Boolean,System.Int32,System.Int32)">
      <summary>
            Calculates the specified custom indicator and returns its value. The custom indicator must be compiled (*.EX4 file)
            and be in the terminal_directory\experts\indicators directory.
            </summary>
      <param name="symbol">Symbol the data of which should be used to calculate indicator. NULL means current symbol.</param>
      <param name="timeframe">Timeframe. It can be any of Timeframe enumeration values. 0 means the current chart timeframe.</param>
      <param name="name">Custom indicator compiled program name.</param>
      <param name="param">Parameters set (if necessary). The passed parameters and their order must correspond with the desclaration order and the type of extern variables of the custom indicator.</param>
      <param name="mode">Line index. Can be from 0 to 7 and must correspond with the index used by one of SetIndexBuffer functions.</param>
      <param name="shift">Index of the value taken from the indicator buffer (shift relative to the current bar the given amount of periods ago).</param>
      <returns>indicator value</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.iCustom(System.String,System.Int32,System.String,System.String,System.Int32,System.Int32)">
      <summary>
            Calculates the specified custom indicator and returns its value. The custom indicator must be compiled (*.EX4 file)
            and be in the terminal_directory\experts\indicators directory.
            </summary>
      <param name="symbol">Symbol the data of which should be used to calculate indicator. NULL means current symbol.</param>
      <param name="timeframe">Timeframe. It can be any of Timeframe enumeration values. 0 means the current chart timeframe.</param>
      <param name="name">Custom indicator compiled program name.</param>
      <param name="param">Parameters set (if necessary). The passed parameters and their order must correspond with the desclaration order and the type of extern variables of the custom indicator.</param>
      <param name="mode">Line index. Can be from 0 to 7 and must correspond with the index used by one of SetIndexBuffer functions.</param>
      <param name="shift">Index of the value taken from the indicator buffer (shift relative to the current bar the given amount of periods ago).</param>
      <returns>indicator value</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.iCustom(System.String,System.Int32,System.String,System.Double,System.Int32,System.Int32)">
      <summary>
            Calculates the specified custom indicator and returns its value. The custom indicator must be compiled (*.EX4 file)
            and be in the terminal_directory\experts\indicators directory.
            </summary>
      <param name="symbol">Symbol the data of which should be used to calculate indicator. NULL means current symbol.</param>
      <param name="timeframe">Timeframe. It can be any of Timeframe enumeration values. 0 means the current chart timeframe.</param>
      <param name="name">Custom indicator compiled program name.</param>
      <param name="param">Parameters set (if necessary). The passed parameters and their order must correspond with the desclaration order and the type of extern variables of the custom indicator.</param>
      <param name="mode">Line index. Can be from 0 to 7 and must correspond with the index used by one of SetIndexBuffer functions.</param>
      <param name="shift">Index of the value taken from the indicator buffer (shift relative to the current bar the given amount of periods ago).</param>
      <returns>indicator value</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.iCustom(System.String,System.Int32,System.String,System.DateTime,System.Int32,System.Int32)">
      <summary>
            Calculates the specified custom indicator and returns its value. The custom indicator must be compiled (*.EX4 file)
            and be in the terminal_directory\experts\indicators directory.
            </summary>
      <param name="symbol">Symbol the data of which should be used to calculate indicator. NULL means current symbol.</param>
      <param name="timeframe">Timeframe. It can be any of Timeframe enumeration values. 0 means the current chart timeframe.</param>
      <param name="name">Custom indicator compiled program name.</param>
      <param name="param">Parameters set (if necessary). The passed parameters and their order must correspond with the desclaration order and the type of extern variables of the custom indicator.</param>
      <param name="mode">Line index. Can be from 0 to 7 and must correspond with the index used by one of SetIndexBuffer functions.</param>
      <param name="shift">Index of the value taken from the indicator buffer (shift relative to the current bar the given amount of periods ago).</param>
      <returns>indicator value</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.iCustom(System.String,System.Int32,System.String,System.Drawing.Color,System.Int32,System.Int32)">
      <summary>
            Calculates the specified custom indicator and returns its value. The custom indicator must be compiled (*.EX4 file)
            and be in the terminal_directory\experts\indicators directory.
            </summary>
      <param name="symbol">Symbol the data of which should be used to calculate indicator. NULL means current symbol.</param>
      <param name="timeframe">Timeframe. It can be any of Timeframe enumeration values. 0 means the current chart timeframe.</param>
      <param name="name">Custom indicator compiled program name.</param>
      <param name="param">Parameters set (if necessary). The passed parameters and their order must correspond with the desclaration order and the type of extern variables of the custom indicator.</param>
      <param name="mode">Line index. Can be from 0 to 7 and must correspond with the index used by one of SetIndexBuffer functions.</param>
      <param name="shift">Index of the value taken from the indicator buffer (shift relative to the current bar the given amount of periods ago).</param>
      <returns>indicator value</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.iDeMarker(System.String,System.Int32,System.Int32,System.Int32)">
      <summary>
            Calculates the DeMarker indicator and returns its value.
            </summary>
      <param name="symbol">Symbol the data of which should be used to calculate indicator. NULL means the current symbol.</param>
      <param name="timeframe">Timeframe. It can be any of Timeframe enumeration values. 0 means the current chart timeframe.</param>
      <param name="period">Averaging period for calculation.</param>
      <param name="shift">Index of the value taken from the indicator buffer (shift relative to the current bar the given amount of periods ago).</param>
      <returns>indicator value</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.iEnvelopes(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.Int32,System.Int32)">
      <summary>
            Calculates the Envelopes indicator and returns its value.
            </summary>
      <param name="symbol">Symbol the data of which should be used to calculate indicator. NULL means the current symbol.</param>
      <param name="timeframe">Timeframe. It can be any of Timeframe enumeration values. 0 means the current chart timeframe.</param>
      <param name="ma_period">Averaging period for calculation of the main line.</param>
      <param name="ma_method">MA method. It can be any of Moving Average method enumeration value.</param>
      <param name="ma_shift">MA shift. Indicator line offset relate to the chart by timeframe.</param>
      <param name="applied_price">Applied price. It can be any of Applied price enumeration values.</param>
      <param name="deviation">Percent deviation from the main line.</param>
      <param name="mode">Indicator line index. It can be any of Indicators line identifiers enumeration value.</param>
      <param name="shift">Index of the value taken from the indicator buffer (shift relative to the current bar the given amount of periods ago).</param>
      <returns>indicator value</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.iEnvelopesOnArray(System.Double[],System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.Int32,System.Int32)">
      <summary>
            Calculation of the Envelopes indicator on data stored in a numeric array.
            Unlike iEnvelopes(...), the iEnvelopesOnArray function does not take data by symbol name,
            timeframe, the applied price. The price data must be previously prepared.
            The indicator is calculated from left to right. To access to the array elements as to a series array
            (i.e., from right to left), one has to use the ArraySetAsSeries function.
            </summary>
      <param name="array">Array with data.</param>
      <param name="total">The number of items to be counted.</param>
      <param name="ma_period">Averaging period for calculation of the main line.</param>
      <param name="ma_method">MA method. It can be any of Moving Average method enumeration value.</param>
      <param name="ma_shift">MA shift. Indicator line offset relate to the chart by timeframe.</param>
      <param name="deviation">Percent deviation from the main line.</param>
      <param name="mode">Indicator line index. It can be any of Indicators line identifiers enumeration value.</param>
      <param name="shift">Index of the value taken from the indicator buffer (shift relative to the current bar the given amount of periods ago).</param>
      <returns>indicator value</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.iForce(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Calculates the Force index and returns its value.
            </summary>
      <param name="symbol">Symbol the data of which should be used to calculate indicator. NULL means current symbol.</param>
      <param name="timeframe">Timeframe. It can be any of Timeframe enumeration values. 0 means the current chart timeframe.</param>
      <param name="period">Averaging period for calculation.</param>
      <param name="ma_method">MA method. It can be any of Moving Average method enumeration value.</param>
      <param name="applied_price">Applied price. It can be any of Applied price enumeration values.</param>
      <param name="shift">Index of the value taken from the indicator buffer (shift relative to the current bar the given amount of periods ago).</param>
      <returns>index value</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.iFractals(System.String,System.Int32,System.Int32,System.Int32)">
      <summary>
            Calculates the Fractals and returns its value.
            </summary>
      <param name="symbol">Symbol the data of which should be used to calculate indicator. NULL means the current symbol.</param>
      <param name="timeframe">Timeframe. It can be any of Timeframe enumeration values. 0 means the current chart timeframe.</param>
      <param name="mode">Indicator line index. It can be any of the Indicators line identifiers enumeration value.</param>
      <param name="shift">Index of the value taken from the indicator buffer (shift relative to the current bar the given amount of periods ago).</param>
      <returns>indicator value</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.iGator(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Gator oscillator calculation. The oscillator displays the difference between the Alligator red and blue lines (the upper histogram) and that between red and green lines (the lower histogram).
            </summary>
      <param name="symbol">Symbol the data of which should be used to calculate indicator. NULL means the current symbol.</param>
      <param name="timeframe">Timeframe. It can be any of Timeframe enumeration values. 0 means the current chart timeframe.</param>
      <param name="jaw_period">Blue line averaging period (Alligator's Jaw).</param>
      <param name="jaw_shift">Blue line shift relative to the chart.</param>
      <param name="teeth_period">Red line averaging period (Alligator's Teeth).</param>
      <param name="teeth_shift">Red line shift relative to the chart.</param>
      <param name="lips_period">Green line averaging period (Alligator's Lips).</param>
      <param name="lips_shift">Green line shift relative to the chart.</param>
      <param name="ma_method">MA method. It can be any of Moving Average method enumeration value.</param>
      <param name="applied_price">Applied price. It can be any of Applied price enumeration values.</param>
      <param name="mode">Indicator line index. It can be any of Indicators line identifiers enumeration value.</param>
      <param name="shift">Index of the value taken from the indicator buffer (shift relative to the current bar the given amount of periods ago).</param>
      <returns>indicator value</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.iIchimoku(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Calculates the Ichimoku Kinko Hyo and returns its value.
            </summary>
      <param name="symbol">Symbol the data of which should be used to calculate indicator. NULL means the current symbol.</param>
      <param name="timeframe">Timeframe. It can be any of Timeframe enumeration values. 0 means the current chart timeframe.</param>
      <param name="tenkan_sen">Tenkan Sen averaging period.</param>
      <param name="kijun_sen">Kijun Sen averaging period.</param>
      <param name="senkou_span_b">Senkou SpanB averaging period.</param>
      <param name="mode">Source of data. It can be one of the Ichimoku Kinko Hyo mode enumeration.</param>
      <param name="shift">Index of the value taken from the indicator buffer (shift relative to the current bar the given amount of periods ago).</param>
      <returns>indicator value</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.iMA(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Calculates the Moving average indicator and returns its value.
            </summary>
      <param name="symbol">Symbol the data of which should be used to calculate indicator. NULL means the current symbol.</param>
      <param name="timeframe">Timeframe. It can be any of Timeframe enumeration values. 0 means the current chart timeframe.</param>
      <param name="period">Averaging period for calculation.</param>
      <param name="ma_shift">MA shift. Indicators line offset relate to the chart by timeframe.</param>
      <param name="ma_method">MA method. It can be any of the Moving Average method enumeration value.</param>
      <param name="applied_price">Applied price. It can be any of Applied price enumeration values.</param>
      <param name="shift">Index of the value taken from the indicator buffer (shift relative to the current bar the given amount of periods ago).</param>
      <returns>indicator value</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.iMACD(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Calculates the Moving averages convergence/divergence and returns its value. In the systems where OsMA is called MACD Histogram, this indicator is displayed as two lines.
            In the Client Terminal, the Moving Average Convergence/Divergence is drawn as a histogram.
            </summary>
      <param name="symbol">Symbol the data of which should be used to calculate indicator. NULL means the current symbol.</param>
      <param name="timeframe">Timeframe. It can be any of Timeframe enumeration values. 0 means the current chart timeframe.</param>
      <param name="fast_ema_period">Number of periods for fast moving average calculation.</param>
      <param name="slow_ema_period">Number of periods for slow moving average calculation.</param>
      <param name="signal_period">Number of periods for signal moving average calculation.</param>
      <param name="applied_price">Applied price. It can be any of Applied price enumeration values.</param>
      <param name="mode">Indicator line index. It can be any of the Indicators line identifiers enumeration value.</param>
      <param name="shift">Index of the value taken from the indicator buffer (shift relative to the current bar the given amount of periods ago).</param>
      <returns>indicator value</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.iMAOnArray(System.Double[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Calculation of the Moving Average on data stored in a numeric array.
            Unlike iMA(...), the iMAOnArray function does not take data by symbol name,
            timeframe, the applied price. The price data must be previously prepared.
            The indicator is calculated from left to right. To access to the array elements as to a series array
            (i.e., from right to left), one has to use the ArraySetAsSeries function.
            </summary>
      <param name="array">Array with data.</param>
      <param name="total">The number of items to be counted. 0 means whole array.</param>
      <param name="period">Averaging period for calculation.</param>
      <param name="ma_shift">MA shift</param>
      <param name="ma_method">MA method. It can be any of the Moving Average method enumeration value.</param>
      <param name="shift">Index of the value taken from the indicator buffer (shift relative to the current bar the given amount of periods ago).</param>
      <returns>indicator value</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.iMFI(System.String,System.Int32,System.Int32,System.Int32)">
      <summary>
            Calculates the Money flow index and returns its value.
            </summary>
      <param name="symbol">Symbol the data of which should be used to calculate indicator. NULL means the current symbol.</param>
      <param name="timeframe">Timeframe. It can be any of Timeframe enumeration values. 0 means the current chart timeframe.</param>
      <param name="period">Period (amount of bars) for calculation of the indicator.</param>
      <param name="shift">Index of the value taken from the indicator buffer (shift relative to the current bar the given amount of periods ago).</param>
      <returns>index value</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.iMomentum(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Calculates the Momentum indicator and returns its value.
            </summary>
      <param name="symbol">Symbol the data of which should be used to calculate indicator.NULL means the current symbol.</param>
      <param name="timeframe">Timeframe. It can be any of Timeframe enumeration values. 0 means the current chart timeframe.</param>
      <param name="period">Period (amount of bars) for calculation of price changes.</param>
      <param name="applied_price">Applied price. It can be any of Applied price enumeration values.</param>
      <param name="shift">Index of the value taken from the indicator buffer (shift relative to the current bar the given amount of periods ago).</param>
      <returns>indicator value</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.iMomentumOnArray(System.Double[],System.Int32,System.Int32,System.Int32)">
      <summary>
            Calculation of the Momentum indicator on data stored in a numeric array.
            Unlike iMomentum(...), the iMomentumOnArray function does not take data by symbol name,
            timeframe, the applied price. The price data must be previously prepared.
            The indicator is calculated from left to right. To access to the array elements as to a series array
            (i.e., from right to left), one has to use the ArraySetAsSeries function.
            </summary>
      <param name="array">Array with data.</param>
      <param name="total">The number of items to be counted.</param>
      <param name="period">Period (amount of bars) for calculation of price changes.</param>
      <param name="shift">Index of the value taken from the indicator buffer (shift relative to the current bar the given amount of periods ago).</param>
      <returns>indicator value</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.iOBV(System.String,System.Int32,System.Int32,System.Int32)">
      <summary>
            Calculates the On Balance Volume indicator and returns its value.
            </summary>
      <param name="symbol">Symbol the data of which should be used to calculate indicator. NULL means the current symbol.</param>
      <param name="timeframe">Timeframe. It can be any of Timeframe enumeration values. 0 means the current chart timeframe.</param>
      <param name="applied_price">Applied price. It can be any of Applied price enumeration values.</param>
      <param name="shift">Index of the value taken from the indicator buffer (shift relative to the current bar the given amount of periods ago).</param>
      <returns>indicator value</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.iOsMA(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Calculates the Moving Average of Oscillator and returns its value. Sometimes called MACD Histogram in some systems.
            </summary>
      <param name="symbol">Symbol the data of which should be used to calculate indicator. NULL means the current symbol.</param>
      <param name="timeframe">Timeframe. It can be any of Timeframe enumeration values. 0 means the current chart timeframe.</param>
      <param name="fast_ema_period">Number of periods for fast moving average calculation.</param>
      <param name="slow_ema_period">Number of periods for slow moving average calculation.</param>
      <param name="signal_period">Number of periods for signal moving average calculation.</param>
      <param name="applied_price">Applied price. It can be any of Applied price enumeration values.</param>
      <param name="shift">Index of the value taken from the indicator buffer (shift relative to the current bar the given amount of periods ago).</param>
      <returns>indicator value</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.iRSI(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Calculates the Relative strength index and returns its value.
            </summary>
      <param name="symbol">Symbol the data of which should be used to calculate indicator. NULL means the current symbol.</param>
      <param name="timeframe">Timeframe. It can be any of Timeframe enumeration values. 0 means the current chart timeframe.</param>
      <param name="period">Number of periods for calculation.</param>
      <param name="applied_price">Applied price. It can be any of Applied price enumeration values.</param>
      <param name="shift">Index of the value taken from the indicator buffer (shift relative to the current bar the given amount of periods ago).</param>
      <returns>indicator value</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.iRSIOnArray(System.Double[],System.Int32,System.Int32,System.Int32)">
      <summary>
            Calculation of the Relative Strength Index on data stored in a numeric array.
            Unlike iRSI(...), the iRSIOnArray function does not take data by symbol name,
            timeframe, the applied price. The price data must be previously prepared.
            The indicator is calculated from left to right. To access to the array elements as to a series array
            (i.e., from right to left), one has to use the ArraySetAsSeries function.
            </summary>
      <param name="array">Array with data.</param>
      <param name="total">The number of items to be counted.</param>
      <param name="period">Number of periods for calculation.</param>
      <param name="shift">Index of the value taken from the indicator buffer (shift relative to the current bar the given amount of periods ago).</param>
      <returns>indicator value</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.iRVI(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Calculates the Relative Vigor index and returns its value.
            </summary>
      <param name="symbol">Symbol the data of which should be used to calculate indicator. NULL means the current symbol.</param>
      <param name="timeframe">Timeframe. It can be any of Timeframe enumeration values. 0 means the current chart timeframe.</param>
      <param name="period">Number of periods for calculation.</param>
      <param name="mode">Indicator line index. It can be any of Indicators line identifiers enumeration value.</param>
      <param name="shift">Index of the value taken from the indicator buffer (shift relative to the current bar the given amount of periods ago).</param>
      <returns>index value</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.iSAR(System.String,System.Int32,System.Double,System.Double,System.Int32)">
      <summary>
            Calculates the Parabolic Stop and Reverse system and returns its value.
            </summary>
      <param name="symbol">Symbol the data of which should be used to calculate indicator. NULL means the current symbol.</param>
      <param name="timeframe">Timeframe. It can be any of Timeframe enumeration values. 0 means the current chart timeframe.</param>
      <param name="step">Increment, usually 0.02.</param>
      <param name="maximum">Maximum value, usually 0.2.</param>
      <param name="shift">Index of the value taken from the indicator buffer (shift relative to the current bar the given amount of periods ago).</param>
      <returns>indicator value</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.iStdDev(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Calculates the Standard Deviation indicator and returns its value.
            </summary>
      <param name="symbol">Symbol the data of which should be used to calculate indicator. NULL means the current symbol.</param>
      <param name="timeframe">Timeframe. It can be any of Timeframe enumeration values. 0 means the current chart timeframe.</param>
      <param name="ma_period">MA period.</param>
      <param name="ma_shift">MA shift.</param>
      <param name="ma_method">MA method. It can be any of Moving Average method enumeration value.</param>
      <param name="applied_price">Applied price. It can be any of Applied price enumeration values.</param>
      <param name="shift">Index of the value taken from the indicator buffer (shift relative to the current bar the given amount of periods ago).</param>
      <returns>indicator value</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.iStdDevOnArray(System.Double[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Calculation of the Standard Deviation indicator on data stored in a numeric array.
            Unlike iStdDev(...), the iStdDevOnArray function does not take data by symbol name,
            timeframe, the applied price. The price data must be previously prepared.
            The indicator is calculated from left to right. To access to the array elements as to a series array
            (i.e., from right to left), one has to use the ArraySetAsSeries function.
            </summary>
      <param name="array">Array with data.</param>
      <param name="total">The number of items to be counted.</param>
      <param name="ma_period">MA period.</param>
      <param name="ma_shift">MA shift.</param>
      <param name="ma_method">MA method. It can be any of Moving Average method enumeration value.</param>
      <param name="shift">Index of the value taken from the indicator buffer (shift relative to the current bar the given amount of periods ago).</param>
      <returns>indicator value</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.iStochastic(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Calculates the Stochastic oscillator and returns its value.
            </summary>
      <param name="symbol">Symbol the data of which should be used to calculate indicator. NULL means the current symbol.</param>
      <param name="timeframe">Timeframe. It can be any of Timeframe enumeration values. 0 means the current chart timeframe.</param>
      <param name="kperiod">%K line period.</param>
      <param name="dperiod">%D line period.</param>
      <param name="slowing">Slowing value.</param>
      <param name="method">MA method. It can be any ofMoving Average method enumeration value.</param>
      <param name="price_field">Price field parameter. Can be one of this values: 0 - Low/High or 1 - Close/Close.</param>
      <param name="mode">Indicator line index. It can be any of the Indicators line identifiers enumeration value.</param>
      <param name="shift">Index of the value taken from the indicator buffer (shift relative to the current bar the given amount of periods ago).</param>
      <returns>indicator value</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.iWPR(System.String,System.Int32,System.Int32,System.Int32)">
      <summary>
            Calculates the Larry William's percent range indicator and returns its value.
            </summary>
      <param name="symbol">Symbol the data of which should be used to calculate indicator. NULL means the current symbol.</param>
      <param name="timeframe">Timeframe. It can be any of Timeframe enumeration values. 0 means the current chart timeframe.</param>
      <param name="period">Number of periods for calculation.</param>
      <param name="shift">Index of the value taken from the indicator buffer (shift relative to the current bar the given amount of periods ago).</param>
      <returns>indicator value</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.iBarShift(System.String,System.Int32,System.DateTime,System.Boolean)">
      <summary>
            Search for bar by open time. The function returns bar shift with the open time specified.
            If the bar having the specified open time is missing, the function will return -1 or the nearest bar shift depending on the exact.
            </summary>
      <param name="symbol">Symbol the data of which should be used to calculate indicator. NULL means the current symbol.</param>
      <param name="timeframe">Timeframe. It can be any of Timeframe enumeration values. 0 means the current chart timeframe.</param>
      <param name="time">value to find (bar's open time).</param>
      <param name="exact">Return mode when bar not found. false - iBarShift returns nearest. true - iBarShift returns -1.</param>
      <returns>The function returns bar shift with the open time specified.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.iBarShift(System.String,System.Int32,System.DateTime)">
      <summary>
            Search for bar by open time. The function returns bar shift with the open time specified.
            If the bar having the specified open time is missing, the function will return -1 or the nearest bar shift depending on the exact.
            </summary>
      <param name="symbol">Symbol the data of which should be used to calculate indicator. NULL means the current symbol.</param>
      <param name="timeframe">Timeframe. It can be any of Timeframe enumeration values. 0 means the current chart timeframe.</param>
      <param name="time">value to find (bar's open time).</param>
      <returns>The function returns bar shift with the open time specified.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.iBars(System.String,System.Int32)">
      <summary>
            Returns the number of bars on the specified chart.
            For the current chart, the information about the amount of bars is in the predefined variable named Bars.
            </summary>
      <param name="symbol">Symbol the data of which should be used to calculate indicator. NULL means the current symbol.</param>
      <param name="timeframe">Timeframe. It can be any of Timeframe enumeration values. 0 means the current chart timeframe.</param>
      <returns>Returns the number of bars on the specified chart.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.iClose(System.String,System.Int32,System.Int32)">
      <summary>
            Returns Close value for the bar of indicated symbol with timeframe and shift.
            If local history is empty (not loaded), function returns 0.
            For the current chart, the information about close prices is in the predefined array named Close[].
            </summary>
      <param name="symbol">Symbol the data of which should be used to calculate indicator. NULL means the current symbol.</param>
      <param name="timeframe">Timeframe. It can be any of Timeframe enumeration values. 0 means the current chart timeframe.</param>
      <param name="shift">Index of the value taken from the indicator buffer (shift relative to the current bar the given amount of periods ago).</param>
      <returns>Returns Close value for the bar of indicated symbol with timeframe and shift.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.iHigh(System.String,System.Int32,System.Int32)">
      <summary>
            Returns High value for the bar of indicated symbol with timeframe and shift.
            If local history is empty (not loaded), function returns 0.
            For the current chart, the information about high prices is in the predefined array named High[].
            </summary>
      <param name="symbol">Symbol on that data need to calculate indicator. NULL means current symbol.</param>
      <param name="timeframe">Timeframe. It can be any of Timeframe enumeration values. 0 means the current chart timeframe.</param>
      <param name="shift">Index of the value taken from the indicator buffer (shift relative to the current bar the given amount of periods ago).</param>
      <returns>Returns High value for the bar of indicated symbol with timeframe and shift.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.iHighest(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Returns the shift of the maximum value over a specific number of periods depending on type.
            </summary>
      <param name="symbol">Symbol the data of which should be used to calculate indicator. NULL means the current symbol.</param>
      <param name="timeframe">Timeframe. It can be any of Timeframe enumeration values. 0 means the current chart timeframe.</param>
      <param name="type">Series array identifier. It can be any of the Series array identifier enumeration values.</param>
      <param name="count">Number of periods (in direction from the start bar to the back one) on which the calculation is carried out.</param>
      <param name="start">Shift showing the bar, relative to the current bar, that the data should be taken from.</param>
      <returns>Returns the shift of the maximum value over a specific number of periods depending on type.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.iHighest(System.String,System.Int32,System.Int32)">
      <summary>
            Returns the shift of the maximum value over a specific number of periods depending on type.
            </summary>
      <param name="symbol">Symbol the data of which should be used to calculate indicator. NULL means the current symbol.</param>
      <param name="timeframe">Timeframe. It can be any of Timeframe enumeration values. 0 means the current chart timeframe.</param>
      <param name="type">Series array identifier. It can be any of the Series array identifier enumeration values.</param>
      <returns>Returns the shift of the maximum value over a specific number of periods depending on type.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.iHighest(System.String,System.Int32,System.Int32,System.Int32)">
      <summary>
            Returns the shift of the maximum value over a specific number of periods depending on type.
            </summary>
      <param name="symbol">Symbol the data of which should be used to calculate indicator. NULL means the current symbol.</param>
      <param name="timeframe">Timeframe. It can be any of Timeframe enumeration values. 0 means the current chart timeframe.</param>
      <param name="type">Series array identifier. It can be any of the Series array identifier enumeration values.</param>
      <param name="count">Number of periods (in direction from the start bar to the back one) on which the calculation is carried out.</param>
      <returns>Returns the shift of the maximum value over a specific number of periods depending on type.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.iLow(System.String,System.Int32,System.Int32)">
      <summary>
            Returns Low value for the bar of indicated symbol with timeframe and shift.
            If local history is empty (not loaded), function returns 0.
            For the current chart, the information about low prices is in the predefined array named Low[].
            </summary>
      <param name="symbol">Symbol the data of which should be used to calculate indicator. NULL means the current symbol.</param>
      <param name="timeframe">Timeframe. It can be any of Timeframe enumeration values. 0 means the current chart timeframe.</param>
      <param name="shift">Index of the value taken from the indicator buffer (shift relative to the current bar the given amount of periods ago).</param>
      <returns>Returns Low value for the bar of indicated symbol with timeframe and shift.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.iLowest(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Returns the shift of the least value over a specific number of periods depending on type.
            </summary>
      <param name="symbol">Symbol the data of which should be used to calculate indicator. NULL means the current symbol.</param>
      <param name="timeframe">Timeframe. It can be any of Timeframe enumeration values. 0 means the current chart timeframe.</param>
      <param name="type">Series array identifier. It can be any of Series array identifier enumeration values.</param>
      <param name="count">Number of periods (in direction from the start bar to the back one) on which the calculation is carried out.</param>
      <param name="start">Shift showing the bar, relative to the current bar, that the data should be taken from.</param>
      <returns>Returns the shift of the least value over a specific number of periods depending on type.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.iLowest(System.String,System.Int32,System.Int32)">
      <summary>
            Returns the shift of the least value over a specific number of periods depending on type.
            </summary>
      <param name="symbol">Symbol the data of which should be used to calculate indicator. NULL means the current symbol.</param>
      <param name="timeframe">Timeframe. It can be any of Timeframe enumeration values. 0 means the current chart timeframe.</param>
      <param name="type">Series array identifier. It can be any of Series array identifier enumeration values.</param>
      <returns>Returns the shift of the least value over a specific number of periods depending on type.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.iLowest(System.String,System.Int32,System.Int32,System.Int32)">
      <summary>
            Returns the shift of the least value over a specific number of periods depending on type.
            </summary>
      <param name="symbol">Symbol the data of which should be used to calculate indicator. NULL means the current symbol.</param>
      <param name="timeframe">Timeframe. It can be any of Timeframe enumeration values. 0 means the current chart timeframe.</param>
      <param name="type">Series array identifier. It can be any of Series array identifier enumeration values.</param>
      <param name="count">Number of periods (in direction from the start bar to the back one) on which the calculation is carried out.</param>
      <returns>Returns the shift of the least value over a specific number of periods depending on type.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.iOpen(System.String,System.Int32,System.Int32)">
      <summary>
            Returns Open value for the bar of indicated symbol with timeframe and shift.
            If local history is empty (not loaded), function returns 0.
            For the current chart, the information about open prices is in the predefined array named Open[].
            </summary>
      <param name="symbol">Symbol the data of which should be used to calculate indicator. NULL means the current symbol.</param>
      <param name="timeframe">Timeframe. It can be any of Timeframe enumeration values. 0 means the current chart timeframe.</param>
      <param name="shift">Index of the value taken from the indicator buffer (shift relative to the current bar the given amount of periods ago).</param>
      <returns>Returns Open value for the bar of indicated symbol with timeframe and shift.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.iTime(System.String,System.Int32,System.Int32)">
      <summary>
            Returns Time value for the bar of indicated symbol with timeframe and shift.
            If local history is empty (not loaded), function returns 0.
            For the current chart, the information about bars open times is in the predefined array named Time[].
            </summary>
      <param name="symbol">Symbol the data of which should be used to calculate indicator. NULL means the current symbol.</param>
      <param name="timeframe">Timeframe. It can be any of Timeframe enumeration values. 0 means the current chart timeframe.</param>
      <param name="shift">Index of the value taken from the indicator buffer (shift relative to the current bar the given amount of periods ago).</param>
      <returns>Returns Time value for the bar of indicated symbol with timeframe and shift.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.iVolume(System.String,System.Int32,System.Int32)">
      <summary>
            Returns Tick Volume value for the bar of indicated symbol with timeframe and shift.
            If local history is empty (not loaded), function returns 0.
            For the current chart, the information about bars tick volumes is in the predefined array named Volume[].
            </summary>
      <param name="symbol">Symbol the data of which should be used to calculate indicator. NULL means the current symbol.</param>
      <param name="timeframe">Timeframe. It can be any of Timeframe enumeration values. 0 means the current chart timeframe.</param>
      <param name="shift">Index of the value taken from the indicator buffer (shift relative to the current bar the given amount of periods ago).</param>
      <returns>Returns Tick Volume value for the bar of indicated symbol with timeframe and shift.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.SeriesInfoInteger(System.String,System.Int32,System.Int32)">
      <summary>
            Returns information about the state of historical data.
            </summary>
      <param name="symbol_name">Symbol name.</param>
      <param name="timeframe">Period.</param>
      <param name="prop_id">Identifier of the requested property, value of the ENUM_SERIES_INFO_INTEGER enumeration.</param>
      <returns>Value of the long type.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.OrderClose(System.Int32,System.Double,System.Double,System.Int32,System.Drawing.Color)">
      <summary>
            Closes opened order.
            If the function succeeds, the return value is true.
            If the function fails, the return value is false.
            To get the detailed error information, call GetLastError().
            </summary>
      <param name="ticket">Unique number of the order ticket.</param>
      <param name="lots">Number of lots.</param>
      <param name="price">Preferred closing price.</param>
      <param name="slippage">Value of the maximum price slippage in points.</param>
      <param name="Color">Color of the closing arrow on the chart. If the parameter is missing or has CLR_NONE value closing arrow will not be drawn on the chart.</param>
      <returns>If the function succeeds, the return value is true.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.OrderClose(System.Int32,System.Double,System.Double,System.Int32)">
      <summary>
            Closes opened order.
            If the function succeeds, the return value is true.
            If the function fails, the return value is false.
            To get the detailed error information, call GetLastError().
            </summary>
      <param name="ticket">Unique number of the order ticket.</param>
      <param name="lots">Number of lots.</param>
      <param name="price">Preferred closing price.</param>
      <param name="slippage">Value of the maximum price slippage in points.</param>
      <returns>If the function succeeds, the return value is true.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.OrderCloseBy(System.Int32,System.Int32,System.Drawing.Color)">
      <summary>
            Closes an opened order by another opposite opened order.
            If the function succeeds, the return value is true.
            If the function fails, the return value is false.
            To get the detailed error information, call GetLastError().
            </summary>
      <param name="ticket">Unique number of the order ticket.</param>
      <param name="opposite">Unique number of the opposite order ticket.</param>
      <param name="Color">Color of the closing arrow on the chart. If the parameter is missing or has CLR_NONE value closing arrow will not be drawn on the chart.</param>
      <returns>If the function succeeds, the return value is true.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.OrderCloseBy(System.Int32,System.Int32)">
      <summary>
            Closes an opened order by another opposite opened order.
            If the function succeeds, the return value is true.
            If the function fails, the return value is false.
            To get the detailed error information, call GetLastError().
            </summary>
      <param name="ticket">Unique number of the order ticket.</param>
      <param name="opposite">Unique number of the opposite order ticket.</param>
      <returns>If the function succeeds, the return value is true.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.OrderClosePrice">
      <summary>
            Returns close price for the currently selected order.
            Note: The order must be previously selected by the OrderSelect() function.
            </summary>
      <returns>Returns close price for the currently selected order.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.OrderCloseTime">
      <summary>
            Returns close time for the currently selected order.
            If order close time is not 0 then the order selected and has been closed and retrieved from the account history. Open and pending orders close time is equal to 0.
            Note: The order must be previously selected by the OrderSelect() function.
            </summary>
      <returns>Returns close time for the currently selected order.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.OrderComment">
      <summary>
            Returns comment for the selected order.
            Note: The order must be previously selected by the OrderSelect() function.
            </summary>
      <returns>Returns comment for the selected order.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.OrderCommission">
      <summary>
            Returns calculated commission for the currently selected order.
            Note: The order must be previously selected by the OrderSelect() function.
            </summary>
      <returns>Returns calculated commission for the currently selected order.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.OrderDelete(System.Int32,System.Drawing.Color)">
      <summary>
            Deletes previously opened pending order.
            If the function succeeds, the return value is true.
            If the function fails, the return value is false.
            To get the detailed error information, call GetLastError().
            </summary>
      <param name="ticket">Unique number of the order ticket.</param>
      <param name="Color">Color of the arrow on the chart. If the parameter is missing or has CLR_NONE value arrow will not be drawn on the chart.</param>
      <returns>If the function succeeds, the return value is true.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.OrderDelete(System.Int32)">
      <summary>
            Deletes previously opened pending order.
            If the function succeeds, the return value is true.
            If the function fails, the return value is false.
            To get the detailed error information, call GetLastError().
            </summary>
      <param name="ticket">Unique number of the order ticket.</param>
      <returns>If the function succeeds, the return value is true.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.OrderExpiration">
      <summary>
            Returns expiration date for the selected pending order.
            Note: The order must be previously selected by the OrderSelect() function.
            </summary>
      <returns>Returns expiration date for the selected pending order.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.OrderLots">
      <summary>
            Returns amount of lots for the selected order.
            Note: The order must be previously selected by the OrderSelect() function.
            </summary>
      <returns>Returns amount of lots for the selected order.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.OrderMagicNumber">
      <summary>
            Returns an identifying (magic) number for the currently selected order.
            Note: The order must be previously selected by the OrderSelect() function.
            </summary>
      <returns>Returns an identifying (magic) number for the currently selected order.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.OrderModify(System.Int32,System.Double,System.Double,System.Double,System.DateTime,System.Drawing.Color)">
      <summary>
            Modification of characteristics for the previously opened position or pending orders.
            If the function succeeds, the returned value will be TRUE.
            If the function fails, the returned value will be FALSE.
            To get the detailed error information, call GetLastError() function.
            Notes: Open price and expiration time can be changed only for pending orders.
            If unchanged values are passed as the function parameters, the error 1 (ERR_NO_RESULT) will be generated.
            Pending order expiration time can be disabled in some trade servers. In this case, when a non-zero value is specified
            in the expiration parameter, the error 147 (ERR_TRADE_EXPIRATION_DENIED) will be generated.
            </summary>
      <param name="ticket">Unique number of the order ticket.</param>
      <param name="price">New open price of the pending order.</param>
      <param name="stoploss">New StopLoss level.</param>
      <param name="takeprofit">New TakeProfit level.</param>
      <param name="expiration">Pending order expiration time.</param>
      <param name="arrow_color">Arrow color for StopLoss/TakeProfit modifications in the chart. If the parameter is missing or has CLR_NONE value, the arrows will not be shown in the chart.</param>
      <returns>If the function succeeds, the returned value will be TRUE.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.OrderModify(System.Int32,System.Double,System.Double,System.Double,System.DateTime)">
      <summary>
            Modification of characteristics for the previously opened position or pending orders.
            If the function succeeds, the returned value will be TRUE.
            If the function fails, the returned value will be FALSE.
            To get the detailed error information, call GetLastError() function.
            Notes: Open price and expiration time can be changed only for pending orders.
            If unchanged values are passed as the function parameters, the error 1 (ERR_NO_RESULT) will be generated.
            Pending order expiration time can be disabled in some trade servers. In this case, when a non-zero value is specified
            in the expiration parameter, the error 147 (ERR_TRADE_EXPIRATION_DENIED) will be generated.
            </summary>
      <param name="ticket">Unique number of the order ticket.</param>
      <param name="price">New open price of the pending order.</param>
      <param name="stoploss">New StopLoss level.</param>
      <param name="takeprofit">New TakeProfit level.</param>
      <param name="expiration">Pending order expiration time.</param>
      <returns>If the function succeeds, the returned value will be TRUE.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.OrderOpenPrice">
      <summary>
            Returns open price for the currently selected order.
            Order must be first selected by the OrderSelect() function.
            </summary>
      <returns>Returns open price for the currently selected order.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.OrderOpenTime">
      <summary>
            Returns open time for the currently selected order.
            Note: The order must be previously selected by the OrderSelect() function.
            </summary>
      <returns>Returns open time for the currently selected order.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.OrderPrint">
      <summary>
            Prints information about the selected order in the log in the following format:
            ticket number; open time; trade operation;
            amount of lots; open price; Stop Loss;
            Take Profit; close time; close price;
            commission; swap; profit;
            comment; magic number; pending order expiration date.
            Order must be selected by the OrderSelect() function.
            </summary>
    </member>
    <member name="M:NQuotes.IMqlApi.OrderProfit">
      <summary>
            Returns the net profit value (without swaps or commissions) for the selected order. For open positions, it is the current unrealized profit.
            For closed orders, it is the fixed profit.
            Returns profit for the currently selected order.
            Note: The order must be previously selected by the OrderSelect() function.
            </summary>
      <returns>Returns the net profit value.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.OrderSelect(System.Int32,System.Int32,System.Int32)">
      <summary>
            The function selects an order for further processing. It returns TRUE if the function succeeds.
            It returns FALSE if the function fails.
            To get the error information, one has to call the GetLastError() function.
            The pool parameter is ignored if the order is selected by the ticket number. The ticket number is a unique order identifier.
            To find out from what list the order has been selected, its close time must be analyzed. If the order close time
            equals to 0, the order is open or pending and taken from the terminal open positions list. One can distinguish an open position from a pending order
            by the order type. If the order close time does not equal to 0, the order is
            a closed order or a deleted pending order and was selected from the terminal history.
            They also differ from each other by their order types.
            </summary>
      <param name="index">Order index or order ticket depending on the second parameter.</param>
      <param name="select">Selecting flags. It can be any of the following values:SELECT_BY_POS - index in the order pool,SELECT_BY_TICKET - index is order ticket.</param>
      <param name="pool">Optional order pool index. Used when the selected parameter is SELECT_BY_POS. It can be any of the following values:MODE_TRADES (default)- order selected from trading pool(opened and pending orders),MODE_HISTORY - order selected from history pool (closed and canceled order).</param>
      <returns>It returns TRUE if the function succeeds.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.OrderSelect(System.Int32,System.Int32)">
      <summary>
            The function selects an order for further processing. It returns TRUE if the function succeeds.
            It returns FALSE if the function fails.
            To get the error information, one has to call the GetLastError() function.
            The pool parameter is ignored if the order is selected by the ticket number. The ticket number is a unique order identifier.
            To find out from what list the order has been selected, its close time must be analyzed. If the order close time
            equals to 0, the order is open or pending and taken from the terminal open positions list. One can distinguish an open position from a pending order
            by the order type. If the order close time does not equal to 0, the order is
            a closed order or a deleted pending order and was selected from the terminal history.
            They also differ from each other by their order types.
            </summary>
      <param name="index">Order index or order ticket depending on the second parameter.</param>
      <param name="select">Selecting flags. It can be any of the following values:SELECT_BY_POS - index in the order pool,SELECT_BY_TICKET - index is order ticket.</param>
      <returns>It returns TRUE if the function succeeds.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.OrderSend(System.String,System.Int32,System.Double,System.Double,System.Int32,System.Double,System.Double,System.String,System.Int32,System.DateTime,System.Drawing.Color)">
      <summary>
            The main function used to open a position or place a pending order.
            Returns number of the ticket assigned to the order by the trade server or -1 if it fails.
            To get additional error information, one has to call the GetLastError() function.
            Notes:
            At opening of a market order (OP_SELL or OP_BUY), only the latest prices of Bid (for selling) or
            Ask (for buying) can be used as open price. If operation is performed with a security differing from
            the current one, the MarketInfo() function must be used with MODE_BID or MODE_ASK parameter
            for the latest quotes for this security to be obtained. Calculated or unnormalized price cannot be applied.
            If there has not been the requested open price in the price thread or it has not been normalized according to the amount
            of digits after decimal point, the error 129 (ERR_INVALID_PRICE) will be generated. If the requested
            open price is fully out of date, the error 138 (ERR_REQUOTE) will be generated independently on the slippage
            parameter. If the requested price is out of date, but present in the thread, the position will be opened at the current price and only if
            the current price lies within the range of price+-slippage.
            StopLoss and TakeProfit levels cannot be too close to the market. The minimal distance of stop levels in points can be obtained using the
            MarketInfo() function with MODE_STOPLEVEL parameter. In the case of erroneous or unnormalized stop levels, the
            error 130 (ERR_INVALID_STOPS) will be generated.
            At placing of a pending order, the open price cannot be too close to the market. The minimal distance of the pending price from the current market one
            in points can be obtained using the MarketInfo() function with the MODE_STOPLEVEL parameter. In case of false open price
            of a pending order, the error 130 (ERR_INVALID_STOPS) will be generated.
            Applying of pending order expiration time can be disabled in some trade servers. In this case, when a non-zero value is specified
            in the expiration parameter, the error 147 (ERR_TRADE_EXPIRATION_DENIED) will be generated.
            On some trade servers, the total amount of open and pending orders can be limited.
            If this limit has been exceeded, no new position will be opened (or no pending order will be placed) and trade server will return error
            148 (ERR_TRADE_TOO_MANY_ORDERS).
            </summary>
      <param name="symbol">Symbol for trading.</param>
      <param name="cmd">Operation type. It can be any of the Trade operation enumeration.</param>
      <param name="volume">Number of lots.</param>
      <param name="price">Preferred price of the trade.</param>
      <param name="slippage">Maximum price slippage for buy or sell orders.</param>
      <param name="stoploss">Stop loss level.</param>
      <param name="takeprofit">Take profit level.</param>
      <param name="comment">Order comment text. Last part of the comment may be changed by server.</param>
      <param name="magic">Order magic number. May be used as user defined identifier.</param>
      <param name="expiration">Order expiration time (for pending orders only).</param>
      <param name="arrow_color">Color of the opening arrow on the chart. If parameter is missing or has CLR_NONE value opening arrow is not drawn on the chart.</param>
      <returns>Returns number of the ticket assigned to the order by the trade server or -1 if it fails.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.OrderSend(System.String,System.Int32,System.Double,System.Double,System.Int32,System.Double,System.Double)">
      <summary>
            The main function used to open a position or place a pending order.
            Returns number of the ticket assigned to the order by the trade server or -1 if it fails.
            To get additional error information, one has to call the GetLastError() function.
            Notes:
            At opening of a market order (OP_SELL or OP_BUY), only the latest prices of Bid (for selling) or
            Ask (for buying) can be used as open price. If operation is performed with a security differing from
            the current one, the MarketInfo() function must be used with MODE_BID or MODE_ASK parameter
            for the latest quotes for this security to be obtained. Calculated or unnormalized price cannot be applied.
            If there has not been the requested open price in the price thread or it has not been normalized according to the amount
            of digits after decimal point, the error 129 (ERR_INVALID_PRICE) will be generated. If the requested
            open price is fully out of date, the error 138 (ERR_REQUOTE) will be generated independently on the slippage
            parameter. If the requested price is out of date, but present in the thread, the position will be opened at the current price and only if
            the current price lies within the range of price+-slippage.
            StopLoss and TakeProfit levels cannot be too close to the market. The minimal distance of stop levels in points can be obtained using the
            MarketInfo() function with MODE_STOPLEVEL parameter. In the case of erroneous or unnormalized stop levels, the
            error 130 (ERR_INVALID_STOPS) will be generated.
            At placing of a pending order, the open price cannot be too close to the market. The minimal distance of the pending price from the current market one
            in points can be obtained using the MarketInfo() function with the MODE_STOPLEVEL parameter. In case of false open price
            of a pending order, the error 130 (ERR_INVALID_STOPS) will be generated.
            Applying of pending order expiration time can be disabled in some trade servers. In this case, when a non-zero value is specified
            in the expiration parameter, the error 147 (ERR_TRADE_EXPIRATION_DENIED) will be generated.
            On some trade servers, the total amount of open and pending orders can be limited.
            If this limit has been exceeded, no new position will be opened (or no pending order will be placed) and trade server will return error
            148 (ERR_TRADE_TOO_MANY_ORDERS).
            </summary>
      <param name="symbol">Symbol for trading.</param>
      <param name="cmd">Operation type. It can be any of the Trade operation enumeration.</param>
      <param name="volume">Number of lots.</param>
      <param name="price">Preferred price of the trade.</param>
      <param name="slippage">Maximum price slippage for buy or sell orders.</param>
      <param name="stoploss">Stop loss level.</param>
      <param name="takeprofit">Take profit level.</param>
      <returns>Returns number of the ticket assigned to the order by the trade server or -1 if it fails.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.OrderSend(System.String,System.Int32,System.Double,System.Double,System.Int32,System.Double,System.Double,System.String)">
      <summary>
            The main function used to open a position or place a pending order.
            Returns number of the ticket assigned to the order by the trade server or -1 if it fails.
            To get additional error information, one has to call the GetLastError() function.
            Notes:
            At opening of a market order (OP_SELL or OP_BUY), only the latest prices of Bid (for selling) or
            Ask (for buying) can be used as open price. If operation is performed with a security differing from
            the current one, the MarketInfo() function must be used with MODE_BID or MODE_ASK parameter
            for the latest quotes for this security to be obtained. Calculated or unnormalized price cannot be applied.
            If there has not been the requested open price in the price thread or it has not been normalized according to the amount
            of digits after decimal point, the error 129 (ERR_INVALID_PRICE) will be generated. If the requested
            open price is fully out of date, the error 138 (ERR_REQUOTE) will be generated independently on the slippage
            parameter. If the requested price is out of date, but present in the thread, the position will be opened at the current price and only if
            the current price lies within the range of price+-slippage.
            StopLoss and TakeProfit levels cannot be too close to the market. The minimal distance of stop levels in points can be obtained using the
            MarketInfo() function with MODE_STOPLEVEL parameter. In the case of erroneous or unnormalized stop levels, the
            error 130 (ERR_INVALID_STOPS) will be generated.
            At placing of a pending order, the open price cannot be too close to the market. The minimal distance of the pending price from the current market one
            in points can be obtained using the MarketInfo() function with the MODE_STOPLEVEL parameter. In case of false open price
            of a pending order, the error 130 (ERR_INVALID_STOPS) will be generated.
            Applying of pending order expiration time can be disabled in some trade servers. In this case, when a non-zero value is specified
            in the expiration parameter, the error 147 (ERR_TRADE_EXPIRATION_DENIED) will be generated.
            On some trade servers, the total amount of open and pending orders can be limited.
            If this limit has been exceeded, no new position will be opened (or no pending order will be placed) and trade server will return error
            148 (ERR_TRADE_TOO_MANY_ORDERS).
            </summary>
      <param name="symbol">Symbol for trading.</param>
      <param name="cmd">Operation type. It can be any of the Trade operation enumeration.</param>
      <param name="volume">Number of lots.</param>
      <param name="price">Preferred price of the trade.</param>
      <param name="slippage">Maximum price slippage for buy or sell orders.</param>
      <param name="stoploss">Stop loss level.</param>
      <param name="takeprofit">Take profit level.</param>
      <param name="comment">Order comment text. Last part of the comment may be changed by server.</param>
      <returns>Returns number of the ticket assigned to the order by the trade server or -1 if it fails.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.OrderSend(System.String,System.Int32,System.Double,System.Double,System.Int32,System.Double,System.Double,System.String,System.Int32)">
      <summary>
            The main function used to open a position or place a pending order.
            Returns number of the ticket assigned to the order by the trade server or -1 if it fails.
            To get additional error information, one has to call the GetLastError() function.
            Notes:
            At opening of a market order (OP_SELL or OP_BUY), only the latest prices of Bid (for selling) or
            Ask (for buying) can be used as open price. If operation is performed with a security differing from
            the current one, the MarketInfo() function must be used with MODE_BID or MODE_ASK parameter
            for the latest quotes for this security to be obtained. Calculated or unnormalized price cannot be applied.
            If there has not been the requested open price in the price thread or it has not been normalized according to the amount
            of digits after decimal point, the error 129 (ERR_INVALID_PRICE) will be generated. If the requested
            open price is fully out of date, the error 138 (ERR_REQUOTE) will be generated independently on the slippage
            parameter. If the requested price is out of date, but present in the thread, the position will be opened at the current price and only if
            the current price lies within the range of price+-slippage.
            StopLoss and TakeProfit levels cannot be too close to the market. The minimal distance of stop levels in points can be obtained using the
            MarketInfo() function with MODE_STOPLEVEL parameter. In the case of erroneous or unnormalized stop levels, the
            error 130 (ERR_INVALID_STOPS) will be generated.
            At placing of a pending order, the open price cannot be too close to the market. The minimal distance of the pending price from the current market one
            in points can be obtained using the MarketInfo() function with the MODE_STOPLEVEL parameter. In case of false open price
            of a pending order, the error 130 (ERR_INVALID_STOPS) will be generated.
            Applying of pending order expiration time can be disabled in some trade servers. In this case, when a non-zero value is specified
            in the expiration parameter, the error 147 (ERR_TRADE_EXPIRATION_DENIED) will be generated.
            On some trade servers, the total amount of open and pending orders can be limited.
            If this limit has been exceeded, no new position will be opened (or no pending order will be placed) and trade server will return error
            148 (ERR_TRADE_TOO_MANY_ORDERS).
            </summary>
      <param name="symbol">Symbol for trading.</param>
      <param name="cmd">Operation type. It can be any of the Trade operation enumeration.</param>
      <param name="volume">Number of lots.</param>
      <param name="price">Preferred price of the trade.</param>
      <param name="slippage">Maximum price slippage for buy or sell orders.</param>
      <param name="stoploss">Stop loss level.</param>
      <param name="takeprofit">Take profit level.</param>
      <param name="comment">Order comment text. Last part of the comment may be changed by server.</param>
      <param name="magic">Order magic number. May be used as user defined identifier.</param>
      <returns>Returns number of the ticket assigned to the order by the trade server or -1 if it fails.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.OrderSend(System.String,System.Int32,System.Double,System.Double,System.Int32,System.Double,System.Double,System.String,System.Int32,System.DateTime)">
      <summary>
            The main function used to open a position or place a pending order.
            Returns number of the ticket assigned to the order by the trade server or -1 if it fails.
            To get additional error information, one has to call the GetLastError() function.
            Notes:
            At opening of a market order (OP_SELL or OP_BUY), only the latest prices of Bid (for selling) or
            Ask (for buying) can be used as open price. If operation is performed with a security differing from
            the current one, the MarketInfo() function must be used with MODE_BID or MODE_ASK parameter
            for the latest quotes for this security to be obtained. Calculated or unnormalized price cannot be applied.
            If there has not been the requested open price in the price thread or it has not been normalized according to the amount
            of digits after decimal point, the error 129 (ERR_INVALID_PRICE) will be generated. If the requested
            open price is fully out of date, the error 138 (ERR_REQUOTE) will be generated independently on the slippage
            parameter. If the requested price is out of date, but present in the thread, the position will be opened at the current price and only if
            the current price lies within the range of price+-slippage.
            StopLoss and TakeProfit levels cannot be too close to the market. The minimal distance of stop levels in points can be obtained using the
            MarketInfo() function with MODE_STOPLEVEL parameter. In the case of erroneous or unnormalized stop levels, the
            error 130 (ERR_INVALID_STOPS) will be generated.
            At placing of a pending order, the open price cannot be too close to the market. The minimal distance of the pending price from the current market one
            in points can be obtained using the MarketInfo() function with the MODE_STOPLEVEL parameter. In case of false open price
            of a pending order, the error 130 (ERR_INVALID_STOPS) will be generated.
            Applying of pending order expiration time can be disabled in some trade servers. In this case, when a non-zero value is specified
            in the expiration parameter, the error 147 (ERR_TRADE_EXPIRATION_DENIED) will be generated.
            On some trade servers, the total amount of open and pending orders can be limited.
            If this limit has been exceeded, no new position will be opened (or no pending order will be placed) and trade server will return error
            148 (ERR_TRADE_TOO_MANY_ORDERS).
            </summary>
      <param name="symbol">Symbol for trading.</param>
      <param name="cmd">Operation type. It can be any of the Trade operation enumeration.</param>
      <param name="volume">Number of lots.</param>
      <param name="price">Preferred price of the trade.</param>
      <param name="slippage">Maximum price slippage for buy or sell orders.</param>
      <param name="stoploss">Stop loss level.</param>
      <param name="takeprofit">Take profit level.</param>
      <param name="comment">Order comment text. Last part of the comment may be changed by server.</param>
      <param name="magic">Order magic number. May be used as user defined identifier.</param>
      <param name="expiration">Order expiration time (for pending orders only).</param>
      <returns>Returns number of the ticket assigned to the order by the trade server or -1 if it fails.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.OrderStopLoss">
      <summary>
            Returns stop loss value for the currently selected order.
            Note: The order must be previously selected by the OrderSelect() function.
            </summary>
      <returns>Returns stop loss value for the currently selected order.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.OrderSwap">
      <summary>
            Returns swap value for the currently selected order.
            Note: The order must be previously selected by the OrderSelect() function.
            </summary>
      <returns>Returns swap value for the currently selected order.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.OrderSymbol">
      <summary>
            Returns the order symbol value for selected order.
            Note: The order must be previously selected by the OrderSelect() function.
            </summary>
      <returns>Returns the order symbol value for selected order.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.OrderTakeProfit">
      <summary>
            Returns take profit value for the currently selected order.
            Note: The order must be previously selected by the OrderSelect() function.
            </summary>
      <returns>Returns take profit value for the currently selected order.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.OrderTicket">
      <summary>
            Returns ticket number for the currently selected order.
            Note: The order must be previously selected by the OrderSelect() function.
            </summary>
      <returns>Returns ticket number for the currently selected order.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.OrderType">
      <summary>
            Returns order operation type for the currently selected order. It can be any of the following values:
            OP_BUY - buying position,
            OP_SELL - selling position,
            OP_BUYLIMIT - buy limit pending position,
            OP_BUYSTOP - buy stop pending position,
            OP_SELLLIMIT - sell limit pending position,
            OP_SELLSTOP - sell stop pending position.
            Note: order must be selected by OrderSelect() function.
            </summary>
      <returns>Returns order operation type for the currently selected order.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.OrdersHistoryTotal">
      <summary>
            Returns the number of closed orders in the account history loaded into the terminal. The history list size depends on
            the current settings of the "Account history" tab of the terminal.
            </summary>
      <returns>Returns the number of closed orders in the account history loaded into the terminal.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.OrdersTotal">
      <summary>
            Returns market and pending orders count.
            </summary>
      <returns>Returns market and pending orders count.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.HideTestIndicators(System.Boolean)">
      <summary>
            The function sets a flag hiding indicators called by the Expert Advisor.
            After the expert has been tested and the appropriate chart opened, the flagged indicators will not be drawn in the testing chart.
            Every indicator called will first be flagged with the current hiding flag.
            It must be noted that only those indicators can be drawn in the testing chart that are directly called from the expert under test.
            </summary>
      <param name="hide">TRUE, if there is a need to hide indicators, or else FALSE.</param>
    </member>
    <member name="M:NQuotes.IMqlApi.Period">
      <summary>
            Returns the amount of minutes determining the used period (chart timeframe).
            </summary>
      <returns>Returns the amount of minutes determining the used period (chart timeframe).</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.RefreshRates">
      <summary>
            Refreshing of data in pre-defined variables and series arrays.
            This function is used when expert advisor has been calculating for a long time and needs data refreshing.
            Returns TRUE if data are refreshed, otherwise returns FALSE. The only reason for data cannot be refreshed is that
            they are the current data of the client terminal.
            Experts and scripts operate with their own copy of history data. Data of the current symbol are copied at the first launch of the expert or script.
            At each subsequent launch of the expert (remember that script is executed only once and does not depend on
            incoming ticks), the initial copy will be updated. One or more new ticks can income while the expert or script is operating,
            and data can become out of date.
            </summary>
      <returns>Returns TRUE if data are refreshed, otherwise returns FALSE.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.Symbol">
      <summary>
            Returns a text string with the name of the current financial instrument.
            </summary>
      <returns>Returns a text string with the name of the current financial instrument.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.WindowBarsPerChart">
      <summary>
            Function returns the amount of bars visible on the chart.
            </summary>
      <returns>Function returns the amount of bars visible on the chart.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.WindowExpertName">
      <summary>
            Returns name of the executed expert, script, custom indicator, or library, depending on the MQL4 program, from which
            this function has been called.
            </summary>
      <returns>name of the program</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.WindowFind(System.String)">
      <summary>
            If indicator with name was found, the function returns the window index containing this specified indicator, otherwise it returns -1.
            Note: WindowFind() returns -1 if custom indicator searches itself when init() function works.
            </summary>
      <param name="name">Indicator short name.</param>
      <returns>returns the window index containing this specified indicator</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.WindowFirstVisibleBar">
      <summary>
            The function returns the first visible bar number in the current chart window. It must be taken into consideration that price bars are numbered
            in the reverse order, from the last to the first one.
            The current bar, the latest in the price array, is indexed as 0. The oldest bar is indexed as Bars-1.
            If the first visible bar number is 2 or more bars less than the amount of visible bars in the chart,
            it means that the chart window has not been fully filled out and there is a space to the left.
            </summary>
      <returns>returns the first visible bar number in the current chart window</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.WindowHandle(System.String,System.Int32)">
      <summary>
            Returns the system window handler containing the given chart.
            If the chart of symbol and timeframe has not been opened by the moment of function calling, 0 will be returned.
            </summary>
      <param name="symbol">symbol name.</param>
      <param name="timeframe">Timeframe. It can be any of Timeframe enumeration values. 0 means the current chart timeframe.</param>
      <returns>Returns the system window handler containing the given chart.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.WindowIsVisible(System.Int32)">
      <summary>
            Returns TRUE if the chart subwindow is visible, otherwise returns FALSE. The chart subwindow can be
            hidden due to the visibility properties of the indicator placed in it.
            </summary>
      <param name="index">Chart subwindow index.</param>
      <returns>Returns TRUE if the chart subwindow is visible, otherwise returns FALSE.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.WindowOnDropped">
      <summary>
            Returns window index where expert, custom indicator or script was dropped.
            This value is valid if the expert, custom indicator or script was dropped by mouse.
            Note: For custom indicators being initialized (call from the init() function), this index is not defined.
            The returned index is the number of window (0-chart main menu, subwindows of indicators are numbered starting from 1) where the custom indicator
            is working. A custom indicator can create its own new subwindow during its work, and the number of this subwindow will differ from that of the window
            where the indicator was really dropped in.
            See also WindowXOnDropped(), WindowYOnDropped()
            </summary>
      <returns>Returns window index where expert, custom indicator or script was dropped.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.WindowPriceMax(System.Int32)">
      <summary>
            Returns maximal value of the vertical scale of the specified subwindow of the current chart
            (0-main chart window, the indicators' subwindows are numbered starting from 1). If the subwindow
            index has not been specified, the maximal value of the price scale of the main chart window is returned.
            See also WindowPriceMin(), WindowFirstVisibleBar(), WindowBarsPerChart()
            </summary>
      <param name="index">Chart subwindow index (0 - main chart window).</param>
      <returns>Returns maximal value of the vertical scale of the specified subwindow of the current chart.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.WindowPriceMax">
      <summary>
            Returns maximal value of the vertical scale of the specified subwindow of the current chart
            (0-main chart window, the indicators' subwindows are numbered starting from 1). If the subwindow
            index has not been specified, the maximal value of the price scale of the main chart window is returned.
            See also WindowPriceMin(), WindowFirstVisibleBar(), WindowBarsPerChart()
            </summary>
      <returns>Returns maximal value of the vertical scale of the specified subwindow of the current chart.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.WindowPriceMin(System.Int32)">
      <summary>
            Returns minimal value of the vertical scale of the specified subwindow of the current chart
            (0-main chart window, the indicators' subwindows are numbered starting from 1). If the subwindow
            index has not been specified, the minimal value of the price scale of the main chart window is returned.
            See also WindowPriceMax(), WindowFirstVisibleBar(), WindowBarsPerChart()
            </summary>
      <param name="index">Chart subwindow index (0 - main chart window).</param>
      <returns>Returns minimal value of the vertical scale of the specified subwindow of the current chart.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.WindowPriceMin">
      <summary>
            Returns minimal value of the vertical scale of the specified subwindow of the current chart
            (0-main chart window, the indicators' subwindows are numbered starting from 1). If the subwindow
            index has not been specified, the minimal value of the price scale of the main chart window is returned.
            See also WindowPriceMax(), WindowFirstVisibleBar(), WindowBarsPerChart()
            </summary>
      <returns>Returns minimal value of the vertical scale of the specified subwindow of the current chart.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.WindowPriceOnDropped">
      <summary>
            Returns the price part of the chart point where expert or script was dropped.
            This value is only valid if the expert or script was dropped by mouse.
            Note: For custom indicators, this value is undefined.
            </summary>
      <returns>Returns the price part of the chart point where expert or script was dropped.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.WindowRedraw">
      <summary>
            Redraws the current chart forcedly. It is normally used after the objects properties have been changed.
            </summary>
    </member>
    <member name="M:NQuotes.IMqlApi.WindowScreenShot(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Saves current chart screen shot as a GIF file. Returns FALSE if it fails. To get the error code, one has to use the GetLastError() function.
            The screen shot is saved in the terminal_dir\experts\files (terminal_dir\tester\files in case of testing) directory or its subdirectories.
            </summary>
      <param name="filename">Screen shot file name.</param>
      <param name="size_x">Screen shot width in pixels.</param>
      <param name="size_y">Screen shot height in pixels.</param>
      <param name="start_bar">Index of the first visible bar in the screen shot. If 0 value is set, the current first visible bar will be shot. If no value or negative value has been set, the end-of-chart screen shot will be produced, indent being taken into consideration.</param>
      <param name="chart_scale">Horizontal chart scale for screen shot. Can be in the range from 0 to 5. If no value or negative value has been set, the current chart scale will be used.</param>
      <param name="chart_mode">Chart displaying mode. It can take the following values: CHART_BAR (0 is a sequence of bars), CHART_CANDLE (1 is a sequence of candlesticks), CHART_LINE (2 is a close prices line). If no value or negative value has been set, the chart will be shown in its current mode.</param>
      <returns>Returns FALSE if it fails.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.WindowScreenShot(System.String,System.Int32,System.Int32)">
      <summary>
            Saves current chart screen shot as a GIF file. Returns FALSE if it fails. To get the error code, one has to use the GetLastError() function.
            The screen shot is saved in the terminal_dir\experts\files (terminal_dir\tester\files in case of testing) directory or its subdirectories.
            </summary>
      <param name="filename">Screen shot file name.</param>
      <param name="size_x">Screen shot width in pixels.</param>
      <param name="size_y">Screen shot height in pixels.</param>
      <returns>Returns FALSE if it fails.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.WindowScreenShot(System.String,System.Int32,System.Int32,System.Int32)">
      <summary>
            Saves current chart screen shot as a GIF file. Returns FALSE if it fails. To get the error code, one has to use the GetLastError() function.
            The screen shot is saved in the terminal_dir\experts\files (terminal_dir\tester\files in case of testing) directory or its subdirectories.
            </summary>
      <param name="filename">Screen shot file name.</param>
      <param name="size_x">Screen shot width in pixels.</param>
      <param name="size_y">Screen shot height in pixels.</param>
      <param name="start_bar">Index of the first visible bar in the screen shot. If 0 value is set, the current first visible bar will be shot. If no value or negative value has been set, the end-of-chart screen shot will be produced, indent being taken into consideration.</param>
      <returns>Returns FALSE if it fails.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.WindowScreenShot(System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Saves current chart screen shot as a GIF file. Returns FALSE if it fails. To get the error code, one has to use the GetLastError() function.
            The screen shot is saved in the terminal_dir\experts\files (terminal_dir\tester\files in case of testing) directory or its subdirectories.
            </summary>
      <param name="filename">Screen shot file name.</param>
      <param name="size_x">Screen shot width in pixels.</param>
      <param name="size_y">Screen shot height in pixels.</param>
      <param name="start_bar">Index of the first visible bar in the screen shot. If 0 value is set, the current first visible bar will be shot. If no value or negative value has been set, the end-of-chart screen shot will be produced, indent being taken into consideration.</param>
      <param name="chart_scale">Horizontal chart scale for screen shot. Can be in the range from 0 to 5. If no value or negative value has been set, the current chart scale will be used.</param>
      <returns>Returns FALSE if it fails.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.WindowTimeOnDropped">
      <summary>
            Returns the time part of the chart point where expert or script was dropped.
            This value is only valid if the expert or script was dropped by mouse.
            Note: For custom indicators, this value is undefined.
            </summary>
      <returns>Returns the time part of the chart point where expert or script was dropped.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.WindowXOnDropped">
      <summary>
            Returns the value at X axis in pixels for the chart window client area point at which the expert or script was dropped.
            The value will be true only if the expert or script were moved with the mouse ("Drag'n'Drop") technique.
            </summary>
      <seealso cref="M:NQuotes.IMqlApi.WindowYOnDropped" />
      <seealso cref="M:NQuotes.IMqlApi.WindowOnDropped" />
      <returns>Returns the value at X axis in pixels for the chart window client area point at which the expert or script was dropped.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.WindowYOnDropped">
      <summary>
            Returns the value at Y axis in pixels for the chart window client area point at which the expert or script was dropped.
            The value will be true only if the expert or script were moved with the mouse ("Drag'n'Drop") technique.
            </summary>
      <seealso cref="M:NQuotes.IMqlApi.WindowXOnDropped" />
      <seealso cref="M:NQuotes.IMqlApi.WindowPriceOnDropped" />
      <seealso cref="M:NQuotes.IMqlApi.WindowOnDropped" />
      <returns>Returns the value at Y axis in pixels for the chart window client area point at which the expert or script was dropped.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.WindowsTotal">
      <summary>
            Returns count of indicator windows on the chart (including main chart).
            </summary>
      <returns>Returns count of indicator windows on the chart (including main chart).</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ChartApplyTemplate(System.Int64,System.String)">
      <summary>
            Applies a specific template from a specified file to the chart. The command is added to chart message queue and executed only after all previous commands have been processed.
            </summary>
      <param name="chart_id">Chart ID. 0 means the current chart.</param>
      <param name="filename">The name of the file containing the template.</param>
      <returns>Returns true if the command has been added to chart queue, otherwise false. To get error details use the GetLastError() function.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ChartSaveTemplate(System.Int64,System.String)">
      <summary>
            Saves current chart settings in a template with a specified name. The command is added to chart message queue and executed only after all previous commands have been processed.
            </summary>
      <param name="chart_id">Chart ID. 0 means the current chart.</param>
      <param name="filename">The filename to save the template. The ".tpl" extension will be added to the filename automatically; there is no need to specify it. The template is saved in terminal_directory\Profiles\Templates\ and can be used for manual application in the terminal. If a template with the same filename already exists, the contents of this file will be overwritten.</param>
      <returns>Returns true if the command has been added to chart queue, otherwise false. To get error details use the GetLastError() function.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ChartWindowFind(System.Int64,System.String)">
      <summary>
            The function searches in the indicated chart for the subwindow with the specified "short name" of the indicator (the short name is displayed in the left top part of the subwindow), and it returns the subwindow number in case of success.
            </summary>
      <param name="chart_id">Chart ID. 0 denotes the current chart.</param>
      <param name="indicator_shortname">Short name of the indicator. See INDICATOR_SHORTNAME</param>
      <returns>Subwindow number in case of success. In case of failure the function returns -1.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ChartOpen(System.String,System.Int32)">
      <summary>
            Opens a new chart with the specified symbol and period. The command is added to chart message queue and executed only after all previous commands have been processed.
            </summary>
      <param name="symbol">Chart symbol. NULL means the symbol of the  current chart (the Expert Advisor is attached to).</param>
      <param name="period">Chart period (timeframe). Can be one of the ENUM_TIMEFRAMES values. 0 means the current chart period.</param>
      <returns>If successful, it returns the opened chart ID. Otherwise returns 0. To get error details use the GetLastError() function.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ChartFirst">
      <summary>
            Returns the ID of the first chart of the client terminal.
            </summary>
      <returns>Chart ID.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ChartNext(System.Int64)">
      <summary>
            Returns the chart ID of the chart next to the specified one.
            </summary>
      <param name="chart_id">Chart ID. 0 does not mean the current chart. 0 means "return the first chart ID".</param>
      <returns>Chart ID. If this is the end of the chart list, it returns -1.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ChartClose(System.Int64)">
      <summary>
            Closes the specified chart.
            </summary>
      <param name="chart_id">Chart ID. 0 means the current chart.</param>
      <returns>If successful, returns true, otherwise false.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ChartSymbol(System.Int64)">
      <summary>
            Returns the symbol name for the specified chart.
            </summary>
      <param name="chart_id">Chart ID. 0 means the current chart.</param>
      <returns>If chart does not exist, the result will be an empty string.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ChartPeriod(System.Int64)">
      <summary>
            Returns the timeframe period of specified chart.
            </summary>
      <param name="chart_id">Chart ID. 0 means the current chart.</param>
      <returns>The function returns one of the ENUM_TIMEFRAMES values. If chart does not exist, it returns 0.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ChartRedraw(System.Int64)">
      <summary>
            This function calls a forced redrawing of a specified chart.
            </summary>
      <param name="chart_id">Chart ID. 0 means the current chart.</param>
    </member>
    <member name="M:NQuotes.IMqlApi.ChartSetDouble(System.Int64,System.Int32,System.Double)">
      <summary>
            Sets a value for a corresponding property of the specified chart. Chart property should be of a double type. The command is added to chart message queue and executed only after all previous commands have been processed.
            </summary>
      <param name="chart_id">Chart ID. 0 means the current chart.</param>
      <param name="prop_id">Chart property ID. Can be one of the ENUM_CHART_PROPERTY_DOUBLE values (except the read-only properties).</param>
      <param name="value">Property value.</param>
      <returns>Returns true if the command has been added to chart queue, otherwise false. To get error details use the GetLastError() function.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ChartSetInteger(System.Int64,System.Int32,System.Int32,System.Int64)">
      <summary>
            Sets a value for a corresponding property of the specified chart. Chart property must be datetime, int, color, bool or char. The command is added to chart message queue and executed only after all previous commands have been processed.
            </summary>
      <param name="chart_id">Chart ID. 0 means the current chart.</param>
      <param name="prop_id">Chart property ID. It can be one of the ENUM_CHART_PROPERTY_INTEGER value (except the read-only properties).</param>
      <param name="sub_window">Chart subwindow. 0 means the main chart window.</param>
      <param name="value">Property value.</param>
      <returns>Returns true if the command has been added to chart queue, otherwise false. To get error details use the GetLastError() function.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ChartSetString(System.Int64,System.Int32,System.String)">
      <summary>
            Sets a value for a corresponding property of the specified chart. Chart property must be of the string type. The command is added to chart message queue and executed only after all previous commands have been processed.
            </summary>
      <param name="chart_id">Chart ID. 0 means the current chart.</param>
      <param name="prop_id">Chart property ID. It's value can be one of the ENUM_CHART_PROPERTY_STRING values (except the read-only properties).</param>
      <param name="str_value">Property value string. String length cannot exceed 2045 characters (extra characters will be truncated).</param>
      <returns>Returns true if the command has been added to chart queue, otherwise false. To get error details use the GetLastError() function.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ChartGetDouble(System.Int64,System.Int32,System.Int32)">
      <summary>
            Returns the value of a corresponding property of the specified chart. Chart property must be of double type.
            </summary>
      <param name="chart_id">Chart ID. 0 means the current chart.</param>
      <param name="prop_id">Chart property ID. This value can be one of the ENUM_CHART_PROPERTY_DOUBLE values.</param>
      <param name="sub_window">Number of the chart subwindow or 0 for the 0 main chart window.</param>
      <returns>The value of double type.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ChartGetInteger(System.Int64,System.Int32,System.Int32)">
      <summary>
            Returns the value of a corresponding property of the specified chart. Chart property must be of datetime, int or bool type.
            </summary>
      <param name="chart_id">Chart ID. 0 means the current chart.</param>
      <param name="prop_id">Chart property ID. This value can be one of the ENUM_CHART_PROPERTY_DOUBLE values.</param>
      <param name="sub_window">Number of the chart subwindow or 0 for the 0 main chart window.</param>
      <returns>The value of long type.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ChartGetString(System.Int64,System.Int32)">
      <summary>
            Returns the value of a corresponding property of the specified chart. Chart property must be of string type.
            </summary>
      <param name="chart_id">Chart ID. 0 means the current chart.</param>
      <param name="prop_id">Chart property ID. This value can be one of the ENUM_CHART_PROPERTY_STRING values.</param>
      <returns>The value of string type.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ChartNavigate(System.Int64,System.Int32,System.Int32)">
      <summary>
            Performs shift of the specified chart by the specified number of bars relative to the specified position in the chart. The command is added to chart message queue and executed only after all previous commands have been processed.
            </summary>
      <param name="chart_id">Chart ID. 0 means the current chart.</param>
      <param name="position">Chart position to perform a shift. Can be one of the ENUM_CHART_POSITION values.</param>
      <param name="shift">Number of bars to shift the chart. Positive value means the right shift (to the end of chart), negative value means the left shift (to the beginning of chart). The zero shift can be used to navigate to the beginning or end of chart.</param>
      <returns>Returns true if successful, otherwise returns false.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ChartID">
      <summary>
            Returns the ID of the current chart.
            </summary>
      <returns>ID value.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ChartIndicatorDelete(System.Int64,System.Int32,System.String)">
      <summary>
            Removes an indicator with a specified name from the specified chart window. The command is added to chart message queue and executed only after all previous commands have been processed.
            </summary>
      <param name="chart_id">Chart ID. 0 denotes the current chart.</param>
      <param name="sub_window">Number of the chart subwindow. 0 denotes the main chart subwindow.</param>
      <param name="indicator_shortname">The short name of the indicator which is set in the INDICATOR_SHORTNAME property with the IndicatorSetString() function. To get the short name of an indicator use the ChartIndicatorName() function.</param>
      <returns>Returns true if the command has been added to chart queue, otherwise false. To get error details use the GetLastError() function.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ChartIndicatorName(System.Int64,System.Int32,System.Int32)">
      <summary>
            Returns the short name of the indicator by the number in the indicators list on the specified chart window.
            </summary>
      <param name="chart_id">Chart ID. 0 denotes the current chart.</param>
      <param name="sub_window">Number of the chart subwindow. 0 denotes the main chart subwindow.</param>
      <param name="index">The index of the indicator in the list of indicators. The numeration of indicators start with zero, i.e. the first indicator in the list has the 0 index. To obtain the number of indicators in the list use the ChartIndicatorsTotal() function.</param>
      <returns>The short name of the indicator which is set in the INDICATOR_SHORTNAME property with the IndicatorSetString() function. To get error details use the GetLastError() function.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ChartIndicatorsTotal(System.Int64,System.Int32)">
      <summary>
            Returns the number of all indicators applied to the specified chart window.
            </summary>
      <param name="chart_id">Chart ID. 0 denotes the current chart.</param>
      <param name="sub_window">Number of the chart subwindow. 0 denotes the main chart subwindow.</param>
      <returns>The number of indicators in the specified chart window. To get error details use the GetLastError() function.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ChartWindowOnDropped">
      <summary>
            Returns the number (index) of the chart subwindow, the Expert Advisor or script has been dropped to. 0 means the main chart window.
            </summary>
      <returns>Value of int type.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ChartPriceOnDropped">
      <summary>
            Returns the price coordinate corresponding to the chart point, an Expert Advisor or script has been dropped to.
            </summary>
      <returns>Value of double type.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ChartTimeOnDropped">
      <summary>
            Returns the time coordinate corresponding to the chart point, an Expert Advisor or script has been dropped to.
            </summary>
      <returns>Value of DateTime type.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ChartXOnDropped">
      <summary>
            Returns the X coordinate of the chart point, an Expert Advisor or script has been dropped to.
            </summary>
      <returns>The X coordinate value.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ChartYOnDropped">
      <summary>
            Returns the Y coordinateof the chart point, an Expert Advisor or script has been dropped to.
            </summary>
      <returns>The Y coordinate value.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ChartSetSymbolPeriod(System.Int64,System.String,System.Int32)">
      <summary>
            Changes the symbol and period of the specified chart. The function is asynchronous, i.e. it sends the command and does not wait for its execution completion. The command is added to chart message queue and executed only after all previous commands have been processed.
            </summary>
      <param name="chart_id">Chart ID. 0 means the current chart.</param>
      <param name="symbol">Chart symbol. NULL value means the current chart symbol (Expert Advisor is attached to).</param>
      <param name="period">Chart period (timeframe). Can be one of the ENUM_TIMEFRAMES values. 0 means the current chart period.</param>
      <returns>Returns true if the command has been added to chart queue, otherwise false. To get error details use the GetLastError() function.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.ChartScreenShot(System.Int64,System.String,System.Int32,System.Int32,System.Int32)">
      <summary>
            The function provides a screenshot of the chart in its current state in the gif format. The command is added to chart message queue and executed only after all previous commands have been processed.
            </summary>
      <param name="chart_id">Chart ID. 0 means the current chart.</param>
      <param name="filename">Screenshot file name. Cannot exceed 63 characters. Screenshot files are placed in the Files directory.</param>
      <param name="width">Screenshot width in pixels.</param>
      <param name="height">Screenshot height in pixels.</param>
      <param name="align_mode">Output mode of a narrow screenshot. A value of the ENUM_ALIGN_MODE enumeration. ALIGN_RIGHT means align to the right margin (the output from the end). ALIGN_LEFT means Left justify.</param>
      <returns>Returns true if the command has been added to chart queue, otherwise false. To get error details use the GetLastError() function.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.EventSetMillisecondTimer(System.Int32)">
      <summary>
            The function indicates to the client terminal that timer events should be generated at intervals less than one second for this Expert Advisor or indicator.
            </summary>
      <param name="milliseconds">Number of milliseconds defining the frequency of timer events.</param>
      <returns>In case of successful execution, returns true, otherwise - false. To receive an error code, GetLastError() function should be called.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.EventSetTimer(System.Int32)">
      <summary>
            The function indicates to the client terminal, that for this indicator or Expert Advisor, events from the timer must be generated with the specified periodicity.
            </summary>
      <param name="seconds">Number of seconds that determine the frequency of the timer event occurrence.</param>
      <returns>In case of success returns true, otherwise false. In order to get an error code, the GetLastError() function should be called.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.EventKillTimer">
      <summary>
            Specifies the client terminal that is necessary to stop the generation of events from Timer.
            </summary>
    </member>
    <member name="M:NQuotes.IMqlApi.MarketInfo(System.String,System.Int32)">
      <summary>
            Returns various data about securities listed in the Market Watch window. A part of information about the current security is stored in predefined variables.
            </summary>
      <param name="symbol">Security symbol.</param>
      <param name="type">Request identifier that defines the type of information to be returned. Can be any of values of request identifiers.</param>
      <returns>various data about securities listed in the Market Watch window</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.SymbolsTotal(System.Boolean)">
      <summary>
            Returns the number of available (selected in Market Watch or all) symbols.
            </summary>
      <param name="selected">Request mode. Can be true or false.</param>
      <returns>If the 'selected' parameter is true, the function returns the number of symbols selected in MarketWatch. If the value is false, it returns the total number of all symbols.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.SymbolName(System.Int32,System.Boolean)">
      <summary>
            Returns the name of a symbol.
            </summary>
      <param name="pos">Order number of a symbol.</param>
      <param name="selected">Request mode. If the value is true, the symbol is taken from the list of symbols selected in MarketWatch. If the value is false, the symbol is taken from the general list.</param>
      <returns>Value of string type with the symbol name.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.SymbolSelect(System.String,System.Boolean)">
      <summary>
            Selects a symbol in the Market Watch window or removes a symbol from the window.
            </summary>
      <param name="name">Symbol name.</param>
      <param name="select">Switch. If the value is false, a symbol should be removed from MarketWatch, otherwise a symbol should be selected in this window. A symbol can't be removed if the symbol chart is open, or there are open orders for this symbol.</param>
      <returns>In case of failure returns false.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.SymbolInfoDouble(System.String,System.Int32)">
      <summary>
            Returns the corresponding property of a specified symbol.
            </summary>
      <param name="name">Symbol name.</param>
      <param name="prop_id">Identifier of a symbol property. The value can be one of the values of the ENUM_SYMBOL_INFO_DOUBLE enumeration.</param>
      <returns>The value of double type. In case of execution failure, information about the error can be obtained using GetLastError() function.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.SymbolInfoInteger(System.String,System.Int32)">
      <summary>
            Returns the corresponding property of a specified symbol.
            </summary>
      <param name="name">Symbol name.</param>
      <param name="prop_id">Identifier of a symbol property. The value can be one of the values of the ENUM_SYMBOL_INFO_INTEGER enumeration.</param>
      <returns>The value of long type. In case of execution failure, information about the error can be obtained using GetLastError() function.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.SymbolInfoString(System.String,System.Int32)">
      <summary>
            Returns the corresponding property of a specified symbol.
            </summary>
      <param name="name">Symbol name.</param>
      <param name="prop_id">Identifier of a symbol property. The value can be one of the values of the ENUM_SYMBOL_INFO_STRING enumeration.</param>
      <returns>The value of string type. In case of execution failure, information about the error can be obtained using GetLastError() function.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.SignalBaseGetDouble(System.Int32)">
      <summary>
            Returns the value of double type property for selected signal.
            </summary>
      <param name="property_id">Signal property identifier. The value can be one of the values of the ENUM_SIGNAL_BASE_DOUBLE enumeration.</param>
      <returns>The value of double type property of the selected signal.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.SignalBaseGetInteger(System.Int32)">
      <summary>
            Returns the value of integer type property for selected signal.
            </summary>
      <param name="property_id">Signal property identifier. The value can be one of the values of the ENUM_SIGNAL_BASE_INTEGER enumeration.</param>
      <returns>The value of integer type property of the selected signal.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.SignalBaseGetString(System.Int32)">
      <summary>
            Returns the value of string type property for selected signal.
            </summary>
      <param name="property_id">Signal property identifier. The value can be one of the values of the ENUM_SIGNAL_BASE_STRING enumeration.</param>
      <returns>The value of string type property of the selected signal.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.SignalBaseSelect(System.Int32)">
      <summary>
            Selects a signal from signals, available in terminal for further working with it.
            </summary>
      <param name="index">Signal index in base of trading signals.</param>
      <returns>Returns true if successful, otherwise returns false. To read more about the error call GetLastError().</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.SignalBaseTotal">
      <summary>
            Returns the total amount of signals, available in terminal.
            </summary>
      <returns>The total amount of signals, available in terminal.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.SignalInfoGetDouble(System.Int32)">
      <summary>
            Returns the value of double type property of signal copy settings.
            </summary>
      <param name="property_id">Signal copy settings property identifier. The value can be one of the values of the ENUM_SIGNAL_INFO_DOUBLE enumeration.</param>
      <returns>The value of double type property of signal copy settings.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.SignalInfoGetInteger(System.Int32)">
      <summary>
            Returns the value of integer type property of signal copy settings.
            </summary>
      <param name="property_id">Signal copy settings property identifier. The value can be one of the values of the ENUM_SIGNAL_INFO_INTEGER enumeration.</param>
      <returns>The value of integer type property of signal copy settings.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.SignalInfoGetString(System.Int32)">
      <summary>
            Returns the value of string type property of signal copy settings.
            </summary>
      <param name="property_id">Signal copy settings property identifier. The value can be one of the values of the ENUM_SIGNAL_INFO_STRING enumeration.</param>
      <returns>The value of string type property of signal copy settings.</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.SignalInfoSetDouble(System.Int32,System.Double)">
      <summary>
            Sets the value of double type property of signal copy settings.
            </summary>
      <param name="property_id">Signal copy settings property identifier. The value can be one of the values of the ENUM_SIGNAL_INFO_DOUBLE enumeration.</param>
      <param name="value">The value of signal copy settings property.</param>
      <returns>Returns true if property has been changed, otherwise returns false. To read more about the error call GetLastError().</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.SignalInfoSetInteger(System.Int32,System.Int64)">
      <summary>
            Sets the value of integer type property of signal copy settings.
            </summary>
      <param name="property_id">Signal copy settings property identifier. The value can be one of the values of the ENUM_SIGNAL_INFO_INTEGER enumeration.</param>
      <param name="value">The value of signal copy settings property.</param>
      <returns>Returns true if property has been changed, otherwise returns false. To read more about the error call GetLastError().</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.SignalSubscribe(System.Int64)">
      <summary>
            Subscribes to the trading signal.
            </summary>
      <param name="signal_id">Signal identifier.</param>
      <returns>Returns true if subscription was successful, otherwise returns false. To read more about the error call GetLastError().</returns>
    </member>
    <member name="M:NQuotes.IMqlApi.SignalUnsubscribe">
      <summary>
            Cancels subscription.
            </summary>
      <returns>Returns true if subscription has been canceled successfully, otherwise returns false. To read more about the error call GetLastError().</returns>
    </member>
    <member name="P:NQuotes.IMqlApi.Ask">
      <summary>
            The latest known seller's price (ask price) for the current symbol. The RefreshRates() function must be used to update.
            </summary>
      <seealso cref="M:NQuotes.IMqlApi.MarketInfo(System.String,System.Int32)" />
    </member>
    <member name="P:NQuotes.IMqlApi.Bars">
      <summary>
            Number of bars in the current chart.
            </summary>
      <seealso cref="M:NQuotes.IMqlApi.iBars(System.String,System.Int32)" />
    </member>
    <member name="P:NQuotes.IMqlApi.Bid">
      <summary>
            The latest known buyer's price (offer price, bid price) of the current symbol. The RefreshRates() function must be used to update.
            </summary>
      <seealso cref="M:NQuotes.IMqlApi.MarketInfo(System.String,System.Int32)" />
    </member>
    <member name="P:NQuotes.IMqlApi.Close">
      <summary>
            Series array that contains close prices for each bar of the current chart.
            Series array elements are indexed in the reverse order, i.e., from the last one to the first one. The current bar which is the last in the array is indexed as 0. The oldest bar, the first in the chart, is indexed as Bars-1.
            </summary>
      <seealso cref="M:NQuotes.IMqlApi.iClose(System.String,System.Int32,System.Int32)" />
    </member>
    <member name="P:NQuotes.IMqlApi.Digits">
      <summary>
            Number of digits after decimal point for the current symbol prices.
            </summary>
      <seealso cref="M:NQuotes.IMqlApi.MarketInfo(System.String,System.Int32)" />
    </member>
    <member name="P:NQuotes.IMqlApi.High">
      <summary>
            Series array that contains the highest prices of each bar of the current chart.
            Series array elements are indexed in the reverse order, i.e., from the last one to the first one. The current bar which is the last in the array is indexed as 0. The oldest bar, the first in the chart, is indexed as Bars-1.
            </summary>
      <seealso cref="M:NQuotes.IMqlApi.iHigh(System.String,System.Int32,System.Int32)" />
    </member>
    <member name="P:NQuotes.IMqlApi.Low">
      <summary>
            Series array that contains the lowest prices of each bar of the current chart.
            Series array elements are indexed in the reverse order, i.e., from the last one to the first one. The current bar which is the last in the array is indexed as 0. The oldest bar, the first in the chart, is indexed as Bars-1.
            </summary>
      <seealso cref="M:NQuotes.IMqlApi.iLow(System.String,System.Int32,System.Int32)" />
    </member>
    <member name="P:NQuotes.IMqlApi.Open">
      <summary>
            Series array that contains open prices of each bar of the current chart.
            Series array elements are indexed in the reverse order, i.e., from the last one to the first one. The current bar which is the last in the array is indexed as 0. The oldest bar, the first in the chart, is indexed as Bars-1.
            </summary>
      <seealso cref="M:NQuotes.IMqlApi.iOpen(System.String,System.Int32,System.Int32)" />
    </member>
    <member name="P:NQuotes.IMqlApi.Point">
      <summary>
            The current symbol point value in the quote currency.
            </summary>
      <seealso cref="M:NQuotes.IMqlApi.MarketInfo(System.String,System.Int32)" />
    </member>
    <member name="P:NQuotes.IMqlApi.Time">
      <summary>
            Series array that contains open time of each bar of the current chart. Data like datetime represent time, in seconds, that has passed since 00:00 a.m. of 1 January, 1970.
            Series array elements are indexed in the reverse order, i.e., from the last one to the first one. The current bar which is the last in the array is indexed as 0. The oldest bar, the first in the chart, is indexed as Bars-1.
            </summary>
      <seealso cref="M:NQuotes.IMqlApi.iTime(System.String,System.Int32,System.Int32)" />
    </member>
    <member name="P:NQuotes.IMqlApi.Volume">
      <summary>
            Series array that contains tick volumes of each bar of the current chart.
            Series array elements are indexed in the reverse order, i.e., from the last one to the first one. The current bar which is the last in the array is indexed as 0. The oldest bar, the first in the chart, is indexed as Bars-1.
            </summary>
      <seealso cref="M:NQuotes.IMqlApi.iVolume(System.String,System.Int32,System.Int32)" />
    </member>
    <member name="T:NQuotes.IMqlArray`1">
      <summary>
            Wrapper for MQL arrays passed by pointer.
            </summary>
      <typeparam name="TValue">underlying type</typeparam>
    </member>
    <member name="M:NQuotes.IMqlArray`1.GetLength(System.Int32)">
      <summary>
            The number of elements in the given dimention.
            </summary>
      <param name="dimension">dimention</param>
      <returns>number of elements</returns>
    </member>
    <member name="M:NQuotes.IMqlArray`1.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the array.
            </summary>
      <returns>A IEnumerator that can be used to iterate through the array.</returns>
    </member>
    <member name="M:NQuotes.IMqlArray`1.Resize(System.Int32)">
      <summary>
            Changes the number of elements of an array to the specified new size.
            </summary>
      <param name="newLength1">new length</param>
    </member>
    <member name="M:NQuotes.IMqlArray`1.Maximum(System.Int32,System.Int32)">
      <summary>
            Searches for the element with maximum value. The function returns position of this maximum element in the array.
            </summary>
      <param name="count">The amount of elements to search in.</param>
      <param name="start">Initial search index.</param>
      <returns>Returns position of this maximum element in the array.</returns>
    </member>
    <member name="M:NQuotes.IMqlArray`1.Minimum(System.Int32,System.Int32)">
      <summary>
            Searches for the element with minimum value. The function Searches for the element with minimum value. The function returns position of this minimum element in the array..
            </summary>
      <param name="count">The amount of elements to search in.</param>
      <param name="start">Initial search index.</param>
      <returns>returns position of this minimum element in the array</returns>
    </member>
    <member name="M:NQuotes.IMqlArray`1.Copy(NQuotes.IMqlArray{`0},System.Int32,System.Int32,System.Int32,System.Boolean)">
      <summary>
            Copies an array to another one. Arrays must be of the same type, but arrays with type double[], int[], datetime[], color[], and bool[] can be copied as arrays of the same type.
            </summary>
      <param name="dest">Destination array.</param>
      <param name="start_dest">Starting index for the destination array. By default, start index is 0.</param>
      <param name="start_source">Starting index for the source array. By default, start index is 0.</param>
      <param name="count">The count of elements that should be copied. By default, it is WHOLE_ARRAY constant.</param>
      <param name="isDestResizable">True if the destination array can be resized.</param>
      <returns>Returns the amount of copied elements.</returns>
    </member>
    <member name="P:NQuotes.IMqlArray`1.Item(System.Int32)">
      <summary>
            Element by index.
            </summary>
      <param name="index1">index</param>
      <returns>element</returns>
    </member>
    <member name="P:NQuotes.IMqlArray`1.Item(System.Int32,System.Int32)">
      <summary>
            Element by 2 indexes.
            </summary>
      <param name="index1">index1</param>
      <param name="index2">index2</param>
      <returns>element</returns>
    </member>
    <member name="P:NQuotes.IMqlArray`1.Item(System.Int32,System.Int32,System.Int32)">
      <summary>
            Element by 3 indexes.
            </summary>
      <param name="index1">index1</param>
      <param name="index2">index2</param>
      <param name="index3">index3</param>
      <returns>element</returns>
    </member>
    <member name="P:NQuotes.IMqlArray`1.Item(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
            Element by 4 indexes.
            </summary>
      <param name="index1">index1</param>
      <param name="index2">index2</param>
      <param name="index3">index3</param>
      <param name="index4">index4</param>
      <returns>element</returns>
    </member>
    <member name="P:NQuotes.IMqlArray`1.Length">
      <summary>
            Total number of elements in all the dimensions of the array. 
            </summary>
    </member>
    <member name="P:NQuotes.IMqlArray`1.Rank">
      <summary>
            The number of dimentions in array.
            </summary>
    </member>
    <member name="P:NQuotes.IMqlArray`1.IsAsSeries">
      <summary>
            Returns TRUE if array is organized as a series array (array elements are indexed from the last to the first one), otherwise returns FALSE.
            </summary>
    </member>
    <member name="P:NQuotes.IMqlArray`1.IsSeries">
      <summary>
            Returns TRUE if the array under check is a series array (Time[],Open[],Close[],High[],Low[], or Volume[]), otherwise returns FALSE.
            </summary>
    </member>
    <member name="T:NQuotes.MqlApiConstants">
      <summary>
            MQL API constants.
            Standard MQL constants declaration.
            </summary>
      <example>
            To simplify the access to the constants it's convenient to alias the class.
            <code>
            using C = NQuotes.MqlApiConstants;
            ...
            int period = C.PERIOD_M1; 
            </code></example>
      <seealso>http://docs.mql4.com/constants</seealso>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MODE_OPEN">
      <summary>
            Open price.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MODE_LOW">
      <summary>
            Low price.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MODE_HIGH">
      <summary>
            High price.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MODE_CLOSE">
      <summary>
            Close price.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MODE_VOLUME">
      <summary>
            Volume, used in iLowest() and iHighest() functions.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MODE_TIME">
      <summary>
            Bar open time, used in ArrayCopySeries() function.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.PERIOD_CURRENT">
      <summary>
            Current timeframe
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.PERIOD_M1">
      <summary>
            1 minute
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.PERIOD_M2">
      <summary>
            2 minutes
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.PERIOD_M3">
      <summary>
            3 minutes
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.PERIOD_M4">
      <summary>
            4 minutes
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.PERIOD_M5">
      <summary>
            5 minutes
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.PERIOD_M6">
      <summary>
            6 minutes
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.PERIOD_M10">
      <summary>
            10 minutes
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.PERIOD_M12">
      <summary>
            12 minutes
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.PERIOD_M15">
      <summary>
            15 minutes
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.PERIOD_M20">
      <summary>
            20 minutes
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.PERIOD_M30">
      <summary>
            30 minutes
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.PERIOD_H1">
      <summary>
            1 hour
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.PERIOD_H2">
      <summary>
            2 hours
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.PERIOD_H3">
      <summary>
            3 hours
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.PERIOD_H4">
      <summary>
            4 hours
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.PERIOD_H6">
      <summary>
            6 hours
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.PERIOD_H8">
      <summary>
            8 hours
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.PERIOD_H12">
      <summary>
            12 hours
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.PERIOD_D1">
      <summary>
            1 day
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.PERIOD_W1">
      <summary>
            1 week
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.PERIOD_MN1">
      <summary>
            1 month
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.OP_BUY">
      <summary>
            Buying position.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.OP_SELL">
      <summary>
            Selling position.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.OP_BUYLIMIT">
      <summary>
            Buy limit pending position.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.OP_SELLLIMIT">
      <summary>
            Sell limit pending position.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.OP_BUYSTOP">
      <summary>
            Buy stop pending position.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.OP_SELLSTOP">
      <summary>
            Sell stop pending position.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.PRICE_CLOSE">
      <summary>
            Close price.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.PRICE_OPEN">
      <summary>
            Open price.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.PRICE_HIGH">
      <summary>
            High price.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.PRICE_LOW">
      <summary>
            Low price.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.PRICE_MEDIAN">
      <summary>
            Median price, (high+low)/2.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.PRICE_TYPICAL">
      <summary>
            Typical price, (high+low+close)/3.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.PRICE_WEIGHTED">
      <summary>
            Weighted close price, (high+low+close+close)/4.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MODE_BID">
      <summary>
            Last incoming bid price. For the current symbol, it is stored in the predefined variable Bid
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MODE_ASK">
      <summary>
            Last incoming ask price. For the current symbol, it is stored in the predefined variable Ask
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MODE_POINT">
      <summary>
            Point size in the quote currency. For the current symbol, it is stored in the predefined variable Point
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MODE_DIGITS">
      <summary>
            Count of digits after decimal point in the symbol prices. For the current symbol, it is stored in the predefined variable Digits
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MODE_SPREAD">
      <summary>
            Spread value in points.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MODE_STOPLEVEL">
      <summary>
            Stop level in points.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MODE_LOTSIZE">
      <summary>
            Lot size in the base currency.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MODE_TICKVALUE">
      <summary>
            Tick value in the deposit currency.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MODE_TICKSIZE">
      <summary>
            Tick size in points.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MODE_SWAPLONG">
      <summary>
            Swap of the long position.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MODE_SWAPSHORT">
      <summary>
            Swap of the short position.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MODE_STARTING">
      <summary>
            Market starting date (usually used for futures).
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MODE_EXPIRATION">
      <summary>
            Market expiration date (usually used for futures).
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MODE_TRADEALLOWED">
      <summary>
            Trade is allowed for the symbol.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MODE_MINLOT">
      <summary>
            Minimum permitted amount of a lot.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MODE_LOTSTEP">
      <summary>
            Step for changing lots.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MODE_MAXLOT">
      <summary>
            Maximum permitted amount of a lot.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MODE_SWAPTYPE">
      <summary>
            Swap calculation method. 0 - in points; 1 - in the symbol base currency; 2 - by interest; 3 - in the margin currency.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MODE_PROFITCALCMODE">
      <summary>
            Profit calculation mode. 0 - Forex; 1 - CFD; 2 - Futures.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MODE_MARGINCALCMODE">
      <summary>
            Margin calculation mode. 0 - Forex; 1 - CFD; 2 - Futures; 3 - CFD for indices.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MODE_MARGININIT">
      <summary>
            Initial margin requirements for 1 lot.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MODE_MARGINMAINTENANCE">
      <summary>
            Margin to maintain open positions calculated for 1 lot.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MODE_MARGINHEDGED">
      <summary>
            Hedged margin calculated for 1 lot.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MODE_MARGINREQUIRED">
      <summary>
            Free margin required to open 1 lot for buying.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MODE_FREEZELEVEL">
      <summary>
            Order freeze level in points. If the execution price lies within the range defined by the freeze level, the order cannot be modified, cancelled or closed.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.DRAW_LINE">
      <summary>
            Drawing line.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.DRAW_SECTION">
      <summary>
            Drawing sections.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.DRAW_HISTOGRAM">
      <summary>
            Drawing histogram.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.DRAW_ARROW">
      <summary>
            Drawing arrows (symbols).
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.DRAW_ZIGZAG">
      <summary>
            Drawing sections between even and odd indicator buffers.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.DRAW_NONE">
      <summary>
            No drawing.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.STYLE_SOLID">
      <summary>
            The pen is solid.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.STYLE_DASH">
      <summary>
            The pen is dashed.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.STYLE_DOT">
      <summary>
            The pen is dotted.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.STYLE_DASHDOT">
      <summary>
            The pen has alternating dashes and dots.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.STYLE_DASHDOTDOT">
      <summary>
            The pen has alternating dashes and double dots.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.SYMBOL_THUMBSUP">
      <summary>
            Thumb up symbol (C).
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.SYMBOL_THUMBSDOWN">
      <summary>
            Thumb down symbol (D).
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.SYMBOL_ARROWUP">
      <summary>
            Arrow up symbol (ñ).
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.SYMBOL_ARROWDOWN">
      <summary>
            Arrow down symbol (ò).
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.SYMBOL_STOPSIGN">
      <summary>
            Stop sign symbol (û).
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.SYMBOL_CHECKSIGN">
      <summary>
            Check sign symbol (ü).
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.SYMBOL_1">
      <summary>
            Upwards arrow with tip rightwards (↱).
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.SYMBOL_2">
      <summary>
            Downwards arrow with tip rightwards (↳).
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.SYMBOL_3">
      <summary>
            Left pointing triangle (◄).
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.SYMBOL_4">
      <summary>
            En Dash symbol (–).
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.SYMBOL_LEFTPRICE">
      <summary>
            Left sided price label.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.SYMBOL_RIGHTPRICE">
      <summary>
            Right sided price label.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.White">
      <summary>
            white color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.Snow">
      <summary>
            snow color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MintCream">
      <summary>
            mint cream color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.LavenderBlush">
      <summary>
            lavender blush color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.AliceBlue">
      <summary>
            alice blue color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.Honeydew">
      <summary>
            honeydew color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.Ivory">
      <summary>
            ivory color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.Seashell">
      <summary>
            seashell color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.WhiteSmoke">
      <summary>
            white smoke color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.OldLace">
      <summary>
            old lace color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MistyRose">
      <summary>
            misty rose color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.Lavender">
      <summary>
            lavender color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.Linen">
      <summary>
            linen color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.LightCyan">
      <summary>
            light cyan color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.LightYellow">
      <summary>
            light yellow color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.Cornsilk">
      <summary>
            cornsilk color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.PapayaWhip">
      <summary>
            papaya whip color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.AntiqueWhite">
      <summary>
            antique white color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.Beige">
      <summary>
            beige color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.LemonChiffon">
      <summary>
            lemon chiffon color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.BlanchedAlmond">
      <summary>
            blanched almond color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.LightGoldenrod">
      <summary>
            light goldenrod color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.Bisque">
      <summary>
            bisque color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.Pink">
      <summary>
            pink color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.PeachPuff">
      <summary>
            peach puff color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.Gainsboro">
      <summary>
            gainsboro color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.LightPink">
      <summary>
            light pink color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.Moccasin">
      <summary>
            moccasin color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.NavajoWhite">
      <summary>
            navajo white color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.Wheat">
      <summary>
            wheat color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.LightGray">
      <summary>
            light gray color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.PaleTurquoise">
      <summary>
            pale turquoise color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.PaleGoldenrod">
      <summary>
            pale goldenrod color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.PowderBlue">
      <summary>
            powder blue color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.Thistle">
      <summary>
            thistle color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.PaleGreen">
      <summary>
            pale green color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.LightBlue">
      <summary>
            light blue color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.LightSteelBlue">
      <summary>
            light steel blue color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.LightSkyBlue">
      <summary>
            light sky blue color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.Silver">
      <summary>
            silver color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.Aquamarine">
      <summary>
            aquamarine color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.LightGreen">
      <summary>
            light green color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.Khaki">
      <summary>
            khaki color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.Plum">
      <summary>
            plum color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.LightSalmon">
      <summary>
            light salmon color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.SkyBlue">
      <summary>
            sky blue color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.LightCoral">
      <summary>
            light coral color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.Violet">
      <summary>
            violet color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.Salmon">
      <summary>
            salmon color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.HotPink">
      <summary>
            hot pink color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.BurlyWood">
      <summary>
            burly wood color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.DarkSalmon">
      <summary>
            dark salmon color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.Tan">
      <summary>
            tan color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MediumSlateBlue">
      <summary>
            medium slate blue color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.SandyBrown">
      <summary>
            sandy brown color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.DarkGray">
      <summary>
            dark gray color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CornflowerBlue">
      <summary>
            cornflower blue color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.Coral">
      <summary>
            coral color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.PaleVioletRed">
      <summary>
            pale violet red color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MediumPurple">
      <summary>
            medium purple color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.Orchid">
      <summary>
            orchid color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.RosyBrown">
      <summary>
            rosy brown color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.Tomato">
      <summary>
            tomato color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.DarkSeaGreen">
      <summary>
            dark sea green color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MediumAquamarine">
      <summary>
            medium aquamarine color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.GreenYellow">
      <summary>
            green yellow color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MediumOrchid">
      <summary>
            medium orchid color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.IndianRed">
      <summary>
            indian red color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.DarkKhaki">
      <summary>
            dark khaki color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.SlateBlue">
      <summary>
            slate blue color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.RoyalBlue">
      <summary>
            royal blue color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.Turquoise">
      <summary>
            turquoise color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.DodgerBlue">
      <summary>
            dodger blue color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MediumTurquoise">
      <summary>
            medium turquoise color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.DeepPink">
      <summary>
            deep pink color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.LightSlateGray">
      <summary>
            light slate gray color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.BlueViolet">
      <summary>
            blue violet color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.Peru">
      <summary>
            peru color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.SlateGray">
      <summary>
            slate gray color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.Gray">
      <summary>
            gray color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.Red">
      <summary>
            red color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.Magenta">
      <summary>
            magenta color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.Blue">
      <summary>
            blue color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.DeepSkyBlue">
      <summary>
            deep sky blue color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.Aqua">
      <summary>
            aqua color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.SpringGreen">
      <summary>
            spring green color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.Lime">
      <summary>
            lime color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.Chartreuse">
      <summary>
            chartreuse color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.Yellow">
      <summary>
            yellow color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.Gold">
      <summary>
            gold color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.Orange">
      <summary>
            orange color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.DarkOrange">
      <summary>
            dark orange color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.OrangeRed">
      <summary>
            orange red color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.LimeGreen">
      <summary>
            lime green color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.YellowGreen">
      <summary>
            yellow green color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.DarkOrchid">
      <summary>
            dark orchid color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CadetBlue">
      <summary>
            cadet blue color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.LawnGreen">
      <summary>
            lawn green color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MediumSpringGreen">
      <summary>
            medium spring green color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.Goldenrod">
      <summary>
            goldenrod color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.SteelBlue">
      <summary>
            steel blue color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.Crimson">
      <summary>
            crimson color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.Chocolate">
      <summary>
            chocolate color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MediumSeaGreen">
      <summary>
            medium sea green color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MediumVioletRed">
      <summary>
            medium violet red color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.FireBrick">
      <summary>
            fire brick color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.DarkViolet">
      <summary>
            dark violet color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.LightSeaGreen">
      <summary>
            light sea green color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.DimGray">
      <summary>
            dim gray color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.DarkTurquoise">
      <summary>
            dark turquoise color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.Brown">
      <summary>
            brown color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MediumBlue">
      <summary>
            medium blue color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.Sienna">
      <summary>
            sienna color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.DarkSlateBlue">
      <summary>
            dark slate blue color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.DarkGoldenrod">
      <summary>
            dark goldenrod color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.SeaGreen">
      <summary>
            sea green color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.OliveDrab">
      <summary>
            olive drab color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ForestGreen">
      <summary>
            forest green color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.SaddleBrown">
      <summary>
            saddle brown color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.DarkOliveGreen">
      <summary>
            dark olive green color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.DarkBlue">
      <summary>
            dark blue color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MidnightBlue">
      <summary>
            midnight blue color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.Indigo">
      <summary>
            indigo color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.Maroon">
      <summary>
            maroon color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.Purple">
      <summary>
            purple color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.Navy">
      <summary>
            navy color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.Teal">
      <summary>
            teal color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.Green">
      <summary>
            green color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.Olive">
      <summary>
            olive color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.DarkSlateGray">
      <summary>
            dark slate gray color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.DarkGreen">
      <summary>
            dark green color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.Black">
      <summary>
            black color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MODE_MAIN">
      <summary>
            Base indicator line.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MODE_SIGNAL">
      <summary>
            Signal line.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MODE_PLUSDI">
      <summary>
            +DI indicator line.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MODE_MINUSDI">
      <summary>
            -DI indicator line.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MODE_UPPER">
      <summary>
            Upper line.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MODE_LOWER">
      <summary>
            Lower line.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MODE_TENKANSEN">
      <summary>
            Tenkan-sen.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MODE_KIJUNSEN">
      <summary>
            Kijun-sen.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MODE_SENKOUSPANA">
      <summary>
            Senkou Span A.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MODE_SENKOUSPANB">
      <summary>
            Senkou Span B.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MODE_CHINKOUSPAN">
      <summary>
            Chinkou Span.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MODE_SMA">
      <summary>
            Simple moving average,
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MODE_EMA">
      <summary>
            Exponential moving average,
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MODE_SMMA">
      <summary>
            Smoothed moving average,
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MODE_LWMA">
      <summary>
            Linear weighted moving average.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.IDOK">
      <summary>
            OK button was selected.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.IDCANCEL">
      <summary>
            Cancel button was selected.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.IDABORT">
      <summary>
            Abort button was selected.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.IDRETRY">
      <summary>
            Retry button was selected.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.IDIGNORE">
      <summary>
            Ignore button was selected.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.IDYES">
      <summary>
            Yes button was selected.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.IDNO">
      <summary>
            No button was selected.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.IDTRYAGAIN">
      <summary>
            Try Again button was selected.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.IDCONTINUE">
      <summary>
            Continue button was selected.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MB_OK">
      <summary>
            The message box contains one push button: OK. This is the default.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MB_OKCANCEL">
      <summary>
            The message box contains two push buttons: OK and Cancel.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MB_ABORTRETRYIGNORE">
      <summary>
            The message box contains three push buttons: Abort, Retry, and Ignore.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MB_YESNOCANCEL">
      <summary>
            The message box contains three push buttons: Yes, No, and Cancel.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MB_YESNO">
      <summary>
            The message box contains two push buttons: Yes and No.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MB_RETRYCANCEL">
      <summary>
            The message box contains two push buttons: Retry and Cancel.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MB_CANCELTRYCONTINUE">
      <summary>
            Windows 2000: The message box contains three push buttons: Cancel, Try Again, Continue. Use this message box type instead of MB_ABORTRETRYIGNORE.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MB_ICONSTOP">
      <summary>
            A stop-sign icon appears in the message box.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MB_ICONERROR">
      <summary>
            A stop-sign icon appears in the message box.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MB_ICONHAND">
      <summary>
            A stop-sign icon appears in the message box.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MB_ICONQUESTION">
      <summary>
            A question-mark icon appears in the message box.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MB_ICONEXCLAMATION">
      <summary>
            An exclamation-point icon appears in the message box.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MB_ICONWARNING">
      <summary>
            An exclamation-point icon appears in the message box.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MB_ICONINFORMATION">
      <summary>
            An icon consisting of a lowercase letter i in a circle appears in the message box.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MB_ICONASTERISK">
      <summary>
            An icon consisting of a lowercase letter i in a circle appears in the message box.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MB_DEFBUTTON1">
      <summary>
            The first button is the default button. MB_DEFBUTTON1 is the default unless MB_DEFBUTTON2, MB_DEFBUTTON3, or MB_DEFBUTTON4 is specified.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MB_DEFBUTTON2">
      <summary>
            The second button is the default button.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MB_DEFBUTTON3">
      <summary>
            The third button is the default button.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MB_DEFBUTTON4">
      <summary>
            The fourth button is the default button.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.OBJ_VLINE">
      <summary>
            Vertical line. Uses time part of first coordinate.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.OBJ_HLINE">
      <summary>
            Horizontal line. Uses price part of first coordinate.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.OBJ_TREND">
      <summary>
            Trend line. Uses 2 coordinates.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.OBJ_TRENDBYANGLE">
      <summary>
            Trend by angle. Uses 1 coordinate. To set angle of line use ObjectSet() function.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.OBJ_REGRESSION">
      <summary>
            Regression. Uses time parts of first two coordinates.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.OBJ_CHANNEL">
      <summary>
            Channel. Uses 3 coordinates.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.OBJ_STDDEVCHANNEL">
      <summary>
            Standard deviation channel. Uses time parts of first two coordinates.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.OBJ_GANNLINE">
      <summary>
            Gann line. Uses 2 coordinate, but price part of second coordinate ignored.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.OBJ_GANNFAN">
      <summary>
            Gann fan. Uses 2 coordinate, but price part of second coordinate ignored.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.OBJ_GANNGRID">
      <summary>
            Gann grid. Uses 2 coordinate, but price part of second coordinate ignored.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.OBJ_FIBO">
      <summary>
            Fibonacci retracement. Uses 2 coordinates.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.OBJ_FIBOTIMES">
      <summary>
            Fibonacci time zones. Uses 2 coordinates.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.OBJ_FIBOFAN">
      <summary>
            Fibonacci fan. Uses 2 coordinates.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.OBJ_FIBOARC">
      <summary>
            Fibonacci arcs. Uses 2 coordinates.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.OBJ_EXPANSION">
      <summary>
            Fibonacci expansions. Uses 3 coordinates.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.OBJ_FIBOCHANNEL">
      <summary>
            Fibonacci channel. Uses 3 coordinates.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.OBJ_RECTANGLE">
      <summary>
            Rectangle. Uses 2 coordinates.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.OBJ_TRIANGLE">
      <summary>
            Triangle. Uses 3 coordinates.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.OBJ_ELLIPSE">
      <summary>
            Ellipse. Uses 2 coordinates.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.OBJ_PITCHFORK">
      <summary>
            Andrews pitchfork. Uses 3 coordinates.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.OBJ_CYCLES">
      <summary>
            Cycles. Uses 2 coordinates.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.OBJ_TEXT">
      <summary>
            Text. Uses 1 coordinate.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.OBJ_ARROW">
      <summary>
            Arrows. Uses 1 coordinate.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.OBJ_LABEL">
      <summary>
            Text label. Uses 1 coordinate in pixels.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.OBJPROP_TIME1">
      <summary>
            datetime	Datetime value to set/get first coordinate time part.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.OBJPROP_PRICE1">
      <summary>
            double	Double value to set/get first coordinate price part.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.OBJPROP_TIME2">
      <summary>
            datetime	Datetime value to set/get second coordinate time part.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.OBJPROP_PRICE2">
      <summary>
            double	Double value to set/get second coordinate price part.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.OBJPROP_TIME3">
      <summary>
            datetime	Datetime value to set/get third coordinate time part.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.OBJPROP_PRICE3">
      <summary>
            double	Double value to set/get third coordinate price part.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.OBJPROP_COLOR">
      <summary>
            color	Color value to set/get object color.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.OBJPROP_STYLE">
      <summary>
            int	Value is one of STYLE_SOLID, STYLE_DASH, STYLE_DOT, STYLE_DASHDOT, STYLE_DASHDOTDOT constants to set/get object line style.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.OBJPROP_WIDTH">
      <summary>
            int	Integer value to set/get object line width. Can be from 1 to 5.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.OBJPROP_BACK">
      <summary>
            bool	Boolean value to set/get background drawing flag for object.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.OBJPROP_RAY">
      <summary>
            bool	Boolean value to set/get ray flag of object.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.OBJPROP_ELLIPSE">
      <summary>
            bool	Boolean value to set/get ellipse flag for fibo arcs.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.OBJPROP_SCALE">
      <summary>
            double	Double value to set/get scale object property.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.OBJPROP_ANGLE">
      <summary>
            double	Double value to set/get angle object property in degrees.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.OBJPROP_ARROWCODE">
      <summary>
            int	Integer value or arrow enumeration to set/get arrow code object property.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.OBJPROP_TIMEFRAMES">
      <summary>
            int	Value can be one or combination (bitwise addition) of object visibility constants to set/get timeframe object property.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.OBJPROP_DEVIATION">
      <summary>
            double	Double value to set/get deviation property for Standard deviation objects.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.OBJPROP_FONTSIZE">
      <summary>
            int	Integer value to set/get font size for text objects.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.OBJPROP_CORNER">
      <summary>
            int	Integer value to set/get anchor corner property for label objects. Must be from 0-3.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.OBJPROP_XDISTANCE">
      <summary>
            int	Integer value to set/get anchor X distance object property in pixels.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.OBJPROP_YDISTANCE">
      <summary>
            int	Integer value is to set/get anchor Y distance object property in pixels.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.OBJPROP_FIBOLEVELS">
      <summary>
            int	Integer value to set/get Fibonacci object level count. Can be from 0 to 32.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.OBJPROP_LEVELCOLOR">
      <summary>
            color	Color value to set/get object level line color.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.OBJPROP_LEVELSTYLE">
      <summary>
            int	Value is one of STYLE_SOLID, STYLE_DASH, STYLE_DOT, STYLE_DASHDOT, STYLE_DASHDOTDOT constants to set/get object level line style.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.OBJPROP_LEVELWIDTH">
      <summary>
            int	Integer value to set/get object level line width. Can be from 1 to 5.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.OBJPROP_FIRSTLEVEL">
      <summary>
            int	Integer value to set/get the value of Fibonacci object level with index n. Index n can be from 0 (number of levels -1), but not larger than 31.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.OBJ_PERIOD_M1">
      <summary>
            Object shown is only on 1-minute charts.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.OBJ_PERIOD_M5">
      <summary>
            Object shown is only on 5-minute charts.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.OBJ_PERIOD_M15">
      <summary>
            Object shown is only on 15-minute charts.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.OBJ_PERIOD_M30">
      <summary>
            Object shown is only on 30-minute charts.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.OBJ_PERIOD_H1">
      <summary>
            Object shown is only on 1-hour charts.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.OBJ_PERIOD_H4">
      <summary>
            Object shown is only on 4-hour charts.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.OBJ_PERIOD_D1">
      <summary>
            Object shown is only on daily charts.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.OBJ_PERIOD_W1">
      <summary>
            Object shown is only on weekly charts.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.OBJ_PERIOD_MN1">
      <summary>
            Object shown is only on monthly charts.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.OBJ_ALL_PERIODS">
      <summary>
            Object shown is on all timeframes.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.NULL">
      <summary>
            Object shown is on all timeframes.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.EMPTY">
      <summary>
            Hidden object on all timeframes.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.REASON_0">
      <summary>
            Script finished its execution independently.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.REASON_REMOVE">
      <summary>
            Expert removed from chart.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.REASON_RECOMPILE">
      <summary>
            Expert recompiled.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.REASON_CHARTCHANGE">
      <summary>
            symbol or timeframe changed on the chart.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.REASON_CHARTCLOSE">
      <summary>
            Chart closed.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.REASON_PARAMETERS">
      <summary>
            Inputs parameters was changed by user.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.REASON_ACCOUNT">
      <summary>
            Other account activated.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.EMPTY_VALUE">
      <summary>
            Default custom indicator empty value.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CLR_NONE">
      <summary>
            Indicates empty state of colors. 0xFFFFFFFF
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.WHOLE_ARRAY">
      <summary>
            Used with array functions. Indicates that all array elements will be processed.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_NO_ERROR">
      <summary>
            No error returned.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_NO_RESULT">
      <summary>
            No error returned, but the result is unknown.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_COMMON_ERROR">
      <summary>
            Common error.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_INVALID_TRADE_PARAMETERS">
      <summary>
            Invalid trade parameters.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_SERVER_BUSY">
      <summary>
            Trade server is busy.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_OLD_VERSION">
      <summary>
            Old version of the client terminal.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_NO_CONNECTION">
      <summary>
            No connection with trade server.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_NOT_ENOUGH_RIGHTS">
      <summary>
            Not enough rights.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_TOO_FREQUENT_REQUESTS">
      <summary>
            Too frequent requests.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_MALFUNCTIONAL_TRADE">
      <summary>
            Malfunctional trade operation.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_ACCOUNT_DISABLED">
      <summary>
            Account disabled.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_INVALID_ACCOUNT">
      <summary>
            Invalid account.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_TRADE_TIMEOUT">
      <summary>
            Trade timeout.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_INVALID_PRICE">
      <summary>
            Invalid price.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_INVALID_STOPS">
      <summary>
            Invalid stops.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_INVALID_TRADE_VOLUME">
      <summary>
            Invalid trade volume.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_MARKET_CLOSED">
      <summary>
            Market is closed.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_TRADE_DISABLED">
      <summary>
            Trade is disabled.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_NOT_ENOUGH_MONEY">
      <summary>
            Not enough money.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_PRICE_CHANGED">
      <summary>
            Price changed.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_OFF_QUOTES">
      <summary>
            Off quotes.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_BROKER_BUSY">
      <summary>
            Broker is busy.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_REQUOTE">
      <summary>
            Requote.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_ORDER_LOCKED">
      <summary>
            Order is locked.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_LONG_POSITIONS_ONLY_ALLOWED">
      <summary>
            Long positions only allowed.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_TOO_MANY_REQUESTS">
      <summary>
            Too many requests.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_TRADE_MODIFY_DENIED">
      <summary>
            Modification denied because order too close to market.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_TRADE_CONTEXT_BUSY">
      <summary>
            Trade context is busy.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_TRADE_EXPIRATION_DENIED">
      <summary>
            Expirations are denied by broker.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_TRADE_TOO_MANY_ORDERS">
      <summary>
            The amount of open and pending orders has reached the limit set by the broker.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_TRADE_HEDGE_PROHIBITED">
      <summary>
            An attempt to open a position opposite to the existing one when hedging is disabled.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_TRADE_PROHIBITED_BY_FIFO">
      <summary>
            An attempt to close a position contravening the FIFO rule.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_NO_MQLERROR">
      <summary>
            No error.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_WRONG_FUNCTION_POINTER">
      <summary>
            Wrong function pointer.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_ARRAY_INDEX_OUT_OF_RANGE">
      <summary>
            Array index is out of range.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_NO_MEMORY_FOR_CALL_STACK">
      <summary>
            No memory for function call stack.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_RECURSIVE_STACK_OVERFLOW">
      <summary>
            Recursive stack overflow.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_NOT_ENOUGH_STACK_FOR_PARAM">
      <summary>
            Not enough stack for parameter.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_NO_MEMORY_FOR_PARAM_STRING">
      <summary>
            No memory for parameter string.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_NO_MEMORY_FOR_TEMP_STRING">
      <summary>
            No memory for temp string.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_NOT_INITIALIZED_STRING">
      <summary>
            Not initialized string.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_NOT_INITIALIZED_ARRAYSTRING">
      <summary>
            Not initialized string in array.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_NO_MEMORY_FOR_ARRAYSTRING">
      <summary>
            No memory for array string.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_TOO_LONG_STRING">
      <summary>
            Too long string.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_REMAINDER_FROM_ZERO_DIVIDE">
      <summary>
            Remainder from zero divide.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_ZERO_DIVIDE">
      <summary>
            Zero divide.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_UNKNOWN_COMMAND">
      <summary>
            Unknown command.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_WRONG_JUMP">
      <summary>
            Wrong jump (never generated error).
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_NOT_INITIALIZED_ARRAY">
      <summary>
            Not initialized array.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_DLL_CALLS_NOT_ALLOWED">
      <summary>
            DLL calls are not allowed.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_CANNOT_LOAD_LIBRARY">
      <summary>
            Cannot load library.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_CANNOT_CALL_FUNCTION">
      <summary>
            Cannot call function.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_EXTERNAL_CALLS_NOT_ALLOWED">
      <summary>
            Expert function calls are not allowed.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_NO_MEMORY_FOR_RETURNED_STR">
      <summary>
            Not enough memory for temp string returned from function.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_SYSTEM_BUSY">
      <summary>
            System is busy (never generated error).
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_INVALID_FUNCTION_PARAMSCNT">
      <summary>
            Invalid function parameters count.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_INVALID_FUNCTION_PARAMVALUE">
      <summary>
            Invalid function parameter value.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_STRING_FUNCTION_INTERNAL">
      <summary>
            String function internal error.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_SOME_ARRAY_ERROR">
      <summary>
            Some array error.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_INCORRECT_SERIESARRAY_USING">
      <summary>
            Incorrect series array using.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_CUSTOM_INDICATOR_ERROR">
      <summary>
            Custom indicator error.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_INCOMPATIBLE_ARRAYS">
      <summary>
            Arrays are incompatible.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_GLOBAL_VARIABLES_PROCESSING">
      <summary>
            Global variables processing error.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_GLOBAL_VARIABLE_NOT_FOUND">
      <summary>
            Global variable not found.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_FUNC_NOT_ALLOWED_IN_TESTING">
      <summary>
            Function is not allowed in testing mode.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_FUNCTION_NOT_CONFIRMED">
      <summary>
            Function is not confirmed.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_SEND_MAIL_ERROR">
      <summary>
            Send mail error.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_STRING_PARAMETER_EXPECTED">
      <summary>
            String parameter expected.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_INTEGER_PARAMETER_EXPECTED">
      <summary>
            Integer parameter expected.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_DOUBLE_PARAMETER_EXPECTED">
      <summary>
            Double parameter expected.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_ARRAY_AS_PARAMETER_EXPECTED">
      <summary>
            Array as parameter expected.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_HISTORY_WILL_UPDATED">
      <summary>
            Requested history data in updating state.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_TRADE_ERROR">
      <summary>
            Some error in trading function.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_END_OF_FILE">
      <summary>
            End of file.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_SOME_FILE_ERROR">
      <summary>
            Some file error.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_WRONG_FILE_NAME">
      <summary>
            Wrong file name.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_TOO_MANY_OPENED_FILES">
      <summary>
            Too many opened files.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_CANNOT_OPEN_FILE">
      <summary>
            Cannot open file.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_INCOMPATIBLE_FILEACCESS">
      <summary>
            Incompatible access to a file.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_NO_ORDER_SELECTED">
      <summary>
            No order selected.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_UNKNOWN_SYMBOL">
      <summary>
            Unknown symbol.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_INVALID_PRICE_PARAM">
      <summary>
            Invalid price.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_INVALID_TICKET">
      <summary>
            Invalid ticket.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_TRADE_NOT_ALLOWED">
      <summary>
            Trade is not allowed. Enable checkbox "Allow live trading" in the expert properties.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_LONGS_NOT_ALLOWED">
      <summary>
            Longs are not allowed. Check the expert properties.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_SHORTS_NOT_ALLOWED">
      <summary>
            Shorts are not allowed. Check the expert properties.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_OBJECT_ALREADY_EXISTS">
      <summary>
            Object exists already.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_UNKNOWN_OBJECT_PROPERTY">
      <summary>
            Unknown object property.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_OBJECT_DOES_NOT_EXIST">
      <summary>
            Object does not exist.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_UNKNOWN_OBJECT_TYPE">
      <summary>
            Unknown object type.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_NO_OBJECT_NAME">
      <summary>
            No object name.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_OBJECT_COORDINATES_ERROR">
      <summary>
            Object coordinates error.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_NO_SPECIFIED_SUBWINDOW">
      <summary>
            No specified subwindow.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ERR_SOME_OBJECT_ERROR">
      <summary>
            Some error in object function.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MODE_ASCEND">
      <summary>
            searching in forward direction
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MODE_DESCEND">
      <summary>
            searching in backward direction
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.TIME_DATE">
      <summary>
            date
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.TIME_MINUTES">
      <summary>
            minutes
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.TIME_SECONDS">
      <summary>
            seconds
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.SEEK_SET">
      <summary>
            from begin
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.SEEK_CUR">
      <summary>
            from current position
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.SEEK_END">
      <summary>
            from end of file
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.FILE_READ">
      <summary>
            read
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.FILE_WRITE">
      <summary>
            write
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.FILE_BIN">
      <summary>
            binary
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.FILE_CSV">
      <summary>
            CSV
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CHAR_VALUE">
      <summary>
            char
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.SHORT_VALUE">
      <summary>
            short
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.LONG_VALUE">
      <summary>
            long
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.FLOAT_VALUE">
      <summary>
            float
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.DOUBLE_VALUE">
      <summary>
            double
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.SELECT_BY_POS">
      <summary>
            index in the order pool
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.SELECT_BY_TICKET">
      <summary>
            index is order ticket
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MODE_TRADES">
      <summary>
            order selected from trading pool(opened and pending orders)
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MODE_HISTORY">
      <summary>
            order selected from history pool (closed and canceled order)
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MODE_GATORJAW">
      <summary>
            Gator Jaw (blue) balance line
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MODE_GATORTEETH">
      <summary>
            Gator Teeth (red) balance line
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MODE_GATORLIPS">
      <summary>
            Gator Lips (green) balance line.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CORNER_LEFT_UPPER">
      <summary>
            Center of coordinates is in the upper left corner of the chart
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CORNER_RIGHT_UPPER">
      <summary>
            Center of coordinates is in the upper right corner of the chart
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CORNER_LEFT_LOWER">
      <summary>
            Center of coordinates is in the lower left corner of the chart
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CORNER_RIGHT_LOWER">
      <summary>
            Center of coordinates is in the lower right corner of the chart
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CHARTEVENT_KEYDOWN">
      <summary>
            Keystrokes
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CHARTEVENT_OBJECT_CLICK">
      <summary>
            Clicking on a graphical object
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CHARTEVENT_OBJECT_DRAG">
      <summary>
            Drag and drop of a graphical object
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CHARTEVENT_OBJECT_ENDEDIT">
      <summary>
            End of text editing in the graphical object Edit
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CHARTEVENT_CLICK">
      <summary>
            Clicking on a chart
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CHARTEVENT_OBJECT_DELETE">
      <summary>
            Graphical object deleted (if CHART_EVENT_OBJECT_DELETE=true is set for the chart)
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CHARTEVENT_OBJECT_CREATE">
      <summary>
            Graphical object created (if CHART_EVENT_OBJECT_CREATE=true is set for the chart)
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CHARTEVENT_OBJECT_CHANGE">
      <summary>
            Graphical object property changed via the properties dialog
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CHARTEVENT_CHART_CHANGE">
      <summary>
            Change of the chart size or modification of chart properties through the Properties dialog
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CHARTEVENT_MOUSE_MOVE">
      <summary>
            Mouse move, mouse clicks (if CHART_EVENT_MOUSE_MOVE=true is set for the chart)
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CHARTEVENT_CUSTOM">
      <summary>
            Initial number of an event from a range of custom events
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CHARTEVENT_CUSTOM_LAST">
      <summary>
            The final number of an event from a range of custom events
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CHART_BEGIN">
      <summary>
            Chart beginning (the oldest prices)
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CHART_CURRENT_POS">
      <summary>
            Current position
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CHART_END">
      <summary>
            Chart end (the latest prices)
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CHART_BARS">
      <summary>
            Display as a sequence of bars
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CHART_CANDLES">
      <summary>
            Display as Japanese candlesticks
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CHART_LINE">
      <summary>
            Display as a line drawn by Close prices
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CHART_VOLUME_HIDE">
      <summary>
            Volumes are not shown
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CHART_VOLUME_TICK">
      <summary>
            Tick volumes
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CHART_VOLUME_REAL">
      <summary>
            Trade volumes
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CHART_IS_OBJECT">
      <summary>
            Identifying "Chart" (OBJ_CHART) object  returns true for a graphical object. Returns false for a real chart
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CHART_BRING_TO_TOP">
      <summary>
            Show chart on top of other charts
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CHART_MOUSE_SCROLL">
      <summary>
            Scrolling the chart horizontally using the left mouse button. Vertical scrolling is also available if the value of any following properties is set to true: CHART_SCALEFIX, CHART_SCALEFIX_11 or CHART_SCALE_PT_PER_BAR
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CHART_EVENT_MOUSE_MOVE">
      <summary>
            Send notifications of mouse move and mouse click events (CHARTEVENT_MOUSE_MOVE) to all mql4 programs on a chart
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CHART_EVENT_OBJECT_CREATE">
      <summary>
            Send a notification of an event of new object creation (CHARTEVENT_OBJECT_CREATE) to all mql4-programs on a chart
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CHART_EVENT_OBJECT_DELETE">
      <summary>
            Send a notification of an event of object deletion (CHARTEVENT_OBJECT_DELETE) to all mql4-programs on a chart
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CHART_MODE">
      <summary>
            Chart type (candlesticks, bars or line)
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CHART_FOREGROUND">
      <summary>
            Price chart in the foreground
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CHART_SHIFT">
      <summary>
            Mode of price chart indent from the right border
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CHART_AUTOSCROLL">
      <summary>
            Mode of automatic moving to the right border of the chart
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CHART_SCALE">
      <summary>
            Scale
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CHART_SCALEFIX">
      <summary>
            Fixed scale mode
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CHART_SCALEFIX_11">
      <summary>
            Scale 1:1 mode
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CHART_SCALE_PT_PER_BAR">
      <summary>
            Scale to be specified in points per bar
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CHART_SHOW_OHLC">
      <summary>
            Show OHLC values in the upper left corner
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CHART_SHOW_BID_LINE">
      <summary>
            Display Bid values as a horizontal line in a chart
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CHART_SHOW_ASK_LINE">
      <summary>
            Display Ask values as a horizontal line in a chart
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CHART_SHOW_LAST_LINE">
      <summary>
            Display Last values as a horizontal line in a chart
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CHART_SHOW_PERIOD_SEP">
      <summary>
            Display vertical separators between adjacent periods
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CHART_SHOW_GRID">
      <summary>
            Display grid in the chart
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CHART_SHOW_VOLUMES">
      <summary>
            Display volume in the chart
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CHART_SHOW_OBJECT_DESCR">
      <summary>
            Pop-up descriptions of graphical objects
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CHART_VISIBLE_BARS">
      <summary>
            The number of bars on the chart that can be displayed
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CHART_WINDOWS_TOTAL">
      <summary>
            The total number of chart windows, including indicator subwindows
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CHART_WINDOW_IS_VISIBLE">
      <summary>
            Visibility of subwindows
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CHART_WINDOW_HANDLE">
      <summary>
            Chart window handle (HWND)
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CHART_WINDOW_YDISTANCE">
      <summary>
            The distance between the upper frame of the indicator subwindow and the upper frame of the main chart window, along the vertical Y axis, in pixels. In case of a mouse event, the cursor coordinates are passed in terms of the coordinates of the main chart window, while the coordinates of graphical objects in an indicator subwindow are set relative to the upper left corner of the subwindow.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CHART_FIRST_VISIBLE_BAR">
      <summary>
            Number of the first visible bar in the chart. Indexing of bars is the same as for timeseries.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CHART_WIDTH_IN_BARS">
      <summary>
            Chart width in bars
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CHART_WIDTH_IN_PIXELS">
      <summary>
            Chart width in pixels
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CHART_HEIGHT_IN_PIXELS">
      <summary>
            Chart height in pixels
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CHART_COLOR_BACKGROUND">
      <summary>
            Chart background color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CHART_COLOR_FOREGROUND">
      <summary>
            Color of axes, scales and OHLC line
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CHART_COLOR_GRID">
      <summary>
            Grid color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CHART_COLOR_VOLUME">
      <summary>
            Color of volumes and order opening levels
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CHART_COLOR_CHART_UP">
      <summary>
            Color for the up bar, shadows and body borders of bull candlesticks
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CHART_COLOR_CHART_DOWN">
      <summary>
            Color for the down bar, shadows and body borders of bear candlesticks
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CHART_COLOR_CHART_LINE">
      <summary>
            Line chart color and color of "Doji" Japanese candlesticks
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CHART_COLOR_CANDLE_BULL">
      <summary>
            Body color of a bull candlestick
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CHART_COLOR_CANDLE_BEAR">
      <summary>
            Body color of a bear candlestick
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CHART_COLOR_BID">
      <summary>
            Bid price level color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CHART_COLOR_ASK">
      <summary>
            Ask price level color
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CHART_COLOR_LAST">
      <summary>
            Line color of the last executed deal price (Last)
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CHART_COLOR_STOP_LEVEL">
      <summary>
            Color of stop order levels (Stop Loss and Take Profit)
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CHART_SHOW_TRADE_LEVELS">
      <summary>
            Displaying trade levels in the chart (levels of open orders, Stop Loss, Take Profit and pending orders)
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CHART_DRAG_TRADE_LEVELS">
      <summary>
            Permission to drag trading levels on a chart with a mouse. The drag mode is enabled by default (true value)
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CHART_SHOW_DATE_SCALE">
      <summary>
            Showing the time scale on a chart
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CHART_SHOW_PRICE_SCALE">
      <summary>
            Showing the price scale on a chart
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CHART_IS_OFFLINE">
      <summary>
            Flag, indicating that chart opened in offline mode
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CHART_SHIFT_SIZE">
      <summary>
            The size of the zero bar indent from the right border in percents
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CHART_FIXED_POSITION">
      <summary>
            Chart fixed position from the left border in percent value. Chart fixed position is marked by a small gray triangle on the horizontal time axis. It is displayed only if the automatic chart scrolling to the right on tick incoming is disabled (see CHART_AUTOSCROLL property). The bar on a fixed position remains in the same place when zooming in and out.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CHART_FIXED_MAX">
      <summary>
            Fixed  chart maximum
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CHART_FIXED_MIN">
      <summary>
            Fixed  chart minimum
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CHART_POINTS_PER_BAR">
      <summary>
            Scale in points per bar
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CHART_PRICE_MIN">
      <summary>
            Chart minimum
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CHART_PRICE_MAX">
      <summary>
            Chart maximum
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CHART_COMMENT">
      <summary>
            Text of a comment in a chart
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ACCOUNT_BALANCE">
      <summary>
            Account balance in the deposit currency
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ACCOUNT_CREDIT">
      <summary>
            Account credit in the deposit currency
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ACCOUNT_PROFIT">
      <summary>
            Current profit of an account in the deposit currency
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ACCOUNT_EQUITY">
      <summary>
            Account equity in the deposit currency
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ACCOUNT_MARGIN">
      <summary>
            Account margin used in the deposit currency
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ACCOUNT_FREEMARGIN">
      <summary>
            Free margin of an account in the deposit currency
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ACCOUNT_MARGIN_LEVEL">
      <summary>
            Account margin level in percents
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ACCOUNT_MARGIN_SO_CALL">
      <summary>
            Margin call level. Depending on the set ACCOUNT_MARGIN_SO_MODE is expressed in percents or in the deposit currency
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ACCOUNT_MARGIN_SO_SO">
      <summary>
            Margin stop out level. Depending on the set ACCOUNT_MARGIN_SO_MODE is expressed in percents or in the deposit currency
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ACCOUNT_LOGIN">
      <summary>
            Account number
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ACCOUNT_TRADE_MODE">
      <summary>
            Account trade mode
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ACCOUNT_LEVERAGE">
      <summary>
            Account leverage
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ACCOUNT_LIMIT_ORDERS">
      <summary>
            Maximum allowed number of active pending orders (0-unlimited)
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ACCOUNT_MARGIN_SO_MODE">
      <summary>
            Mode for setting the minimal allowed margin
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ACCOUNT_TRADE_ALLOWED">
      <summary>
            Allowed trade for the current account
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ACCOUNT_TRADE_EXPERT">
      <summary>
            Allowed trade for an Expert Advisor
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ACCOUNT_NAME">
      <summary>
            Client name
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ACCOUNT_SERVER">
      <summary>
            Trade server name
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ACCOUNT_CURRENCY">
      <summary>
            Account currency
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ACCOUNT_COMPANY">
      <summary>
            Name of a company that serves the account
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ACCOUNT_TRADE_MODE_DEMO">
      <summary>
            Demo account
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ACCOUNT_TRADE_MODE_CONTEST">
      <summary>
            Contest account
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ACCOUNT_TRADE_MODE_REAL">
      <summary>
            Real account
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ACCOUNT_STOPOUT_MODE_PERCENT">
      <summary>
            Account stop out mode in percents
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ACCOUNT_STOPOUT_MODE_MONEY">
      <summary>
            Account stop out mode in money
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.BORDER_FLAT">
      <summary>
            Flat form
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.BORDER_RAISED">
      <summary>
            Prominent form
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.BORDER_SUNKEN">
      <summary>
            Concave form
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ALIGN_LEFT">
      <summary>
            Left alignment
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ALIGN_CENTER">
      <summary>
            Centered (only for the Edit object)
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.ALIGN_RIGHT">
      <summary>
            Right alignment
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MQL_PROGRAM_TYPE">
      <summary>
            Type of the MQL4 program
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MQL_DLLS_ALLOWED">
      <summary>
            The permission to use DLL for the given executed program
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MQL_TRADE_ALLOWED">
      <summary>
            The permission to trade for the given executed program
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MQL_SIGNALS_ALLOWED">
      <summary>
            The permission to modify the Signals for the given executed program
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MQL_DEBUG">
      <summary>
            The flag, that indicates the debug mode
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MQL_PROFILER">
      <summary>
            The flag, that indicates the program operating in the code profiling mode
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MQL_TESTER">
      <summary>
            The flag, that indicates the tester process
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MQL_OPTIMIZATION">
      <summary>
            The flag, that indicates the optimization process
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MQL_VISUAL_MODE">
      <summary>
            The flag, that indicates the visual tester process
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MQL_FRAME_MODE">
      <summary>
            The flag, that indicates the Expert Advisor operating in gathering optimization result frames mode
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MQL_LICENSE_TYPE">
      <summary>
            Type of license of the EX4 module. The license refers to the EX4 module, from which a request is made using MQLInfoInteger(MQL_LICENSE_TYPE).
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MQL_PROGRAM_NAME">
      <summary>
            Name of the MQL4-program executed
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.MQL_PROGRAM_PATH">
      <summary>
            Path for the given executed program
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.PROGRAM_SCRIPT">
      <summary>
            Script
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.PROGRAM_EXPERT">
      <summary>
            Expert
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.PROGRAM_INDICATOR">
      <summary>
            Indicator
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.LICENSE_FREE">
      <summary>
            A free unlimited version
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.LICENSE_DEMO">
      <summary>
            A trial version of a paid product from the Market. It works only in the strategy tester
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.LICENSE_FULL">
      <summary>
            A purchased licensed version allows at least 5 activations. The number of activations is specified by seller. Seller may increase the allowed number of activations
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.LICENSE_TIME">
      <summary>
            A version with limited term liсense
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.TERMINAL_BUILD">
      <summary>
            The client terminal build number
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.TERMINAL_COMMUNITY_ACCOUNT">
      <summary>
            The flag indicates the presence of MQL5.community authorization data in the terminal
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.TERMINAL_COMMUNITY_CONNECTION">
      <summary>
            Connection to MQL5.community
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.TERMINAL_CONNECTED">
      <summary>
            Connection to a trade server
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.TERMINAL_DLLS_ALLOWED">
      <summary>
            Permission to use DLL
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.TERMINAL_TRADE_ALLOWED">
      <summary>
            Permission to trade
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.TERMINAL_EMAIL_ENABLED">
      <summary>
            Permission to send e-mails using SMTP-server and login, specified in the terminal settings
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.TERMINAL_FTP_ENABLED">
      <summary>
            Permission to send reports using FTP-server and login, specified in the terminal settings
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.TERMINAL_NOTIFICATIONS_ENABLED">
      <summary>
            Permission to send notifications to smartphone
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.TERMINAL_MAXBARS">
      <summary>
            The maximal bars count on the chart
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.TERMINAL_MQID">
      <summary>
            The flag indicates the presence of MetaQuotes ID data to send Push notifications
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.TERMINAL_CODEPAGE">
      <summary>
            Number of the code page of the language installed in the client terminal
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.TERMINAL_CPU_CORES">
      <summary>
            The number of CPU cores in the system
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.TERMINAL_DISK_SPACE">
      <summary>
            Free disk space for the MQL4\Files folder of the terminal (agent), MB
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.TERMINAL_MEMORY_PHYSICAL">
      <summary>
            Physical memory in the system, MB
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.TERMINAL_MEMORY_TOTAL">
      <summary>
            Memory available to the process of the terminal (agent), MB
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.TERMINAL_MEMORY_AVAILABLE">
      <summary>
            Free memory of the terminal (agent) process, MB
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.TERMINAL_MEMORY_USED">
      <summary>
            Memory used by the terminal (agent), MB
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.TERMINAL_COMMUNITY_BALANCE">
      <summary>
            Balance in MQL5.community
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.TERMINAL_LANGUAGE">
      <summary>
            Language of the terminal
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.TERMINAL_COMPANY">
      <summary>
            Company name
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.TERMINAL_NAME">
      <summary>
            Terminal name
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.TERMINAL_PATH">
      <summary>
            Folder from which the terminal is started
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.TERMINAL_DATA_PATH">
      <summary>
            Folder in which terminal data are stored
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.TERMINAL_COMMONDATA_PATH">
      <summary>
            Common path for all of the terminals installed on a computer
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.STAT_INITIAL_DEPOSIT">
      <summary>
            The value of the initial deposit
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.STAT_WITHDRAWAL">
      <summary>
            Money withdrawn from an account
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.STAT_PROFIT">
      <summary>
            Net profit after testing, the sum ofSTAT_GROSS_PROFIT and STAT_GROSS_LOSS (STAT_GROSS_LOSS is always less than or equal to zero)
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.STAT_GROSS_PROFIT">
      <summary>
            Total profit, the sum of all profitable (positive) trades. The value is greater than or equal to zero
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.STAT_GROSS_LOSS">
      <summary>
            Total loss, the sum of all negative trades. The value is less than or equal to zero
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.STAT_MAX_PROFITTRADE">
      <summary>
            Maximum profit  the largest value of all profitable trades. The value is greater than or equal to zero
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.STAT_MAX_LOSSTRADE">
      <summary>
            Maximum loss  the lowest value of all losing trades. The value is less than or equal to zero
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.STAT_CONPROFITMAX">
      <summary>
            Maximum profit in a series of profitable trades. The value is greater than or equal to zero
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.STAT_CONPROFITMAX_TRADES">
      <summary>
            The number of trades that have formedSTAT_CONPROFITMAX (maximum profit in a series of profitable trades)
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.STAT_MAX_CONWINS">
      <summary>
            The total profit of the longest series of profitable trades
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.STAT_MAX_CONPROFIT_TRADES">
      <summary>
            The number of trades in the longest series of profitable trades STAT_MAX_CONWINS
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.STAT_CONLOSSMAX">
      <summary>
            Maximum loss in a series of losing trades. The value is less than or equal to zero
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.STAT_CONLOSSMAX_TRADES">
      <summary>
            The number of trades that have formedSTAT_CONLOSSMAX (maximum loss in a series of losing trades)
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.STAT_MAX_CONLOSSES">
      <summary>
            The total loss of the longest series of losing trades
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.STAT_MAX_CONLOSS_TRADES">
      <summary>
            The number of trades in the longest series of losing trades STAT_MAX_CONLOSSES
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.STAT_BALANCEMIN">
      <summary>
            Minimum balance value
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.STAT_BALANCE_DD">
      <summary>
            Maximum balance drawdown in monetary terms. In the process of trading, a balance may have numerous drawdowns; here the largest value is taken
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.STAT_BALANCEDD_PERCENT">
      <summary>
            Balance drawdown as a percentage that was recorded at the moment of the maximum balance drawdown in monetary terms (STAT_BALANCE_DD).
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.STAT_BALANCE_DDREL_PERCENT">
      <summary>
            Maximum balance drawdown as a percentage. In the process of trading, a balance may have numerous drawdowns, for each of which the relative drawdown value in percents is calculated. The greatest value is returned
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.STAT_BALANCE_DD_RELATIVE">
      <summary>
            Balance drawdown in monetary terms that was recorded at the moment of the maximum balance drawdown as a percentage (STAT_BALANCE_DDREL_PERCENT).
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.STAT_EQUITYMIN">
      <summary>
            Minimum equity value
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.STAT_EQUITY_DD">
      <summary>
            Maximum equity drawdown in monetary terms. In the process of trading, numerous drawdowns may appear on the equity; here the largest value is taken
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.STAT_EQUITYDD_PERCENT">
      <summary>
            Drawdown in percent that was recorded at the moment of the maximum equity drawdown in monetary terms (STAT_EQUITY_DD).
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.STAT_EQUITY_DDREL_PERCENT">
      <summary>
            Maximum equity drawdown as a percentage. In the process of trading, an equity may have numerous drawdowns, for each of which the relative drawdown value in percents is calculated. The greatest value is returned
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.STAT_EQUITY_DD_RELATIVE">
      <summary>
            Equity drawdown in monetary terms that was recorded at the moment of the maximum equity drawdown in percent (STAT_EQUITY_DDREL_PERCENT).
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.STAT_EXPECTED_PAYOFF">
      <summary>
            Expected payoff
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.STAT_PROFIT_FACTOR">
      <summary>
            Profit factor, equal to  the ratio ofSTAT_GROSS_PROFIT/STAT_GROSS_LOSS. If STAT_GROSS_LOSS=0, the profit factor is equal to DBL_MAX
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.STAT_RECOVERY_FACTOR">
      <summary>
            Recovery factor, equal to the ratio ofSTAT_PROFIT/STAT_BALANCE_DD
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.STAT_SHARPE_RATIO">
      <summary>
            Sharpe ratio
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.STAT_MIN_MARGINLEVEL">
      <summary>
            Minimum value of the margin level
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.STAT_CUSTOM_ONTESTER">
      <summary>
            The value of the calculated custom optimization criterion returned by the OnTester() function
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.STAT_DEALS">
      <summary>
            The number of deals
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.STAT_TRADES">
      <summary>
            The number of trades
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.STAT_PROFIT_TRADES">
      <summary>
            Profitable trades
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.STAT_LOSS_TRADES">
      <summary>
            Losing trades
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.STAT_SHORT_TRADES">
      <summary>
            Short trades
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.STAT_LONG_TRADES">
      <summary>
            Long trades
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.STAT_PROFIT_SHORTTRADES">
      <summary>
            Profitable short trades
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.STAT_PROFIT_LONGTRADES">
      <summary>
            Profitable long trades
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.STAT_PROFITTRADES_AVGCON">
      <summary>
            Average length of a profitable series of trades
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.STAT_LOSSTRADES_AVGCON">
      <summary>
            Average length of a losing series of trades
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CP_ACP">
      <summary>
            The current Windows ANSI code page.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CP_OEMCP">
      <summary>
            The current system OEM code page.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CP_MACCP">
      <summary>
            The current system Macintosh code page.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CP_THREAD_ACP">
      <summary>
            The Windows ANSI code page for the current thread.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CP_SYMBOL">
      <summary>
            Symbol code page
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CP_UTF7">
      <summary>
            UTF-7 code page.
            </summary>
    </member>
    <member name="F:NQuotes.MqlApiConstants.CP_UTF8">
      <summary>
            UTF-8 code page.
            </summary>
    </member>
  </members>
</doc>